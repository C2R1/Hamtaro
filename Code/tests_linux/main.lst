   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 103               	.global	__vector_21
 105               	__vector_21:
 106               		.stabd	46,0,0
 108               	.Ltext1:
   1:mavin.h       **** /******************************************************************************
   2:mavin.h       **** 
   3:mavin.h       **** MA-VIN header file for winavr.
   4:mavin.h       **** 
   5:mavin.h       **** URL - www.hitecrobotics.de
   6:mavin.h       **** mail - info@hitecrobotics.de
   7:mavin.h       **** 
   8:mavin.h       **** all rights reservered. hitec robotics/multiplex modellsport GmbH & Co. KG 2007
   9:mavin.h       ****              
  10:mavin.h       **** ******************************************************************************/
  11:mavin.h       **** 
  12:mavin.h       **** 
  13:mavin.h       **** #ifndef  __NEWBEETLE_H__
  14:mavin.h       **** #define  __NEWBEETLE_H__
  15:mavin.h       **** 
  16:mavin.h       **** #include <avr/signal.h> 
  17:mavin.h       **** #include <avr/interrupt.h>
  18:mavin.h       **** #include <avr/io.h>
  19:mavin.h       **** #include <avr/eeprom.h>
  20:mavin.h       **** #include <avr/pgmspace.h>
  21:mavin.h       **** 
  22:mavin.h       **** 
  23:mavin.h       **** #define cbi(sfr, bit)      (_SFR_BYTE(sfr) &= ~_BV(bit))
  24:mavin.h       **** #define sbi(sfr, bit)      (_SFR_BYTE(sfr) |= _BV(bit))
  25:mavin.h       **** #define inb(sfr)           _SFR_BYTE(sfr)
  26:mavin.h       **** #define outb(sfr, val)   (_SFR_BYTE(sfr) = (val))
  27:mavin.h       **** #define inw(sfr)           _SFR_WORD(sfr)
  28:mavin.h       **** #define outw(sfr, val)   (_SFR_WORD(sfr) = (val))
  29:mavin.h       **** #define outp(val, sfr)   outb(sfr, val)
  30:mavin.h       **** #define inp(sfr)           inb(sfr)
  31:mavin.h       **** #define BV(bit)            _BV(bit)
  32:mavin.h       **** #define PRG_RDB	 	  pgm_read_byte
  33:mavin.h       **** 
  34:mavin.h       **** 
  35:mavin.h       **** //타입정의
  36:mavin.h       **** typedef unsigned char  u08;
  37:mavin.h       **** typedef          char  s08;
  38:mavin.h       **** typedef unsigned short u16;
  39:mavin.h       **** typedef          short s16;
  40:mavin.h       **** typedef u08            bool;
  41:mavin.h       **** 
  42:mavin.h       **** 
  43:mavin.h       **** /////////////////////////////////////////////////////////////////////////////
  44:mavin.h       **** // DEFINE
  45:mavin.h       **** 
  46:mavin.h       **** #define TRUE    1
  47:mavin.h       **** #define FALSE   0
  48:mavin.h       **** 
  49:mavin.h       **** #define SELECT       1
  50:mavin.h       **** #define UNSELECT     0
  51:mavin.h       **** 
  52:mavin.h       **** 
  53:mavin.h       **** /////////////////////////////////////////////////////////////////////////////
  54:mavin.h       **** /////////////////////////////////////////////////////////////////////////////
  55:mavin.h       **** //
  56:mavin.h       **** //	
  57:mavin.h       **** //
  58:mavin.h       **** /////////////////////////////////////////////////////////////////////////////
  59:mavin.h       **** /////////////////////////////////////////////////////////////////////////////
  60:mavin.h       **** 
  61:mavin.h       **** 
  62:mavin.h       **** /////////////////////////////////////////////////////////////////////////////
  63:mavin.h       **** //	Remocon
  64:mavin.h       **** 
  65:mavin.h       **** #define IRRxPORT		PINF		
  66:mavin.h       **** //#define IR_RX_PIN		7			
  67:mavin.h       **** 
  68:mavin.h       **** #define IRTxPIN			PINF				
  69:mavin.h       **** #define IRTxPORT		PORTF
  70:mavin.h       **** //#define IR_TX_PIN		7			
  71:mavin.h       ****  
  72:mavin.h       ****  
  73:mavin.h       **** unsigned char IR_RX_PIN;
  74:mavin.h       **** unsigned char IR_TX_PIN;
  75:mavin.h       **** 
  76:mavin.h       **** /////////////////////////////////////////////////////////////////////////////
  77:mavin.h       **** //	Bulldozer  
  78:mavin.h       **** 
  79:mavin.h       **** 
  80:mavin.h       **** #define Right 0xfe
  81:mavin.h       **** #define Left 0xfd
  82:mavin.h       **** volatile unsigned char ControlPortc = 0;			// volatile                               
  83:mavin.h       **** 								
  84:mavin.h       **** 
  85:mavin.h       **** /////////////////////////////////////////////////////////////////////////////
  86:mavin.h       **** 
  87:mavin.h       **** 
  88:mavin.h       **** /////////////////////////////////////////////////
  89:mavin.h       **** char string1[8];		// 2007.4.18
  90:mavin.h       **** char string2[8];		// 2007.4.18
  91:mavin.h       **** static unsigned char text1,text2;
  92:mavin.h       **** 
  93:mavin.h       **** 
  94:mavin.h       **** #define LCD_RS 0  //Register Selector
  95:mavin.h       **** #define LCD_RW 1  //Read, Write
  96:mavin.h       **** #define LCD_E  2  //Enalble signal
  97:mavin.h       **** 
  98:mavin.h       **** #define LCD_CONTROL PORTG
  99:mavin.h       **** #define LCD_DATA    PORTA
 100:mavin.h       **** #define LCD_C_INOUT DDRG
 101:mavin.h       **** #define LCD_D_INOUT DDRA
 102:mavin.h       **** 
 103:mavin.h       **** //LCD_Control_Instruction
 104:mavin.h       **** #define LCD_SET_8 0x38 //8bit, 2Lines, 5*8
 105:mavin.h       **** #define LCD_SET_4 0x28 //4bit, 2Lines, 5*8
 106:mavin.h       **** #define LCD_D_ON  0x0c //Display On, Cusor, Blink Off
 107:mavin.h       **** #define LCD_D_CLR 0x01 //Clear Display
 108:mavin.h       **** #define LCD_E_N   0x06 //Entry mode Set(Normal)
 109:mavin.h       **** #define LCD_R_SHF 0x1c //Display Right Shift
 110:mavin.h       **** #define LCD_L_SHF 0x18 //Display Left Shift
 111:mavin.h       **** 
 112:mavin.h       **** //LCD_Parameter
 113:mavin.h       **** #define LCD_SIZE  8    //8*2 LCD
 114:mavin.h       **** #define LCD_C_NUM 8    //LCD CG Ram Num
 115:mavin.h       **** #define LCD_DOT   8    //LCD dot 5*8
 116:mavin.h       **** #define LCD_RIGHT 0
 117:mavin.h       **** #define LCD_LEFT  1
 118:mavin.h       **** 
 119:mavin.h       **** 
 120:mavin.h       **** ////////////////////////////////////////////////////////////////////////////////
 121:mavin.h       **** 
 122:mavin.h       **** /*
 123:mavin.h       **** #define ILLUMINANCE_LV1	4		
 124:mavin.h       **** #define ILLUMINANCE_LV2	6
 125:mavin.h       **** #define ILLUMINANCE_LV3	8
 126:mavin.h       **** #define ILLUMINANCE_LV4	15
 127:mavin.h       **** */
 128:mavin.h       **** 
 129:mavin.h       **** #define ILLUMINANCE_LV1	30		
 130:mavin.h       **** #define ILLUMINANCE_LV2	80		
 131:mavin.h       **** #define ILLUMINANCE_LV3	120		
 132:mavin.h       **** #define ILLUMINANCE_LV4	150	
 133:mavin.h       **** 
 134:mavin.h       **** 
 135:mavin.h       **** //마이크
 136:mavin.h       **** #define MIC_LEVEL_0   200
 137:mavin.h       **** #define MIC_LEVEL_1   210
 138:mavin.h       **** #define MIC_LEVEL_2   220
 139:mavin.h       **** #define MIC_LEVEL_3   230
 140:mavin.h       **** #define MIC_LEVEL_4   240
 141:mavin.h       **** #define MIC_LEVEL_5   250
 142:mavin.h       **** 
 143:mavin.h       **** //ADC channel
 144:mavin.h       **** ///////////////////////////////////////////////////////////////////////////////////////////////////
 145:mavin.h       **** //PORTF
 146:mavin.h       **** #define AD_0			0	
 147:mavin.h       **** #define AD_1			1	
 148:mavin.h       **** #define AD_2			2	
 149:mavin.h       **** #define AD_3			3	
 150:mavin.h       **** #define AD_4			4	
 151:mavin.h       **** #define M4_4_AD			5	
 152:mavin.h       **** #define MIC_IN			6	
 153:mavin.h       **** #define V_TEST			7
 154:mavin.h       **** 
 155:mavin.h       **** #define DDRF_OUTPUT	((1<<AD_0)|(1<<AD_1)|(1<<AD_2)|(1<< AD_3)|(1<<AD_4)|(1<<M4_4_AD)|(1<<MIC_IN)|(1
 156:mavin.h       **** #define DDRF_INPUT	~DDRF_OUTPUT	
 157:mavin.h       **** 
 158:mavin.h       **** #define ADC_CHANNEL(ch)		outp(ch,ADMUX)		//ADC Channel Select
 159:mavin.h       **** 
 160:mavin.h       **** volatile u08 ADCComplete;						
 161:mavin.h       **** u08 ADCData[2], AD_Value;						
 162:mavin.h       **** 
 163:mavin.h       **** 
 164:mavin.h       **** u08 fMicSample;    
 165:mavin.h       **** u08 fSpeakerOut;   
 166:mavin.h       **** u08 fcdsSample;		
 167:mavin.h       **** 
 168:mavin.h       **** //포토센서
 169:mavin.h       **** //////////////////////////////////////////////////////////
 170:mavin.h       **** #define SENS_FR		0
 171:mavin.h       **** #define SENS_FC		1
 172:mavin.h       **** #define SENS_FL		2
 173:mavin.h       **** #define SENS_BR		3
 174:mavin.h       **** #define SENS_BC		4
 175:mavin.h       **** #define SENS_BL		5
 176:mavin.h       **** #define SENS_TRIG	6
 177:mavin.h       **** #define IR_RX		7
 178:mavin.h       **** 
 179:mavin.h       **** #define FORWARD     1   
 180:mavin.h       **** #define DOWNWARD    0   
 181:mavin.h       **** 
 182:mavin.h       **** u08 nSensorVal;         
 183:mavin.h       **** u08 SensorDir;          
 184:mavin.h       **** u08 PhotoSensor;        
 185:mavin.h       **** 
 186:mavin.h       **** u08 ForwardPhotoSensor;
 187:mavin.h       **** u08 DownwardPhotoSensor;	
 188:mavin.h       **** 
 189:mavin.h       **** //전방센서
 190:mavin.h       **** #define PHOTO_ALL_OFF				0	//
 191:mavin.h       **** #define PHOTO_RIGHT                 1	//
 192:mavin.h       **** #define PHOTO_CENTER                2	//
 193:mavin.h       **** #define PHOTO_CENTER_RIGHT          3	//
 194:mavin.h       **** #define PHOTO_LEFT                  4	//
 195:mavin.h       **** #define PHOTO_LEFT_RIGHT            5	//
 196:mavin.h       **** #define PHOTO_CENTER_LEFT           6	//
 197:mavin.h       **** #define PHOTO_LEFT_CENTER_RIGHT     7	//
 198:mavin.h       **** 
 199:mavin.h       **** ////////////////////////////////////////////////////////////////////////////
 200:mavin.h       **** //FND Display
 201:mavin.h       **** //1번
 202:mavin.h       **** #define HC595_DATA_1	0
 203:mavin.h       **** #define HC595_CLK_1		1
 204:mavin.h       **** #define HC595_LATCH_1	2
 205:mavin.h       **** 
 206:mavin.h       **** //2번
 207:mavin.h       **** #define HC595_DATA_2	0
 208:mavin.h       **** #define HC595_CLK_2		1
 209:mavin.h       **** #define HC595_LATCH_2	2
 210:mavin.h       **** //3번
 211:mavin.h       **** #define HC595_DATA_3	4
 212:mavin.h       **** #define HC595_CLK_3		5
 213:mavin.h       **** #define HC595_LATCH_3	6
 214:mavin.h       **** 
 215:mavin.h       **** //4번
 216:mavin.h       **** #define HC595_DATA_4	0
 217:mavin.h       **** #define HC595_CLK_4		1
 218:mavin.h       **** #define HC595_LATCH_4	2
 219:mavin.h       **** 
 220:mavin.h       **** //5번
 221:mavin.h       **** #define HC595_DATA_5	7
 222:mavin.h       **** #define HC595_CLK_5		3
 223:mavin.h       **** #define HC595_LATCH_5	4
 224:mavin.h       **** 
 225:mavin.h       **** //////////////////////////////////////////////////////////////////////////////////////////
 226:mavin.h       **** //DC motor
 227:mavin.h       **** 
 228:mavin.h       **** #define CW		1
 229:mavin.h       **** #define CCW		0
 230:mavin.h       **** 
 231:mavin.h       **** #define MOTOR_RIGHT		1
 232:mavin.h       **** #define MOTOR_LEFT		2
 233:mavin.h       **** #define MOTOR_BOTH		3
 234:mavin.h       **** ////////////////////////////////////////< 20060921 >
 235:mavin.h       **** volatile u08 cur_pwm[2] = {0,0};
 236:mavin.h       **** volatile u08 org_pwm[2] = {0,0};
 237:mavin.h       **** volatile u08 pwm_cycle = 17; 
 238:mavin.h       **** volatile u08 pwm_cnt = 0;
 239:mavin.h       **** ////////////////////////////////////////////////
 240:mavin.h       **** 
 241:mavin.h       **** u16 tempCounter;
 242:mavin.h       **** 
 243:mavin.h       **** #define DEFAULT		0
 244:mavin.h       **** #define POSITION_1	1
 245:mavin.h       **** #define POSITION_2	2
 246:mavin.h       **** #define POSITION_3	3
 247:mavin.h       **** #define POSITION_4	4
 248:mavin.h       **** #define POSITION_5	5
 249:mavin.h       **** 
 250:mavin.h       ****  
 251:mavin.h       **** u08 IrKeyValue[15];
 252:mavin.h       **** u08 ir_trans_temp[4];
 253:mavin.h       **** 
 254:mavin.h       **** volatile u08 OnlyIrCnt = 0;
 255:mavin.h       **** 
 256:mavin.h       **** volatile u08 IRReg = 0x10;
 257:mavin.h       **** #define IrTimeFLAG				0x40
 258:mavin.h       **** 
 259:mavin.h       **** //-------------------------------------------------
 260:mavin.h       **** volatile u08  	T_count, T_data ;
 261:mavin.h       **** volatile u08	ir_data[4];
 262:mavin.h       **** volatile u08	MultiCommData;
 263:mavin.h       **** 
 264:mavin.h       **** #define SET_DETECT		0x10
 265:mavin.h       **** #define CLEAR_DETECT	0x00
 266:mavin.h       **** 
 267:mavin.h       **** #define set_d_FLAG		0x10
 268:mavin.h       **** #define clear_d_FLAG 	0x20
 269:mavin.h       **** 
 270:mavin.h       **** #define IrRxdFLAG		0x80
 271:mavin.h       **** 
 272:mavin.h       **** #define MULTIGAMEFLAG	0x02
 273:mavin.h       **** #define MULTIRXDFLAG	0x01
 274:mavin.h       **** 
 275:mavin.h       **** #define VolumCtrlFLAG	0x08
 276:mavin.h       **** 
 277:mavin.h       **** volatile u08 ir_tran_data[4] = {0xcc,0x33,0xf0,0x0f};
 278:mavin.h       **** volatile u08 RComFlagReg = 0;
 279:mavin.h       **** 
 280:mavin.h       **** #define flag_16T			0x01
 281:mavin.h       **** #define flag_8T				0x02
 282:mavin.h       **** #define flag_Trans_32		0x04
 283:mavin.h       **** #define flag_bit_high		0x08
 284:mavin.h       **** #define flag_bit_low		0x10
 285:mavin.h       **** #define flag_ir_trans_bsy	0x20
 286:mavin.h       **** #define ExclRxFLAG			0x40
 287:mavin.h       **** #define ExclTxFLAG			0x80
 288:mavin.h       **** 
 289:mavin.h       **** #define flag_ir_trans_start	(flag_16T|flag_ir_trans_bsy)
 290:mavin.h       **** 
 291:mavin.h       **** #define RE_FRONT_KEY	 0x02
 292:mavin.h       **** #define RE_REAR_KEY		 0x10
 293:mavin.h       **** #define RE_RIGHT_KEY	 0x20
 294:mavin.h       **** #define RE_LEFT_KEY		 0x08
 295:mavin.h       **** #define RE_STOP_KEY		 0xa0
 296:mavin.h       **** #define RE_SEND_KEY		 0x81
 297:mavin.h       **** #define RE_EXIT_KEY		 0x82
 298:mavin.h       **** #define RE_SET_KEY		 0x84
 299:mavin.h       **** #define RE_SOUND_KEY	 0x88
 300:mavin.h       **** #define RE_GAME_KEY		 0x90
 301:mavin.h       **** #define RE_L_KEY		 0x01
 302:mavin.h       **** #define RE_R_KEY		 0x04
 303:mavin.h       **** #define RE_CUSTOMSET_KEY (0xa0|0x84)
 304:mavin.h       **** #define CUSTOMSET	(0xa0|0x84)
 305:mavin.h       **** 
 306:mavin.h       **** u08 InfSenValue, IDmemory, TempExCustom, RobotComState, RCommCnt, PinniCmd;
 307:mavin.h       **** 
 308:mavin.h       **** ////////////////////////////////////////////////////////
 309:mavin.h       **** 
 310:mavin.h       **** //스피커 정의부
 311:mavin.h       **** #define ON		1
 312:mavin.h       **** #define OFF		0
 313:mavin.h       **** 
 314:mavin.h       **** //스피커 모듈...1번 
 315:mavin.h       **** //////////////////////////////////////////////////////////////////
 316:mavin.h       **** //PORTD
 317:mavin.h       **** #define L4816S_D	1		//LM4861 chip select
 318:mavin.h       **** #define L4816S_D_2	5		//LM4861 chip select
 319:mavin.h       **** //PORTB	
 320:mavin.h       **** #define DacSYNC		0		//SYNC
 321:mavin.h       **** #define DacSCLK		1		//SCK 사용
 322:mavin.h       **** #define DacDIN		2		//MOSI 사용
 323:mavin.h       **** 
 324:mavin.h       **** //
 325:mavin.h       **** #define SOUND_CLOSE()		sbi(PORTD,L4816S_D)
 326:mavin.h       **** #define SOUND_OPEN()		cbi(PORTD,L4816S_D)
 327:mavin.h       **** 
 328:mavin.h       **** #define SOUND_CLOSE_2()		sbi(PORTD,L4816S_D_2)
 329:mavin.h       **** #define SOUND_OPEN_2()		cbi(PORTD,L4816S_D_2)
 330:mavin.h       **** 
 331:mavin.h       **** ////////////////////////////////////////////
 332:mavin.h       **** 
 333:mavin.h       **** #define DacTriSTATE			0x30
 334:mavin.h       **** #define Dac1KToGND			0x10
 335:mavin.h       **** #define Dac100KToGND		0x20
 336:mavin.h       **** #define DacNORMAL			0x00
 337:mavin.h       **** 
 338:mavin.h       **** #define DAC_CLOSE(pos)				DacDigToAlog(pos,0, DacTriSTATE)
 339:mavin.h       **** #define DAC_OUTDATA(pos,dacdata)	DacDigToAlog(pos,dacdata, DacNORMAL)
 340:mavin.h       **** 
 341:mavin.h       **** 
 342:mavin.h       **** #define NOP()	asm volatile("nop"::)
 343:mavin.h       **** 
 344:mavin.h       **** #define M_DAC_H		125				// 멜로디 음량조절...
 345:mavin.h       **** #define M_DAC_L		105
 346:mavin.h       **** #define M_DAC_M		115
 347:mavin.h       **** 
 348:mavin.h       **** #define PLAYMELODY()	MelodyRegister |=  MelodyOnOffFLAG
 349:mavin.h       **** #define ENDMELODY()		MelodyRegister &= ~MelodyOnOffFLAG
 350:mavin.h       **** 
 351:mavin.h       **** #define Speaker			7
 352:mavin.h       **** #define InvertFLAG		0x01
 353:mavin.h       **** #define SpFLAG			0x02
 354:mavin.h       **** #define BREAKTIME		0x04
 355:mavin.h       **** #define MelodyOnOffFLAG	0x08
 356:mavin.h       **** 
 357:mavin.h       **** #define EEPPLAYFLAG		0x10
 358:mavin.h       **** #define EEPREPLAYNUMBERFLAG	0x20
 359:mavin.h       **** 
 360:mavin.h       **** 
 361:mavin.h       **** #define Kong_32_		5
 362:mavin.h       **** #define Kong_16_		10
 363:mavin.h       **** #define Kong_8_			20
 364:mavin.h       **** #define Kong_4_			41
 365:mavin.h       **** #define Kong_p4_		62
 366:mavin.h       **** #define Kong_2_			83
 367:mavin.h       **** #define Kong_p2_		124
 368:mavin.h       **** 
 369:mavin.h       **** #define ENDCODE				0x80
 370:mavin.h       **** #define END_number			30
 371:mavin.h       **** #define REPLAYCODE			0x40
 372:mavin.h       **** #define REPLAYNUMBERCODE	0x20
 373:mavin.h       **** 
 374:mavin.h       **** 
 375:mavin.h       **** u08 m_nPos_Speaker;	//스피커 위치의 상태
 376:mavin.h       **** 
 377:mavin.h       **** volatile u08 MelodyRegister;
 378:mavin.h       **** u08 Kong_ovf_count, KongCount, OvfCount, SubTimeValue;
 379:mavin.h       **** u08 *pM_, *pK_, *pM_refrash, *pK_refrash, *Mel,*Kon;
 380:mavin.h       **** 
 381:mavin.h       **** volatile u08 MelVolCtrl = 10;
 382:mavin.h       **** 
 383:mavin.h       **** volatile u08 MelImpect = 0;
 384:mavin.h       **** 
 385:mavin.h       **** 
 386:mavin.h       **** //Timer Overflow Count
 387:mavin.h       **** const prog_char Melody_Tof_count[34] =
 388:mavin.h       **** //솔  솔#  라  라# 시  도 도#  레  레#   미,파
 389:mavin.h       **** { 20, 19, 19, 17, 17, 16, 15, 14, 14, 13, 12,
 390:mavin.h       **** //  파#, 솔 솔#  라  라# 시  도  도#  레
 391:mavin.h       ****     11, 11, 10, 10,  9,  9,  9,  8,  8,
 392:mavin.h       **** //  레#  미  파  파#  솔  솔# 라  라#  시  도 
 393:mavin.h       ****     7,   7,  6,  6,  6,  6,  5,  5,  5,  5, 0x80, 0x40,0xc0,0x20,};
 394:mavin.h       **** 
 395:mavin.h       **** const prog_char Melody_Sub_Time[34] =
 396:mavin.h       **** 
 397:mavin.h       **** //솔  솔#  라  라# 시  도 도#  레  레#  미
 398:mavin.h       **** {0, 48, 192, 14, 202, 46, 232, 76, 178, 202,
 399:mavin.h       **** //파  파#  솔  솔#  라   라#  시  도   도#  레
 400:mavin.h       ****   34, 0, 114, 8, 152, 32, 158, 230, 136, 216,
 401:mavin.h       **** //레#  미  파   파#  솔  솔#   라  라#  시  도  
 402:mavin.h       ****  90, 184, 0, 20, 104, 224,    0,  20, 104, 224, 0, 0, 0, 0};
 403:mavin.h       **** 
 404:mavin.h       **** const prog_char Melody_Kongnamul[10] = 
 405:mavin.h       **** {   5, 		10,	 20,	 41,	 63,	 83,	 125, 		8,		 16,	 32,	};
 406:mavin.h       **** // 32분   16분   8분    4분     점4분    2분      점2분	  *점32분    *점16분    *점8분
 407:mavin.h       **** //==-----------------------------------------------------------------------------------------------
 408:mavin.h       **** 
 409:mavin.h       **** u08 m_bMelodyEnd;
 410:mavin.h       **** 
 411:mavin.h       **** //tone 음정
 412:mavin.h       **** const prog_char T1SOL       [2] = {0,30};    //솔    0 
 413:mavin.h       **** const prog_char T1SOLS		[2] = {1 ,30};   //솔#    1 
 414:mavin.h       **** const prog_char T1RA        [2] = {2 ,30};   //라     2 
 415:mavin.h       **** const prog_char T1RAS		[2] = {3 ,30};   //라#    3 
 416:mavin.h       **** const prog_char T1SI        [2] = {4 ,30};   //시     4 
 417:mavin.h       **** const prog_char T2DO        [2] = {5 ,30};   //도     5 
 418:mavin.h       **** const prog_char T2DOS		[2] = {6 ,30};   //도#    6 
 419:mavin.h       **** const prog_char T2RE        [2] = {7 ,30};   //레     7 
 420:mavin.h       **** const prog_char T2RES		[2] = {8 ,30};   //레#    8 
 421:mavin.h       **** const prog_char T2MI        [2] = {9 ,30};   //미     9 
 422:mavin.h       **** const prog_char T2PA        [2] = {10,30};   //파     10
 423:mavin.h       **** const prog_char T2PAS		[2] = {11,30};   //파#    11
 424:mavin.h       **** const prog_char T2SOL       [2] = {12,30};   //솔     12
 425:mavin.h       **** const prog_char T2SOLS		[2] = {13,30};   //솔#    13
 426:mavin.h       **** const prog_char T2RA        [2] = {14,30};   //라     14
 427:mavin.h       **** const prog_char T2RAS		[2] = {15,30};   //라#    15
 428:mavin.h       **** const prog_char T2SI        [2] = {16,30};   //시     16
 429:mavin.h       **** const prog_char T3DO        [2] = {17,30};   //도     17
 430:mavin.h       **** const prog_char T3DOS		[2] = {18,30};   //도#    18
 431:mavin.h       **** const prog_char T3RE        [2] = {19,30};   //레     19
 432:mavin.h       **** const prog_char T3RES		[2] = {20,30};   //레#    20
 433:mavin.h       **** const prog_char T3MI        [2] = {21,30};   //미     21
 434:mavin.h       **** const prog_char T3PA        [2] = {22,30};   //파     22
 435:mavin.h       **** const prog_char T3PAS		[2] = {23,30};   //파#    23
 436:mavin.h       **** const prog_char T3SOL       [2] = {24,30};   //솔     24
 437:mavin.h       **** const prog_char T3SOLS		[2] = {25,30};   //솔#    25
 438:mavin.h       **** const prog_char T3RA        [2] = {26,30};   //라     26
 439:mavin.h       **** const prog_char T3RAS		[2] = {27,30};   //라#    27
 440:mavin.h       **** const prog_char T3SI        [2] = {28,30};   //시     28
 441:mavin.h       **** const prog_char T4DO        [2] = {29,30};   //도     29
 442:mavin.h       **** 
 443:mavin.h       **** const prog_char CRES [2] = {32,30};    //쉼표                                
 444:mavin.h       **** 
 445:mavin.h       **** //Rhythm 리듬
 446:mavin.h       **** const prog_char RHYTHM_32    [1] = { 0 };   //32분
 447:mavin.h       **** const prog_char RHYTHM_16    [1] = { 1 };   //16분 
 448:mavin.h       **** const prog_char RHYTHM_8_2   [1] = { 2 };   //8분
 449:mavin.h       **** const prog_char RHYTHM_4_2   [1] = { 3 };   //4분
 450:mavin.h       **** const prog_char RHYTHM_DOT_4 [1] = { 4 };   //점4분
 451:mavin.h       **** const prog_char RHYTHM_2_2   [1] = { 5 };   //2분
 452:mavin.h       **** const prog_char RHYTHM_DOT_2 [1] = { 6 };   //점2분
 453:mavin.h       **** const prog_char RHYTHM_DOT_32[1] = { 7 };   //*점32분
 454:mavin.h       **** const prog_char RHYTHM_DOT_16[1] = { 8 };   //*점16분
 455:mavin.h       **** const prog_char RHYTHM_DOT_8 [1] = { 9 };   //*점8분
 456:mavin.h       **** 
 457:mavin.h       **** 
 458:mavin.h       **** //Melody data ---------------------------------------------------------------------
 459:mavin.h       **** //Melody1
 460:mavin.h       **** const prog_char MELODY_1[14]	={9, 12, 9, 30, 14, 10, };
 461:mavin.h       **** const prog_char RHYTHM_EX_1[13]	={2|0x10, 2|0x10, 2|0x10, 2|0x10, 2|0x10, };
 462:mavin.h       **** 
 463:mavin.h       **** //Melody2
 464:mavin.h       **** const prog_char MELODY_2[15]	={9, 12, 9, 14, 30,10, 7, 0, 2, 4, 5, 7, 4, 5, 30};
 465:mavin.h       **** const prog_char RHYTHM_EX_2[14]	={2, 2, 2, 2, 2, 2, 1,
 466:mavin.h       **** 								  1, 1, 1, 1, 1, 3};
 467:mavin.h       **** //Melody3
 468:mavin.h       **** const prog_char MELODY_3[4] 	={ 2, 3, 2, 30};			
 469:mavin.h       **** const prog_char RHYTHM_EX_3[3] 	={ 1|0x10, 1|0x30, 1|0x10, };			
 470:mavin.h       **** 
 471:mavin.h       **** //Melody4
 472:mavin.h       **** const prog_char MELODY_4[26]	={	 0,  2,  4,  5,  7,  8,  9,  4,  7,  2,   
 473:mavin.h       **** 									 5, 32,  4,  3,  4,	32, 10,  6,  9,  4, 
 474:mavin.h       **** 									 7, 32,  5,  4,  5, 30 };
 475:mavin.h       **** const prog_char RHYTHM_EX_4[25]	={	 7,  7,  7,  7,  7,  7,  9,  7,  9,  7, 
 476:mavin.h       **** 									 9,  7,  8,  8,  8,  1,  9,  7,  9,  7,
 477:mavin.h       **** 									 9,  7,  8,  8,  8 };	//키 입력할 때 나는 소리
 478:mavin.h       **** //Melody5
 479:mavin.h       **** const prog_char MELODY_5[4] 	={ 2, 3, 2, 30};			
 480:mavin.h       **** const prog_char RHYTHM_EX_5[3] 	={ 1|0x10, 1|0x30, 1|0x10, };				
 481:mavin.h       **** 
 482:mavin.h       **** //Melody6
 483:mavin.h       **** const prog_char MELODY_6[5] 	={ 2, 7, 2, 32, 30};			
 484:mavin.h       **** const prog_char RHYTHM_EX_6[4] 	={ 2, 2, 1, 4};	
 485:mavin.h       **** 
 486:mavin.h       **** //Melody7
 487:mavin.h       **** const prog_char MELODY_7[4] ={	29, 24, 29, 30};
 488:mavin.h       **** const prog_char RHYTHM_EX_7[3] ={	 8,  8,  8 };
 489:mavin.h       **** 
 490:mavin.h       **** //Melody8
 491:mavin.h       **** const prog_char MELODY_8[5] ={ 11, 3, 11, 32, 30};
 492:mavin.h       **** const prog_char RHYTHM_EX_8[4] ={ 2, 1, 2, 8};	
 493:mavin.h       **** 
 494:mavin.h       **** //Melody9
 495:mavin.h       **** const prog_char MELODY_9[3]    ={7, 20, 30};				
 496:mavin.h       **** const prog_char RHYTHM_EX_9[2]    ={1, 0};
 497:mavin.h       **** 
 498:mavin.h       **** //Melody10
 499:mavin.h       **** const prog_char MELODY_10[5] ={	29, 24, 29, 32,30};
 500:mavin.h       **** const prog_char RHYTHM_EX_10[4] ={	 8,  8,  8, 5 };
 501:mavin.h       **** //-------- ---------------------------------------------------------------------
 502:mavin.h       **** 
 503:mavin.h       **** volatile u16 delay_count;
 504:mavin.h       **** volatile u16 delayms_count;
 505:mavin.h       **** volatile u16 delay32us;		 	// 07.03.29
 506:mavin.h       **** 								//2006-09-20 3:07오후
 507:mavin.h       **** volatile u08 EepMelAddr;
 508:mavin.h       **** volatile u08 Eep_Kon[33];
 509:mavin.h       **** volatile u08 Eep_Mel[33];
 510:mavin.h       **** ///
 511:mavin.h       **** // remocon value 유지 테스트
 512:mavin.h       **** volatile u08 RemoconValuedelayCnt = 0;
 513:mavin.h       **** 
 514:mavin.h       **** 
 515:mavin.h       **** //LCD로 디스플레이할 문자
 516:mavin.h       **** //unsigned char degree[]= {0x02,0x05,0x02,0x00,0x00,0x00,0x00,0x00};  //도
 517:mavin.h       **** 
 518:mavin.h       **** 
 519:mavin.h       **** //FND 테스트
 520:mavin.h       **** ////////////////////////////////////////////////////////////
 521:mavin.h       **** char number[16]={0xde,0x18,0xcd,0x5d,0x1b,0x57,0xd7,0x1e,0xdf,0x5f,0x9f,0xd3,0xc1,0xd9,0xcf,0x87};
 522:mavin.h       **** 
 523:mavin.h       **** char number_fnd[16]={0x48,0xeb,0x8c,0x89,0x2b,0x19,0x18,0x4b,0x08,0x09,0x0a,0x38,0x5c,0xa8,0x1c,0x1
 524:mavin.h       **** 
 525:mavin.h       **** unsigned char empty[]="        ";	
 526:mavin.h       **** 
 527:mavin.h       ****  
 528:mavin.h       **** void LEDModuleCtrl(u08 index,u08 position);
 529:mavin.h       **** 
 530:mavin.h       **** ////////////////////////////////////////////////////////////
 531:mavin.h       **** ////////////////////////////////////////////////////////////
 532:mavin.h       **** //
 533:mavin.h       **** //	함수 선언부
 534:mavin.h       **** //
 535:mavin.h       **** ////////////////////////////////////////////////////////////
 536:mavin.h       **** 
 537:mavin.h       **** ////////////////////////////////////////////////////////////
 538:mavin.h       **** //	2007.03.13 추가 소스 (Function Define)
 539:mavin.h       **** ////////////////////////////////////////////////////////////
 540:mavin.h       **** 
 541:mavin.h       **** // Remocon 
 542:mavin.h       **** void REPosition(u08 repos);
 543:mavin.h       **** 
 544:mavin.h       **** ////////////////////////////////////////////////////////////
 545:mavin.h       **** 
 546:mavin.h       **** //LCD_Member_function
 547:mavin.h       **** void lcd_port_init(void);
 548:mavin.h       **** void lcd_init(void);
 549:mavin.h       **** void command(unsigned char cmd);
 550:mavin.h       **** void lcd_out(unsigned char data);
 551:mavin.h       **** void lcd_position(unsigned char row, unsigned char col);
 552:mavin.h       **** void lcd_char_out(unsigned char row, unsigned char col, unsigned char data);
 553:mavin.h       **** void lcd_str_out(unsigned char row, unsigned char col, unsigned char *msg);
 554:mavin.h       **** void lcd_line_clr(unsigned char line);
 555:mavin.h       **** void lcd_shift(unsigned char RL);
 556:mavin.h       **** void lcd_put_font(void);
 557:mavin.h       **** void lcd_sensor_display(unsigned char sensor_value);
 558:mavin.h       **** 
 559:mavin.h       **** void LCD_os_init(void);
 560:mavin.h       **** 
 561:mavin.h       **** void PhotoSensorUpdate();
 562:mavin.h       **** 
 563:mavin.h       **** //Delay Function
 564:mavin.h       **** void delay_cho(void);
 565:mavin.h       **** void delay(unsigned int delay_count);
 566:mavin.h       **** void delayms(unsigned int delay_ms);
 567:mavin.h       **** 
 568:mavin.h       **** void mSecDelay(unsigned int delay_ms);
 569:mavin.h       **** 
 570:mavin.h       **** void Beep(int position);
 571:mavin.h       **** 
 572:mavin.h       **** void Init_PWM_T1_for_DCmotor(void);
 573:mavin.h       **** 
 574:mavin.h       **** 
 575:mavin.h       **** bool GetPhotoSensor(u08 sel,u08 nPhotoVal);
 576:mavin.h       **** 
 577:mavin.h       **** void Initialize();
 578:mavin.h       **** 
 579:mavin.h       **** u08 GetADC();
 580:mavin.h       **** 
 581:mavin.h       **** ///멜로디 부분
 582:mavin.h       **** void MelFunc();
 583:mavin.h       **** void MelodyGnrate(u08 select_melody);
 584:mavin.h       **** void EepMelGnrate();
 585:mavin.h       **** void DacDigToAlog(u08 pos,u08 DacDigData, u08 DacOpcode);
 586:mavin.h       **** void DacSetUp(void);
 587:mavin.h       **** 
 588:mavin.h       **** void SetSpeaker(u08 pos,u08 *pMel,u08 *pKong);
 589:mavin.h       **** void Composition(u08 pos,u08 *pTone,u08 *pRhythm);
 590:mavin.h       **** 
 591:mavin.h       **** void FndDisplay(u08 pos,u08 val);
 592:mavin.h       **** 
 593:mavin.h       **** //리모콘 부분
 594:mavin.h       **** void IrExCmdAct(u08 irExdata);
 595:mavin.h       **** void IrRxTranslation(void);
 596:mavin.h       **** void IrRecv(void);
 597:mavin.h       **** void IrComm(void);
 598:mavin.h       **** u08 GetRemocon();
 599:mavin.h       **** bool GetRemoconVal(u08 repos,u08 nVal);
 600:mavin.h       **** 
 601:mavin.h       **** 
 602:mavin.h       **** void ClkTickFunc(void);
 603:mavin.h       **** bool Bulldozer(u08 state);
 604:mavin.h       **** 
 605:mavin.h       **** ///////////////////////////////////////////////////////////
 606:mavin.h       **** 
 607:mavin.h       **** void isr_pwm(void);
 608:mavin.h       **** void DcMotor_temp(u08 direction, u08 sel_motor, u08 pwm_value);//
 609:mavin.h       **** 
 610:mavin.h       **** 
 611:mavin.h       **** ////////////////////////////////////////////////////////////
 612:mavin.h       **** /////- Function -///////////////////////////////////////////
 613:mavin.h       **** ////////////////////////////////////////////////////////////
 614:mavin.h       **** 
 615:mavin.h       **** SIGNAL(SIG_ADC)
 616:mavin.h       **** {
 110               	.LM0:
 111               	.LFBB1:
 112 0000 1F92      		push __zero_reg__
 113 0002 0F92      		push r0
 114 0004 0FB6      		in r0,__SREG__
 115 0006 0F92      		push r0
 116 0008 1124      		clr __zero_reg__
 117 000a 8F93      		push r24
 118               	/* prologue: Signal */
 119               	/* frame size = 0 */
 120               	/* stack size = 4 */
 121               	.L__stack_usage = 4
 617:mavin.h       ****     ADCData[0] = inp(ADCL);
 123               	.LM1:
 124 000c 84B1      		in r24,36-32
 125 000e 8093 0000 		sts ADCData,r24
 618:mavin.h       ****     ADCData[1] = inp(ADCH);
 127               	.LM2:
 128 0012 85B1      		in r24,37-32
 129 0014 8093 0000 		sts ADCData+1,r24
 619:mavin.h       ****     ADCComplete = 1;	//ADC 완료 플래그
 131               	.LM3:
 132 0018 81E0      		ldi r24,lo8(1)
 133 001a 8093 0000 		sts ADCComplete,r24
 134               	/* epilogue start */
 620:mavin.h       **** }
 136               	.LM4:
 137 001e 8F91      		pop r24
 138 0020 0F90      		pop r0
 139 0022 0FBE      		out __SREG__,r0
 140 0024 0F90      		pop r0
 141 0026 1F90      		pop __zero_reg__
 142 0028 1895      		reti
 144               	.Lscope1:
 146               		.stabd	78,0,0
 148               	.global	ClkTickFunc
 150               	ClkTickFunc:
 151               		.stabd	46,0,0
 621:mavin.h       **** 
 622:mavin.h       **** /******************************************************************************
 623:mavin.h       ****  타이머 인터럽트는 0.125us 마다 발생한다. 
 624:mavin.h       **** ******************************************************************************/
 625:mavin.h       **** SIGNAL(SIG_OVERFLOW0)
 626:mavin.h       **** {						//32uS 마다 진입
 627:mavin.h       **** 	
 628:mavin.h       **** 	static u08 mux2 = 0;
 629:mavin.h       ****   	static u08 cntTick = 4;
 630:mavin.h       ****   	static u08 cntMotor = 0;
 631:mavin.h       ****   	static u08 Pwmloopcnt = 0;  //
 632:mavin.h       ****  			 		 	 	
 633:mavin.h       ****  	if(mux2){      //64uS 마다 진입
 634:mavin.h       ****  	    mux2 = 0;
 635:mavin.h       ****      	IrComm(); 
 636:mavin.h       ****      	MelFunc();         	
 637:mavin.h       **** 		   
 638:mavin.h       **** 		if(delay_count != 0){	
 639:mavin.h       **** 			delay_count--;
 640:mavin.h       **** 		}
 641:mavin.h       **** 		if(delayms_count != 0){
 642:mavin.h       **** 			delayms_count--;
 643:mavin.h       **** 		}
 644:mavin.h       **** 			
 645:mavin.h       ****  	}else{	
 646:mavin.h       **** 		mux2 = 1;					///// ControlPortc == 1 포토센서.
 647:mavin.h       **** 		if(ControlPortc == 1)  PhotoSensorUpdate();     ///// 2007.03.13 추가. (불도저 or 포토센서)
 648:mavin.h       **** 
 649:mavin.h       **** 		if(Pwmloopcnt == 0){	// PWM 루틴	
 650:mavin.h       **** 		    Pwmloopcnt = 2;	    
 651:mavin.h       **** 			isr_pwm();
 652:mavin.h       **** 		}
 653:mavin.h       **** 
 654:mavin.h       **** 		--Pwmloopcnt;		
 655:mavin.h       **** 		ClkTickFunc();		// 	CLK Genarate Zone 	   	
 656:mavin.h       **** 	}
 657:mavin.h       **** 
 658:mavin.h       **** 	if(delay32us != 0) delay32us--;
 659:mavin.h       **** 	if(delay32us < 0 ) delay32us =0;
 660:mavin.h       **** 	
 661:mavin.h       **** }
 662:mavin.h       **** 
 663:mavin.h       **** //------------------------------------------------------------------------------------
 664:mavin.h       **** 
 665:mavin.h       **** void ClkTickFunc(void)
 666:mavin.h       **** {		// 진입주기 64uSec
 153               	.LM5:
 154               	.LFBB2:
 155               	/* prologue: function */
 156               	/* frame size = 0 */
 157               	/* stack size = 0 */
 158               	.L__stack_usage = 0
 667:mavin.h       **** 	
 668:mavin.h       **** 	static u08 tickcnt  = 0;
 669:mavin.h       **** 	static CLKTickCnt = 0;	
 670:mavin.h       ****   	static u08 sec6cnt = 0;
 671:mavin.h       ****   	
 672:mavin.h       ****  
 673:mavin.h       ****   	tickcnt++;
 160               	.LM6:
 161 002a 8091 0000 		lds r24,tickcnt.1708
 162 002e 8F5F      		subi r24,lo8(-(1))
 163 0030 8093 0000 		sts tickcnt.1708,r24
 674:mavin.h       ****    	
 675:mavin.h       **** 	if(tickcnt == 16)
 165               	.LM7:
 166 0034 8031      		cpi r24,lo8(16)
 167 0036 01F4      		brne .L2
 676:mavin.h       **** 	{									// 64 * 16 = 1024uSec
 677:mavin.h       **** 		tickcnt = 0;			
 169               	.LM8:
 170 0038 1092 0000 		sts tickcnt.1708,__zero_reg__
 678:mavin.h       **** 		CLKTickCnt++;
 172               	.LM9:
 173 003c 8091 0000 		lds r24,CLKTickCnt.1709
 174 0040 9091 0000 		lds r25,CLKTickCnt.1709+1
 175 0044 0196      		adiw r24,1
 176 0046 9093 0000 		sts CLKTickCnt.1709+1,r25
 177 004a 8093 0000 		sts CLKTickCnt.1709,r24
 679:mavin.h       **** 	    
 680:mavin.h       **** 	    
 681:mavin.h       **** 		fMicSample = 1;
 179               	.LM10:
 180 004e 21E0      		ldi r18,lo8(1)
 181 0050 2093 0000 		sts fMicSample,r18
 682:mavin.h       ****         
 683:mavin.h       **** 		if(CLKTickCnt == 2)
 183               	.LM11:
 184 0054 8230      		cpi r24,2
 185 0056 9105      		cpc r25,__zero_reg__
 186 0058 01F4      		brne .L2
 684:mavin.h       **** 		{					// 1024 *	2	=	2,048
 685:mavin.h       **** 		    fcdsSample = 1;
 188               	.LM12:
 189 005a 2093 0000 		sts fcdsSample,r18
 686:mavin.h       **** 			CLKTickCnt = 0;
 191               	.LM13:
 192 005e 1092 0000 		sts CLKTickCnt.1709+1,__zero_reg__
 193 0062 1092 0000 		sts CLKTickCnt.1709,__zero_reg__
 194               	.L2:
 195 0066 0895      		ret
 201               	.Lscope2:
 203               		.stabd	78,0,0
 206               	.global	REPosition
 208               	REPosition:
 209               		.stabd	46,0,0
 687:mavin.h       **** 		}
 688:mavin.h       **** 		
 689:mavin.h       **** 	}
 690:mavin.h       **** }
 691:mavin.h       **** 
 692:mavin.h       **** //---------------------------------------------------------
 693:mavin.h       **** ////////////////////////////////////////////////////////////
 694:mavin.h       **** //	2007.03.13 추가 소스 (Function)
 695:mavin.h       **** ////////////////////////////////////////////////////////////
 696:mavin.h       **** 
 697:mavin.h       **** // Remocon
 698:mavin.h       **** 
 699:mavin.h       **** void REPosition(u08 repos)
 700:mavin.h       **** {
 211               	.LM14:
 212               	.LFBB3:
 213               	/* prologue: function */
 214               	/* frame size = 0 */
 215               	/* stack size = 0 */
 216               	.L__stack_usage = 0
 701:mavin.h       **** 	switch(repos)
 218               	.LM15:
 219 0068 8330      		cpi r24,lo8(3)
 220 006a 01F0      		breq .L8
 221 006c 8430      		cpi r24,lo8(4)
 222 006e 00F4      		brsh .L11
 223 0070 8130      		cpi r24,lo8(1)
 224 0072 01F0      		breq .L6
 225 0074 8230      		cpi r24,lo8(2)
 226 0076 01F4      		brne .L4
 227 0078 00C0      		rjmp .L13
 228               	.L11:
 229 007a 8430      		cpi r24,lo8(4)
 230 007c 01F0      		breq .L9
 231 007e 8530      		cpi r24,lo8(5)
 232 0080 01F4      		brne .L4
 233 0082 00C0      		rjmp .L14
 234               	.L6:
 702:mavin.h       **** 	{
 703:mavin.h       **** 		case 1:		IR_RX_PIN = IR_TX_PIN = 0;
 236               	.LM16:
 237 0084 1092 0000 		sts IR_TX_PIN,__zero_reg__
 238 0088 1092 0000 		sts IR_RX_PIN,__zero_reg__
 704:mavin.h       **** 				break;
 240               	.LM17:
 241 008c 0895      		ret
 242               	.L13:
 705:mavin.h       **** 		case 2:		IR_RX_PIN = IR_TX_PIN = 1;
 244               	.LM18:
 245 008e 81E0      		ldi r24,lo8(1)
 246 0090 00C0      		rjmp .L12
 247               	.L8:
 706:mavin.h       **** 				break;
 707:mavin.h       **** 		case 3:		IR_RX_PIN = IR_TX_PIN = 2;
 249               	.LM19:
 250 0092 82E0      		ldi r24,lo8(2)
 251 0094 00C0      		rjmp .L12
 252               	.L9:
 708:mavin.h       **** 				break;
 709:mavin.h       **** 		case 4:		IR_RX_PIN = IR_TX_PIN = 3;
 254               	.LM20:
 255 0096 83E0      		ldi r24,lo8(3)
 256               	.L12:
 257 0098 8093 0000 		sts IR_TX_PIN,r24
 258 009c 8093 0000 		sts IR_RX_PIN,r24
 710:mavin.h       **** 				break;
 260               	.LM21:
 261 00a0 0895      		ret
 262               	.L14:
 711:mavin.h       **** 		case 5:		IR_RX_PIN = IR_TX_PIN = 4;
 264               	.LM22:
 265 00a2 84E0      		ldi r24,lo8(4)
 266 00a4 8093 0000 		sts IR_TX_PIN,r24
 267 00a8 8093 0000 		sts IR_RX_PIN,r24
 268               	.L4:
 269 00ac 0895      		ret
 271               	.Lscope3:
 273               		.stabd	78,0,0
 276               	.global	SetSpeaker
 278               	SetSpeaker:
 279               		.stabd	46,0,0
 712:mavin.h       **** 				break;
 713:mavin.h       **** 	}
 714:mavin.h       **** }
 715:mavin.h       **** 
 716:mavin.h       **** 
 717:mavin.h       **** ///////////////////////////////////////////////////////
 718:mavin.h       **** //멜로디 관련함수
 719:mavin.h       **** 
 720:mavin.h       **** void SetSpeaker(u08 pos,u08 *pMel,u08 *pKong)
 721:mavin.h       **** {
 281               	.LM23:
 282               	.LFBB4:
 283               	/* prologue: function */
 284               	/* frame size = 0 */
 285               	/* stack size = 0 */
 286               	.L__stack_usage = 0
 722:mavin.h       ****     Mel = pMel;
 288               	.LM24:
 289 00ae 6093 0000 		sts Mel,r22
 290 00b2 7093 0000 		sts Mel+1,r23
 723:mavin.h       ****     Kon = pKong;
 292               	.LM25:
 293 00b6 4093 0000 		sts Kon,r20
 294 00ba 5093 0000 		sts Kon+1,r21
 724:mavin.h       **** 	
 725:mavin.h       **** 	m_nPos_Speaker = pos;		
 296               	.LM26:
 297 00be 8093 0000 		sts m_nPos_Speaker,r24
 726:mavin.h       ****     
 727:mavin.h       **** 	pM_ = pM_refrash = Mel;			
 299               	.LM27:
 300 00c2 6093 0000 		sts pM_refrash,r22
 301 00c6 7093 0000 		sts pM_refrash+1,r23
 302 00ca 6093 0000 		sts pM_,r22
 303 00ce 7093 0000 		sts pM_+1,r23
 728:mavin.h       **** 	pK_ = pK_refrash =  Kon;		
 305               	.LM28:
 306 00d2 4093 0000 		sts pK_refrash,r20
 307 00d6 5093 0000 		sts pK_refrash+1,r21
 308 00da 4093 0000 		sts pK_,r20
 309 00de 5093 0000 		sts pK_+1,r21
 310               	.LBB2:
 311               	.LBB3:
 729:mavin.h       **** 	OvfCount 	= pgm_read_byte(&Melody_Tof_count[pgm_read_byte(pM_ )]);
 313               	.LM29:
 314 00e2 FB01      		movw r30,r22
 315               	/* #APP */
 316               	 ;  729 "mavin.h" 1
 317 00e4 8491      		lpm r24, Z
 318               		
 319               	 ;  0 "" 2
 320               	/* #NOAPP */
 321               	.LBE3:
 322 00e6 90E0      		ldi r25,lo8(0)
 323 00e8 FC01      		movw r30,r24
 324 00ea E050      		subi r30,lo8(-(Melody_Tof_count))
 325 00ec F040      		sbci r31,hi8(-(Melody_Tof_count))
 326               	/* #APP */
 327               	 ;  729 "mavin.h" 1
 328 00ee E491      		lpm r30, Z
 329               		
 330               	 ;  0 "" 2
 331               	/* #NOAPP */
 332               	.LBE2:
 333 00f0 E093 0000 		sts OvfCount,r30
 334               	.LBB4:
 730:mavin.h       **** 	SubTimeValue= pgm_read_byte(&Melody_Sub_Time[pgm_read_byte(pM_)]);	
 336               	.LM30:
 337 00f4 8050      		subi r24,lo8(-(Melody_Sub_Time))
 338 00f6 9040      		sbci r25,hi8(-(Melody_Sub_Time))
 339 00f8 FC01      		movw r30,r24
 340               	/* #APP */
 341               	 ;  730 "mavin.h" 1
 342 00fa 8491      		lpm r24, Z
 343               		
 344               	 ;  0 "" 2
 345               	/* #NOAPP */
 346               	.LBE4:
 347 00fc 8093 0000 		sts SubTimeValue,r24
 348               	.LBB5:
 731:mavin.h       **** 	
 732:mavin.h       **** 	MelImpect = pgm_read_byte(pK_);
 350               	.LM31:
 351 0100 FA01      		movw r30,r20
 352               	/* #APP */
 353               	 ;  732 "mavin.h" 1
 354 0102 E491      		lpm r30, Z
 355               		
 356               	 ;  0 "" 2
 357               	/* #NOAPP */
 358               	.LBE5:
 359 0104 E093 0000 		sts MelImpect,r30
 360               	.LBB6:
 733:mavin.h       **** 	KongCount 	= pgm_read_byte(&Melody_Kongnamul[(0x0f&(pgm_read_byte(pK_)))]);
 362               	.LM32:
 363 0108 F0E0      		ldi r31,lo8(0)
 364 010a EF70      		andi r30,lo8(15)
 365 010c F070      		andi r31,hi8(15)
 366 010e E050      		subi r30,lo8(-(Melody_Kongnamul))
 367 0110 F040      		sbci r31,hi8(-(Melody_Kongnamul))
 368               	/* #APP */
 369               	 ;  733 "mavin.h" 1
 370 0112 E491      		lpm r30, Z
 371               		
 372               	 ;  0 "" 2
 373               	/* #NOAPP */
 374               	.LBE6:
 375 0114 E093 0000 		sts KongCount,r30
 734:mavin.h       ****     
 735:mavin.h       ****     
 736:mavin.h       **** 	PLAYMELODY();		
 377               	.LM33:
 378 0118 8091 0000 		lds r24,MelodyRegister
 379 011c 8860      		ori r24,lo8(8)
 380 011e 8093 0000 		sts MelodyRegister,r24
 737:mavin.h       **** 	MelodyRegister &= ~EEPPLAYFLAG;   
 382               	.LM34:
 383 0122 8091 0000 		lds r24,MelodyRegister
 384 0126 8F7E      		andi r24,lo8(-17)
 385 0128 8093 0000 		sts MelodyRegister,r24
 386               	.L16:
 738:mavin.h       **** 
 739:mavin.h       ****     //메인 루틴에서 계속해서 돌도록         
 740:mavin.h       ****     while(MelodyRegister & MelodyOnOffFLAG);     
 388               	.LM35:
 389 012c 8091 0000 		lds r24,MelodyRegister
 390 0130 83FD      		sbrc r24,3
 391 0132 00C0      		rjmp .L16
 392               	/* epilogue start */
 741:mavin.h       **** }
 394               	.LM36:
 395 0134 0895      		ret
 397               	.Lscope4:
 399               		.stabd	78,0,0
 404               	.global	DacDigToAlog
 406               	DacDigToAlog:
 407               		.stabd	46,0,0
 742:mavin.h       **** 
 743:mavin.h       **** //---------------------------------------------------------
 744:mavin.h       **** void MelFunc(void){						
 745:mavin.h       **** 	
 746:mavin.h       **** 	static u08  l_mel_high = 2;
 747:mavin.h       **** 	static u08  l_mel_low  = 2;
 748:mavin.h       **** 	//u08 MelImpect = 0;
 749:mavin.h       **** 
 750:mavin.h       **** 	//MelImpect = MelImpect>>4;
 751:mavin.h       **** 	
 752:mavin.h       **** 	if(MelImpect&0xf0){
 753:mavin.h       **** 		u08 shi_impect;
 754:mavin.h       **** 		shi_impect = MelImpect>>4;
 755:mavin.h       **** 		l_mel_high = 115 + (shi_impect);
 756:mavin.h       **** 		l_mel_low  = 115 - (shi_impect);
 757:mavin.h       **** 	} else {
 758:mavin.h       **** 		l_mel_high = M_DAC_H;
 759:mavin.h       **** 		l_mel_low  = M_DAC_L;
 760:mavin.h       **** 	}
 761:mavin.h       **** 	
 762:mavin.h       **** 	l_mel_high += (MelVolCtrl );
 763:mavin.h       **** 	l_mel_low  -= (MelVolCtrl );
 764:mavin.h       **** 
 765:mavin.h       **** 	if(MelodyRegister&MelodyOnOffFLAG){
 766:mavin.h       **** 	
 767:mavin.h       **** 	 	if(( -- Kong_ovf_count)==0)	KongCount -= 1;  
 768:mavin.h       **** 		
 769:mavin.h       **** 		if(MelodyRegister & EEPPLAYFLAG){
 770:mavin.h       **** 			
 771:mavin.h       **** 			if(MelodyRegister & InvertFLAG){ 
 772:mavin.h       **** 		
 773:mavin.h       **** 				if(!(MelodyRegister & BREAKTIME)){	
 774:mavin.h       **** 		      		if(MelodyRegister& SpFLAG){		// 스피커 포트 인버트		      			
 775:mavin.h       **** 						DAC_OUTDATA(m_nPos_Speaker,l_mel_low);
 776:mavin.h       **** 						MelodyRegister &= ~SpFLAG;
 777:mavin.h       **** 					} else {						
 778:mavin.h       **** 						DAC_OUTDATA(m_nPos_Speaker,l_mel_high);						
 779:mavin.h       **** 						MelodyRegister |=SpFLAG;
 780:mavin.h       **** 					}
 781:mavin.h       **** 				}
 782:mavin.h       **** 				
 783:mavin.h       **** 				if(KongCount==0){ 	//다음 멜로디 호출					
 784:mavin.h       **** 			     	MelodyRegister &= ~BREAKTIME;
 785:mavin.h       **** 			
 786:mavin.h       **** 					if(!(EepMelAddr>60)){
 787:mavin.h       **** 						pM_++;		pK_++;
 788:mavin.h       **** 						OvfCount 	= pgm_read_byte(&Melody_Tof_count[*pM_]);
 789:mavin.h       **** 						SubTimeValue= pgm_read_byte(&Melody_Sub_Time[ *pM_]);	
 790:mavin.h       **** 						MelImpect = *pK_;		
 791:mavin.h       **** 						KongCount 	= pgm_read_byte(&Melody_Kongnamul[0x0f&(*pK_)]);	
 792:mavin.h       **** 					} else {
 793:mavin.h       **** 						MelodyRegister &= ~EEPPLAYFLAG;
 794:mavin.h       **** 					}
 795:mavin.h       **** 		            
 796:mavin.h       **** 		            
 797:mavin.h       **** 		  		    if(OvfCount== ENDCODE){
 798:mavin.h       **** 		  		       
 799:mavin.h       **** 		  		    	MelodyRegister &= ~EEPPLAYFLAG;
 800:mavin.h       **** 		  				ENDMELODY();
 801:mavin.h       **** 						
 802:mavin.h       **** 	  				
 803:mavin.h       **** 						DAC_OUTDATA(m_nPos_Speaker,M_DAC_M);
 804:mavin.h       **** 	
 805:mavin.h       ****     	                m_bMelodyEnd = 1;   //멜로디 끝났다.   
 806:mavin.h       **** 	  				
 807:mavin.h       **** 		 			}else if(OvfCount== REPLAYCODE){
 808:mavin.h       **** 						//EepMelGnrate();
 809:mavin.h       **** 						
 810:mavin.h       **** 					} else if(OvfCount== REPLAYNUMBERCODE){
 811:mavin.h       **** 						
 812:mavin.h       **** 						static u08 replycnt=0;
 813:mavin.h       **** 		
 814:mavin.h       **** 						if(MelodyRegister&EEPREPLAYNUMBERFLAG){
 815:mavin.h       **** 							replycnt = *pK_;
 816:mavin.h       **** 							replycnt &= 0x0f;
 817:mavin.h       **** 							MelodyRegister&= ~EEPREPLAYNUMBERFLAG;					
 818:mavin.h       **** 						}
 819:mavin.h       **** 						if(!(replycnt == 0)){
 820:mavin.h       **** 							replycnt--;
 821:mavin.h       **** 							//EepMelGnrate();
 822:mavin.h       **** 		
 823:mavin.h       **** 						} else {
 824:mavin.h       **** 							ENDMELODY();
 825:mavin.h       **** 							
 826:mavin.h       **** 	
 827:mavin.h       **** 							DAC_OUTDATA(m_nPos_Speaker,M_DAC_M);
 828:mavin.h       **** 							
 829:mavin.h       **** 						}
 830:mavin.h       **** 		  			} else if(OvfCount == 0xc0)	MelodyRegister |= BREAKTIME;
 831:mavin.h       **** 				} else {			// 이전 음(주파수) 생성
 832:mavin.h       **** 					OvfCount 	= pgm_read_byte(&Melody_Tof_count[*pM_]);
 833:mavin.h       **** 				}				
 834:mavin.h       **** 				MelodyRegister &= ~ InvertFLAG;	
 835:mavin.h       **** 			}			
 836:mavin.h       **** 			
 837:mavin.h       **** 		}
 838:mavin.h       **** 		else {		
 839:mavin.h       **** 			if(MelodyRegister & InvertFLAG){ 		
 840:mavin.h       **** 				if(!(MelodyRegister & BREAKTIME)){	
 841:mavin.h       **** 		      		if(MelodyRegister& SpFLAG){		// 스피커 포트 인버트
 842:mavin.h       **** 						DAC_OUTDATA(m_nPos_Speaker,l_mel_low);
 843:mavin.h       **** 						MelodyRegister &= ~SpFLAG;
 844:mavin.h       **** 					} else {
 845:mavin.h       **** 						DAC_OUTDATA(m_nPos_Speaker,l_mel_high);
 846:mavin.h       **** 						MelodyRegister |=SpFLAG;
 847:mavin.h       **** 					}
 848:mavin.h       **** 				}
 849:mavin.h       **** 				if(KongCount==0){ 	//다음 멜로디 호출
 850:mavin.h       **** 			     	pM_++;	pK_++;	MelodyRegister &= ~BREAKTIME;
 851:mavin.h       **** 		
 852:mavin.h       **** 					OvfCount 	= pgm_read_byte(&Melody_Tof_count[pgm_read_byte(pM_)]);
 853:mavin.h       **** 					SubTimeValue= pgm_read_byte(&Melody_Sub_Time[pgm_read_byte(pM_)]);
 854:mavin.h       **** 					MelImpect = pgm_read_byte(pK_);
 855:mavin.h       **** 					KongCount 	= pgm_read_byte(&Melody_Kongnamul[(0x0f &(pgm_read_byte(pK_)))]);
 856:mavin.h       **** 		
 857:mavin.h       **** 		  		    if(OvfCount== ENDCODE){
 858:mavin.h       **** 		  		    	MelodyRegister &= ~EEPPLAYFLAG;
 859:mavin.h       **** 		  				ENDMELODY();
 860:mavin.h       **** 						
 861:mavin.h       **** 						DAC_OUTDATA(m_nPos_Speaker,M_DAC_M);						
 862:mavin.h       **** 		 			} else if(OvfCount== REPLAYCODE){
 863:mavin.h       **** 						pM_ = pM_refrash;	pK_ = pK_refrash;
 864:mavin.h       **** 						OvfCount 	= pgm_read_byte(&Melody_Tof_count[pgm_read_byte(pM_)]);
 865:mavin.h       **** 						SubTimeValue= pgm_read_byte(&Melody_Sub_Time[pgm_read_byte(pM_)]);
 866:mavin.h       **** 						MelImpect = pgm_read_byte(pK_);
 867:mavin.h       **** 						KongCount 	= pgm_read_byte(&Melody_Kongnamul[(0x0f&(pgm_read_byte(pK_)))]); 
 868:mavin.h       **** 		  			} else if(OvfCount == 0xc0)	MelodyRegister |= BREAKTIME;
 869:mavin.h       **** 		  			
 870:mavin.h       **** 				} else {			// 이전 음(주파수) 생성
 871:mavin.h       **** 					OvfCount 	= pgm_read_byte(&Melody_Tof_count[pgm_read_byte(pM_)]);
 872:mavin.h       **** 				}				
 873:mavin.h       **** 				MelodyRegister &= ~ InvertFLAG;	
 874:mavin.h       **** 			}	    		
 875:mavin.h       **** 		}  
 876:mavin.h       **** 		
 877:mavin.h       **** 		    
 878:mavin.h       **** 		if((--OvfCount)==1){ 				//overflow 횟수가 맞으면 시간 조정
 879:mavin.h       **** 			MelodyRegister |= InvertFLAG;
 880:mavin.h       **** 			outp(SubTimeValue,TCNT0);
 881:mavin.h       **** 		}    
 882:mavin.h       **** 		
 883:mavin.h       **** 	}	
 884:mavin.h       **** }
 885:mavin.h       **** 
 886:mavin.h       **** 
 887:mavin.h       **** 
 888:mavin.h       **** void DacDigToAlog(u08 pos, u08 DacDigData, u08 DacOpcode)
 889:mavin.h       **** {
 409               	.LM37:
 410               	.LFBB5:
 411               	/* prologue: function */
 412               	/* frame size = 0 */
 413               	/* stack size = 0 */
 414               	.L__stack_usage = 0
 890:mavin.h       **** 	u08 DigTemp;
 891:mavin.h       **** 	
 892:mavin.h       **** 	DigTemp = (u08)(DacOpcode | (DacDigData >>4));
 416               	.LM38:
 417 0136 962F      		mov r25,r22
 418 0138 9295      		swap r25
 419 013a 9F70      		andi r25,lo8(15)
 420 013c 492B      		or r20,r25
 893:mavin.h       **** 	
 894:mavin.h       **** 
 895:mavin.h       **** 	if(pos == 1){
 422               	.LM39:
 423 013e 8130      		cpi r24,lo8(1)
 424 0140 01F4      		brne .L19
 425               	.LBB7:
 896:mavin.h       **** 		u08 i, j;
 897:mavin.h       **** 		
 898:mavin.h       **** 		//port setup
 899:mavin.h       **** 		sbi(DDRB,1);
 427               	.LM40:
 428 0142 B99A      		sbi 55-32,1
 900:mavin.h       **** 		
 901:mavin.h       **** 		for(j = 0; j < 2; j++){
 902:mavin.h       **** 			for(i=0;i<8;i++){
 903:mavin.h       **** 				if((DigTemp<<i) & 0x80){
 904:mavin.h       **** 					sbi(PORTB,1);		//Data input
 905:mavin.h       **** 					NOP();
 906:mavin.h       **** 				}else{
 907:mavin.h       **** 					cbi(PORTB, 1);		//Data input
 908:mavin.h       **** 					NOP();
 909:mavin.h       **** 				}
 910:mavin.h       **** 			}
 911:mavin.h       **** 			DigTemp = (u08)(DacDigData << 4 );
 430               	.LM41:
 431 0144 6295      		swap r22
 432 0146 607F      		andi r22,lo8(-16)
 433 0148 72E0      		ldi r23,lo8(2)
 434 014a 00C0      		rjmp .L20
 435               	.L23:
 903:mavin.h       **** 				if((DigTemp<<i) & 0x80){
 437               	.LM42:
 438 014c 9A01      		movw r18,r20
 439 014e 082E      		mov r0,r24
 440 0150 00C0      		rjmp 2f
 441 0152 220F      	1:	lsl r18
 442 0154 331F      		rol r19
 443 0156 0A94      	2:	dec r0
 444 0158 02F4      		brpl 1b
 445 015a 27FF      		sbrs r18,7
 446 015c 00C0      		rjmp .L21
 904:mavin.h       **** 					sbi(PORTB,1);		//Data input
 448               	.LM43:
 449 015e C19A      		sbi 56-32,1
 450 0160 00C0      		rjmp .L49
 451               	.L21:
 907:mavin.h       **** 					cbi(PORTB, 1);		//Data input
 453               	.LM44:
 454 0162 C198      		cbi 56-32,1
 455               	.L49:
 908:mavin.h       **** 					NOP();
 457               	.LM45:
 458               	/* #APP */
 459               	 ;  908 "mavin.h" 1
 460 0164 0000      		nop
 461               	 ;  0 "" 2
 462               	/* #NOAPP */
 463 0166 0196      		adiw r24,1
 902:mavin.h       **** 			for(i=0;i<8;i++){
 465               	.LM46:
 466 0168 8830      		cpi r24,8
 467 016a 9105      		cpc r25,__zero_reg__
 468 016c 01F4      		brne .L23
 469 016e 7150      		subi r23,lo8(-(-1))
 901:mavin.h       **** 		for(j = 0; j < 2; j++){
 471               	.LM47:
 472 0170 01F4      		brne .+2
 473 0172 00C0      		rjmp .L18
 475               	.LM48:
 476 0174 462F      		mov r20,r22
 477               	.L20:
 478               	.LBE7:
 889:mavin.h       **** {
 480               	.LM49:
 481 0176 80E0      		ldi r24,lo8(0)
 482 0178 90E0      		ldi r25,hi8(0)
 483               	.LBB8:
 903:mavin.h       **** 				if((DigTemp<<i) & 0x80){
 485               	.LM50:
 486 017a 50E0      		ldi r21,lo8(0)
 487 017c 00C0      		rjmp .L23
 488               	.L19:
 489               	.LBE8:
 912:mavin.h       **** 		}	
 913:mavin.h       **** 	}else if(pos == 2){		//2번위치에 있을때
 491               	.LM51:
 492 017e 8230      		cpi r24,lo8(2)
 493 0180 01F4      		brne .L25
 494               	.LBB9:
 914:mavin.h       **** 		u08 i2, j2;
 915:mavin.h       **** 				
 916:mavin.h       **** 		//port setup
 917:mavin.h       **** 		sbi(DDRD,1);
 496               	.LM52:
 497 0182 899A      		sbi 49-32,1
 918:mavin.h       **** 		
 919:mavin.h       **** 		for(j2 = 0; j2 < 2; j2++){
 920:mavin.h       **** 			for(i2=0;i2<8;i2++){
 921:mavin.h       **** 				if((DigTemp<<i2) & 0x80){
 922:mavin.h       **** 					sbi(PORTD,1);		//Data input				
 923:mavin.h       **** 					NOP();
 924:mavin.h       **** 				}else{
 925:mavin.h       **** 					cbi(PORTD, 1);		//Data input
 926:mavin.h       **** 					NOP();
 927:mavin.h       **** 				}				
 928:mavin.h       **** 			}
 929:mavin.h       **** 			DigTemp = (u08)(DacDigData << 4 );
 499               	.LM53:
 500 0184 6295      		swap r22
 501 0186 607F      		andi r22,lo8(-16)
 502 0188 72E0      		ldi r23,lo8(2)
 503 018a 00C0      		rjmp .L26
 504               	.L29:
 921:mavin.h       **** 				if((DigTemp<<i2) & 0x80){
 506               	.LM54:
 507 018c 9A01      		movw r18,r20
 508 018e 082E      		mov r0,r24
 509 0190 00C0      		rjmp 2f
 510 0192 220F      	1:	lsl r18
 511 0194 331F      		rol r19
 512 0196 0A94      	2:	dec r0
 513 0198 02F4      		brpl 1b
 514 019a 27FF      		sbrs r18,7
 515 019c 00C0      		rjmp .L27
 922:mavin.h       **** 					sbi(PORTD,1);		//Data input				
 517               	.LM55:
 518 019e 919A      		sbi 50-32,1
 519 01a0 00C0      		rjmp .L50
 520               	.L27:
 925:mavin.h       **** 					cbi(PORTD, 1);		//Data input
 522               	.LM56:
 523 01a2 9198      		cbi 50-32,1
 524               	.L50:
 926:mavin.h       **** 					NOP();
 526               	.LM57:
 527               	/* #APP */
 528               	 ;  926 "mavin.h" 1
 529 01a4 0000      		nop
 530               	 ;  0 "" 2
 531               	/* #NOAPP */
 532 01a6 0196      		adiw r24,1
 920:mavin.h       **** 			for(i2=0;i2<8;i2++){
 534               	.LM58:
 535 01a8 8830      		cpi r24,8
 536 01aa 9105      		cpc r25,__zero_reg__
 537 01ac 01F4      		brne .L29
 538 01ae 7150      		subi r23,lo8(-(-1))
 919:mavin.h       **** 		for(j2 = 0; j2 < 2; j2++){
 540               	.LM59:
 541 01b0 01F4      		brne .+2
 542 01b2 00C0      		rjmp .L18
 544               	.LM60:
 545 01b4 462F      		mov r20,r22
 546               	.L26:
 547               	.LBE9:
 548               	.LBB10:
 911:mavin.h       **** 			DigTemp = (u08)(DacDigData << 4 );
 550               	.LM61:
 551 01b6 80E0      		ldi r24,lo8(0)
 552 01b8 90E0      		ldi r25,hi8(0)
 553               	.LBE10:
 554               	.LBB11:
 921:mavin.h       **** 				if((DigTemp<<i2) & 0x80){
 556               	.LM62:
 557 01ba 50E0      		ldi r21,lo8(0)
 558 01bc 00C0      		rjmp .L29
 559               	.L25:
 560               	.LBE11:
 930:mavin.h       **** 		}		
 931:mavin.h       **** 	}else if(pos == 3){		//3번위치에 있을때
 562               	.LM63:
 563 01be 8330      		cpi r24,lo8(3)
 564 01c0 01F4      		brne .L30
 565               	.LBB12:
 932:mavin.h       **** 		u08 i3, j3;
 933:mavin.h       **** 		
 934:mavin.h       **** 		//port setup
 935:mavin.h       **** 		sbi(DDRD,5);
 567               	.LM64:
 568 01c2 8D9A      		sbi 49-32,5
 936:mavin.h       **** 				
 937:mavin.h       **** 		for(j3 = 0; j3 < 2; j3++){
 938:mavin.h       **** 			for(i3=0;i3<8;i3++){
 939:mavin.h       **** 				if((DigTemp<<i3) & 0x80){
 940:mavin.h       **** 					sbi(PORTD,5);		//Data input				
 941:mavin.h       **** 					NOP();
 942:mavin.h       **** 				}else{
 943:mavin.h       **** 					cbi(PORTD, 5);		//Data input
 944:mavin.h       **** 					NOP();
 945:mavin.h       **** 				}				
 946:mavin.h       **** 			}
 947:mavin.h       **** 			DigTemp = (u08)(DacDigData << 4 );
 570               	.LM65:
 571 01c4 6295      		swap r22
 572 01c6 607F      		andi r22,lo8(-16)
 573 01c8 72E0      		ldi r23,lo8(2)
 574 01ca 00C0      		rjmp .L31
 575               	.L34:
 939:mavin.h       **** 				if((DigTemp<<i3) & 0x80){
 577               	.LM66:
 578 01cc 9A01      		movw r18,r20
 579 01ce 082E      		mov r0,r24
 580 01d0 00C0      		rjmp 2f
 581 01d2 220F      	1:	lsl r18
 582 01d4 331F      		rol r19
 583 01d6 0A94      	2:	dec r0
 584 01d8 02F4      		brpl 1b
 585 01da 27FF      		sbrs r18,7
 586 01dc 00C0      		rjmp .L32
 940:mavin.h       **** 					sbi(PORTD,5);		//Data input				
 588               	.LM67:
 589 01de 959A      		sbi 50-32,5
 590 01e0 00C0      		rjmp .L51
 591               	.L32:
 943:mavin.h       **** 					cbi(PORTD, 5);		//Data input
 593               	.LM68:
 594 01e2 9598      		cbi 50-32,5
 595               	.L51:
 944:mavin.h       **** 					NOP();
 597               	.LM69:
 598               	/* #APP */
 599               	 ;  944 "mavin.h" 1
 600 01e4 0000      		nop
 601               	 ;  0 "" 2
 602               	/* #NOAPP */
 603 01e6 0196      		adiw r24,1
 938:mavin.h       **** 			for(i3=0;i3<8;i3++){
 605               	.LM70:
 606 01e8 8830      		cpi r24,8
 607 01ea 9105      		cpc r25,__zero_reg__
 608 01ec 01F4      		brne .L34
 609 01ee 7150      		subi r23,lo8(-(-1))
 937:mavin.h       **** 		for(j3 = 0; j3 < 2; j3++){
 611               	.LM71:
 612 01f0 01F4      		brne .+2
 613 01f2 00C0      		rjmp .L18
 615               	.LM72:
 616 01f4 462F      		mov r20,r22
 617               	.L31:
 618               	.LBE12:
 619               	.LBB13:
 929:mavin.h       **** 			DigTemp = (u08)(DacDigData << 4 );
 621               	.LM73:
 622 01f6 80E0      		ldi r24,lo8(0)
 623 01f8 90E0      		ldi r25,hi8(0)
 624               	.LBE13:
 625               	.LBB14:
 939:mavin.h       **** 				if((DigTemp<<i3) & 0x80){
 627               	.LM74:
 628 01fa 50E0      		ldi r21,lo8(0)
 629 01fc 00C0      		rjmp .L34
 630               	.L30:
 631               	.LBE14:
 948:mavin.h       **** 		}		
 949:mavin.h       **** 	}	
 950:mavin.h       **** 	else if(pos == 4){		//2번위치에 있을때
 633               	.LM75:
 634 01fe 8430      		cpi r24,lo8(4)
 635 0200 01F4      		brne .L35
 636               	.LBB15:
 951:mavin.h       **** 		u08 i4, j4;
 952:mavin.h       **** 				
 953:mavin.h       **** 		//port setup
 954:mavin.h       **** 		sbi(DDRE,1);
 638               	.LM76:
 639 0202 119A      		sbi 34-32,1
 955:mavin.h       **** 		
 956:mavin.h       **** 		for(j4 = 0; j4 < 2; j4++){
 957:mavin.h       **** 			for(i4=0;i4<8;i4++){
 958:mavin.h       **** 				if((DigTemp<<i4) & 0x80){
 959:mavin.h       **** 					sbi(PORTE,1);		//Data input				
 960:mavin.h       **** 					NOP();
 961:mavin.h       **** 				}else{
 962:mavin.h       **** 					cbi(PORTE, 1);		//Data input
 963:mavin.h       **** 					NOP();
 964:mavin.h       **** 				}				
 965:mavin.h       **** 			}
 966:mavin.h       **** 			DigTemp = (u08)(DacDigData << 4 );
 641               	.LM77:
 642 0204 6295      		swap r22
 643 0206 607F      		andi r22,lo8(-16)
 644 0208 72E0      		ldi r23,lo8(2)
 645 020a 00C0      		rjmp .L36
 646               	.L39:
 958:mavin.h       **** 				if((DigTemp<<i4) & 0x80){
 648               	.LM78:
 649 020c 9A01      		movw r18,r20
 650 020e 082E      		mov r0,r24
 651 0210 00C0      		rjmp 2f
 652 0212 220F      	1:	lsl r18
 653 0214 331F      		rol r19
 654 0216 0A94      	2:	dec r0
 655 0218 02F4      		brpl 1b
 656 021a 27FF      		sbrs r18,7
 657 021c 00C0      		rjmp .L37
 959:mavin.h       **** 					sbi(PORTE,1);		//Data input				
 659               	.LM79:
 660 021e 199A      		sbi 35-32,1
 661 0220 00C0      		rjmp .L52
 662               	.L37:
 962:mavin.h       **** 					cbi(PORTE, 1);		//Data input
 664               	.LM80:
 665 0222 1998      		cbi 35-32,1
 666               	.L52:
 963:mavin.h       **** 					NOP();
 668               	.LM81:
 669               	/* #APP */
 670               	 ;  963 "mavin.h" 1
 671 0224 0000      		nop
 672               	 ;  0 "" 2
 673               	/* #NOAPP */
 674 0226 0196      		adiw r24,1
 957:mavin.h       **** 			for(i4=0;i4<8;i4++){
 676               	.LM82:
 677 0228 8830      		cpi r24,8
 678 022a 9105      		cpc r25,__zero_reg__
 679 022c 01F4      		brne .L39
 680 022e 7150      		subi r23,lo8(-(-1))
 956:mavin.h       **** 		for(j4 = 0; j4 < 2; j4++){
 682               	.LM83:
 683 0230 01F0      		breq .L18
 685               	.LM84:
 686 0232 462F      		mov r20,r22
 687               	.L36:
 688               	.LBE15:
 689               	.LBB16:
 947:mavin.h       **** 			DigTemp = (u08)(DacDigData << 4 );
 691               	.LM85:
 692 0234 80E0      		ldi r24,lo8(0)
 693 0236 90E0      		ldi r25,hi8(0)
 694               	.LBE16:
 695               	.LBB17:
 958:mavin.h       **** 				if((DigTemp<<i4) & 0x80){
 697               	.LM86:
 698 0238 50E0      		ldi r21,lo8(0)
 699 023a 00C0      		rjmp .L39
 700               	.L35:
 701               	.LBE17:
 967:mavin.h       **** 		}		
 968:mavin.h       **** 	}	
 969:mavin.h       **** 	else if(pos == 5){		//2번위치에 있을때
 703               	.LM87:
 704 023c 8530      		cpi r24,lo8(5)
 705 023e 01F4      		brne .L18
 706               	.LBB18:
 970:mavin.h       **** 		u08 i5, j5;
 971:mavin.h       **** 				
 972:mavin.h       **** 		//port setup
 973:mavin.h       **** 		sbi(DDRG,3);
 708               	.LM88:
 709 0240 8091 6400 		lds r24,100
 710 0244 8860      		ori r24,lo8(8)
 711 0246 8093 6400 		sts 100,r24
 974:mavin.h       **** 		
 975:mavin.h       **** 		for(j5 = 0; j5 < 2; j5++){
 976:mavin.h       **** 			for(i5=0;i5<8;i5++){
 977:mavin.h       **** 				if((DigTemp<<i5) & 0x80){
 978:mavin.h       **** 					sbi(PORTG,3);		//Data input				
 979:mavin.h       **** 					NOP();
 980:mavin.h       **** 				}else{
 981:mavin.h       **** 					cbi(PORTG, 3);		//Data input
 982:mavin.h       **** 					NOP();
 983:mavin.h       **** 				}				
 984:mavin.h       **** 			}
 985:mavin.h       **** 			DigTemp = (u08)(DacDigData << 4 );
 713               	.LM89:
 714 024a 6295      		swap r22
 715 024c 607F      		andi r22,lo8(-16)
 716 024e 72E0      		ldi r23,lo8(2)
 717 0250 00C0      		rjmp .L40
 718               	.L43:
 977:mavin.h       **** 				if((DigTemp<<i5) & 0x80){
 720               	.LM90:
 721 0252 9A01      		movw r18,r20
 722 0254 082E      		mov r0,r24
 723 0256 00C0      		rjmp 2f
 724 0258 220F      	1:	lsl r18
 725 025a 331F      		rol r19
 726 025c 0A94      	2:	dec r0
 727 025e 02F4      		brpl 1b
 728 0260 27FF      		sbrs r18,7
 729 0262 00C0      		rjmp .L41
 978:mavin.h       **** 					sbi(PORTG,3);		//Data input				
 731               	.LM91:
 732 0264 2091 6500 		lds r18,101
 733 0268 2860      		ori r18,lo8(8)
 734 026a 00C0      		rjmp .L53
 735               	.L41:
 981:mavin.h       **** 					cbi(PORTG, 3);		//Data input
 737               	.LM92:
 738 026c 2091 6500 		lds r18,101
 739 0270 277F      		andi r18,lo8(-9)
 740               	.L53:
 741 0272 2093 6500 		sts 101,r18
 982:mavin.h       **** 					NOP();
 743               	.LM93:
 744               	/* #APP */
 745               	 ;  982 "mavin.h" 1
 746 0276 0000      		nop
 747               	 ;  0 "" 2
 748               	/* #NOAPP */
 749 0278 0196      		adiw r24,1
 976:mavin.h       **** 			for(i5=0;i5<8;i5++){
 751               	.LM94:
 752 027a 8830      		cpi r24,8
 753 027c 9105      		cpc r25,__zero_reg__
 754 027e 01F4      		brne .L43
 755 0280 7150      		subi r23,lo8(-(-1))
 975:mavin.h       **** 		for(j5 = 0; j5 < 2; j5++){
 757               	.LM95:
 758 0282 01F0      		breq .L18
 760               	.LM96:
 761 0284 462F      		mov r20,r22
 762               	.L40:
 763               	.LBE18:
 764               	.LBB19:
 966:mavin.h       **** 			DigTemp = (u08)(DacDigData << 4 );
 766               	.LM97:
 767 0286 80E0      		ldi r24,lo8(0)
 768 0288 90E0      		ldi r25,hi8(0)
 769               	.LBE19:
 770               	.LBB20:
 977:mavin.h       **** 				if((DigTemp<<i5) & 0x80){
 772               	.LM98:
 773 028a 50E0      		ldi r21,lo8(0)
 774 028c 00C0      		rjmp .L43
 775               	.L18:
 776 028e 0895      		ret
 777               	.LBE20:
 779               	.Lscope5:
 781               		.stabd	78,0,0
 783               	.global	MelFunc
 785               	MelFunc:
 786               		.stabd	46,0,0
 744:mavin.h       **** void MelFunc(void){						
 788               	.LM99:
 789               	.LFBB6:
 790 0290 CF93      		push r28
 791 0292 DF93      		push r29
 792               	/* prologue: function */
 793               	/* frame size = 0 */
 794               	/* stack size = 2 */
 795               	.L__stack_usage = 2
 752:mavin.h       **** 	if(MelImpect&0xf0){
 797               	.LM100:
 798 0294 8091 0000 		lds r24,MelImpect
 799 0298 807F      		andi r24,lo8(-16)
 800 029a 01F0      		breq .L55
 801               	.LBB21:
 754:mavin.h       **** 		shi_impect = MelImpect>>4;
 803               	.LM101:
 804 029c 8091 0000 		lds r24,MelImpect
 805 02a0 8295      		swap r24
 806 02a2 8F70      		andi r24,lo8(15)
 755:mavin.h       **** 		l_mel_high = 115 + (shi_impect);
 808               	.LM102:
 809 02a4 982F      		mov r25,r24
 810 02a6 9D58      		subi r25,lo8(-(115))
 811 02a8 9093 0000 		sts l_mel_high.1752,r25
 756:mavin.h       **** 		l_mel_low  = 115 - (shi_impect);
 813               	.LM103:
 814 02ac 93E7      		ldi r25,lo8(115)
 815 02ae 981B      		sub r25,r24
 816 02b0 9093 0000 		sts l_mel_low.1753,r25
 817 02b4 00C0      		rjmp .L56
 818               	.L55:
 819               	.LBE21:
 758:mavin.h       **** 		l_mel_high = M_DAC_H;
 821               	.LM104:
 822 02b6 8DE7      		ldi r24,lo8(125)
 823 02b8 8093 0000 		sts l_mel_high.1752,r24
 759:mavin.h       **** 		l_mel_low  = M_DAC_L;
 825               	.LM105:
 826 02bc 89E6      		ldi r24,lo8(105)
 827 02be 8093 0000 		sts l_mel_low.1753,r24
 828               	.L56:
 762:mavin.h       **** 	l_mel_high += (MelVolCtrl );
 830               	.LM106:
 831 02c2 9091 0000 		lds r25,MelVolCtrl
 832 02c6 8091 0000 		lds r24,l_mel_high.1752
 833 02ca 980F      		add r25,r24
 834 02cc 9093 0000 		sts l_mel_high.1752,r25
 763:mavin.h       **** 	l_mel_low  -= (MelVolCtrl );
 836               	.LM107:
 837 02d0 8091 0000 		lds r24,MelVolCtrl
 838 02d4 6091 0000 		lds r22,l_mel_low.1753
 839 02d8 681B      		sub r22,r24
 840 02da 6093 0000 		sts l_mel_low.1753,r22
 765:mavin.h       **** 	if(MelodyRegister&MelodyOnOffFLAG){
 842               	.LM108:
 843 02de 8091 0000 		lds r24,MelodyRegister
 844 02e2 83FF      		sbrs r24,3
 845 02e4 00C0      		rjmp .L54
 767:mavin.h       **** 	 	if(( -- Kong_ovf_count)==0)	KongCount -= 1;  
 847               	.LM109:
 848 02e6 8091 0000 		lds r24,Kong_ovf_count
 849 02ea 8150      		subi r24,lo8(-(-1))
 850 02ec 8093 0000 		sts Kong_ovf_count,r24
 851 02f0 8823      		tst r24
 852 02f2 01F4      		brne .L58
 767:mavin.h       **** 	 	if(( -- Kong_ovf_count)==0)	KongCount -= 1;  
 854               	.LM110:
 855 02f4 8091 0000 		lds r24,KongCount
 856 02f8 8150      		subi r24,lo8(-(-1))
 857 02fa 8093 0000 		sts KongCount,r24
 858               	.L58:
 769:mavin.h       **** 		if(MelodyRegister & EEPPLAYFLAG){
 860               	.LM111:
 861 02fe 8091 0000 		lds r24,MelodyRegister
 862 0302 84FF      		sbrs r24,4
 863 0304 00C0      		rjmp .L59
 771:mavin.h       **** 			if(MelodyRegister & InvertFLAG){ 
 865               	.LM112:
 866 0306 8091 0000 		lds r24,MelodyRegister
 867 030a 80FF      		sbrs r24,0
 868 030c 00C0      		rjmp .L60
 773:mavin.h       **** 				if(!(MelodyRegister & BREAKTIME)){	
 870               	.LM113:
 871 030e 8091 0000 		lds r24,MelodyRegister
 872 0312 82FD      		sbrc r24,2
 873 0314 00C0      		rjmp .L61
 774:mavin.h       **** 		      		if(MelodyRegister& SpFLAG){		// 스피커 포트 인버트		      			
 875               	.LM114:
 876 0316 8091 0000 		lds r24,MelodyRegister
 877 031a 81FF      		sbrs r24,1
 878 031c 00C0      		rjmp .L62
 775:mavin.h       **** 						DAC_OUTDATA(m_nPos_Speaker,l_mel_low);
 880               	.LM115:
 881 031e 8091 0000 		lds r24,m_nPos_Speaker
 882 0322 40E0      		ldi r20,lo8(0)
 883 0324 0E94 0000 		call DacDigToAlog
 776:mavin.h       **** 						MelodyRegister &= ~SpFLAG;
 885               	.LM116:
 886 0328 8091 0000 		lds r24,MelodyRegister
 887 032c 8D7F      		andi r24,lo8(-3)
 888 032e 00C0      		rjmp .L77
 889               	.L62:
 778:mavin.h       **** 						DAC_OUTDATA(m_nPos_Speaker,l_mel_high);						
 891               	.LM117:
 892 0330 8091 0000 		lds r24,m_nPos_Speaker
 893 0334 692F      		mov r22,r25
 894 0336 40E0      		ldi r20,lo8(0)
 895 0338 0E94 0000 		call DacDigToAlog
 779:mavin.h       **** 						MelodyRegister |=SpFLAG;
 897               	.LM118:
 898 033c 8091 0000 		lds r24,MelodyRegister
 899 0340 8260      		ori r24,lo8(2)
 900               	.L77:
 901 0342 8093 0000 		sts MelodyRegister,r24
 902               	.L61:
 783:mavin.h       **** 				if(KongCount==0){ 	//다음 멜로디 호출					
 904               	.LM119:
 905 0346 8091 0000 		lds r24,KongCount
 906 034a 8823      		tst r24
 907 034c 01F0      		breq .+2
 908 034e 00C0      		rjmp .L63
 784:mavin.h       **** 			     	MelodyRegister &= ~BREAKTIME;
 910               	.LM120:
 911 0350 8091 0000 		lds r24,MelodyRegister
 912 0354 8B7F      		andi r24,lo8(-5)
 913 0356 8093 0000 		sts MelodyRegister,r24
 786:mavin.h       **** 					if(!(EepMelAddr>60)){
 915               	.LM121:
 916 035a 8091 0000 		lds r24,EepMelAddr
 917 035e 8D33      		cpi r24,lo8(61)
 918 0360 00F4      		brsh .L64
 787:mavin.h       **** 						pM_++;		pK_++;
 920               	.LM122:
 921 0362 C091 0000 		lds r28,pM_
 922 0366 D091 0000 		lds r29,pM_+1
 923 036a CE01      		movw r24,r28
 924 036c 0196      		adiw r24,1
 925 036e 9093 0000 		sts pM_+1,r25
 926 0372 8093 0000 		sts pM_,r24
 927 0376 A091 0000 		lds r26,pK_
 928 037a B091 0000 		lds r27,pK_+1
 929 037e CD01      		movw r24,r26
 930 0380 0196      		adiw r24,1
 931 0382 9093 0000 		sts pK_+1,r25
 932 0386 8093 0000 		sts pK_,r24
 933               	.LBB22:
 788:mavin.h       **** 						OvfCount 	= pgm_read_byte(&Melody_Tof_count[*pM_]);
 935               	.LM123:
 936 038a E981      		ldd r30,Y+1
 937 038c F0E0      		ldi r31,lo8(0)
 938 038e E050      		subi r30,lo8(-(Melody_Tof_count))
 939 0390 F040      		sbci r31,hi8(-(Melody_Tof_count))
 940               	/* #APP */
 941               	 ;  788 "mavin.h" 1
 942 0392 E491      		lpm r30, Z
 943               		
 944               	 ;  0 "" 2
 945               	/* #NOAPP */
 946               	.LBE22:
 947 0394 E093 0000 		sts OvfCount,r30
 948               	.LBB23:
 789:mavin.h       **** 						SubTimeValue= pgm_read_byte(&Melody_Sub_Time[ *pM_]);	
 950               	.LM124:
 951 0398 E981      		ldd r30,Y+1
 952 039a F0E0      		ldi r31,lo8(0)
 953 039c E050      		subi r30,lo8(-(Melody_Sub_Time))
 954 039e F040      		sbci r31,hi8(-(Melody_Sub_Time))
 955               	/* #APP */
 956               	 ;  789 "mavin.h" 1
 957 03a0 E491      		lpm r30, Z
 958               		
 959               	 ;  0 "" 2
 960               	/* #NOAPP */
 961               	.LBE23:
 962 03a2 E093 0000 		sts SubTimeValue,r30
 790:mavin.h       **** 						MelImpect = *pK_;		
 964               	.LM125:
 965 03a6 1196      		adiw r26,1
 966 03a8 8C91      		ld r24,X
 967 03aa 1197      		sbiw r26,1
 968 03ac 8093 0000 		sts MelImpect,r24
 969               	.LBB24:
 791:mavin.h       **** 						KongCount 	= pgm_read_byte(&Melody_Kongnamul[0x0f&(*pK_)]);	
 971               	.LM126:
 972 03b0 1196      		adiw r26,1
 973 03b2 EC91      		ld r30,X
 974 03b4 1197      		sbiw r26,1
 975 03b6 F0E0      		ldi r31,lo8(0)
 976 03b8 EF70      		andi r30,lo8(15)
 977 03ba F070      		andi r31,hi8(15)
 978 03bc E050      		subi r30,lo8(-(Melody_Kongnamul))
 979 03be F040      		sbci r31,hi8(-(Melody_Kongnamul))
 980               	/* #APP */
 981               	 ;  791 "mavin.h" 1
 982 03c0 E491      		lpm r30, Z
 983               		
 984               	 ;  0 "" 2
 985               	/* #NOAPP */
 986               	.LBE24:
 987 03c2 E093 0000 		sts KongCount,r30
 988 03c6 00C0      		rjmp .L65
 989               	.L64:
 793:mavin.h       **** 						MelodyRegister &= ~EEPPLAYFLAG;
 991               	.LM127:
 992 03c8 8091 0000 		lds r24,MelodyRegister
 993 03cc 8F7E      		andi r24,lo8(-17)
 994 03ce 8093 0000 		sts MelodyRegister,r24
 995               	.L65:
 797:mavin.h       **** 		  		    if(OvfCount== ENDCODE){
 997               	.LM128:
 998 03d2 8091 0000 		lds r24,OvfCount
 999 03d6 8038      		cpi r24,lo8(-128)
 1000 03d8 01F4      		brne .L66
 799:mavin.h       **** 		  		    	MelodyRegister &= ~EEPPLAYFLAG;
 1002               	.LM129:
 1003 03da 8091 0000 		lds r24,MelodyRegister
 1004 03de 8F7E      		andi r24,lo8(-17)
 1005 03e0 8093 0000 		sts MelodyRegister,r24
 800:mavin.h       **** 		  				ENDMELODY();
 1007               	.LM130:
 1008 03e4 8091 0000 		lds r24,MelodyRegister
 1009 03e8 877F      		andi r24,lo8(-9)
 1010 03ea 8093 0000 		sts MelodyRegister,r24
 803:mavin.h       **** 						DAC_OUTDATA(m_nPos_Speaker,M_DAC_M);
 1012               	.LM131:
 1013 03ee 8091 0000 		lds r24,m_nPos_Speaker
 1014 03f2 63E7      		ldi r22,lo8(115)
 1015 03f4 40E0      		ldi r20,lo8(0)
 1016 03f6 0E94 0000 		call DacDigToAlog
 805:mavin.h       ****     	                m_bMelodyEnd = 1;   //멜로디 끝났다.   
 1018               	.LM132:
 1019 03fa 81E0      		ldi r24,lo8(1)
 1020 03fc 8093 0000 		sts m_bMelodyEnd,r24
 1021 0400 00C0      		rjmp .L75
 1022               	.L66:
 807:mavin.h       **** 		 			}else if(OvfCount== REPLAYCODE){
 1024               	.LM133:
 1025 0402 8034      		cpi r24,lo8(64)
 1026 0404 01F4      		brne .+2
 1027 0406 00C0      		rjmp .L75
 810:mavin.h       **** 					} else if(OvfCount== REPLAYNUMBERCODE){
 1029               	.LM134:
 1030 0408 8032      		cpi r24,lo8(32)
 1031 040a 01F4      		brne .L68
 1032               	.LBB25:
 814:mavin.h       **** 						if(MelodyRegister&EEPREPLAYNUMBERFLAG){
 1034               	.LM135:
 1035 040c 8091 0000 		lds r24,MelodyRegister
 1036 0410 85FF      		sbrs r24,5
 1037 0412 00C0      		rjmp .L69
 815:mavin.h       **** 							replycnt = *pK_;
 1039               	.LM136:
 1040 0414 E091 0000 		lds r30,pK_
 1041 0418 F091 0000 		lds r31,pK_+1
 816:mavin.h       **** 							replycnt &= 0x0f;
 1043               	.LM137:
 1044 041c 8081      		ld r24,Z
 1045 041e 8F70      		andi r24,lo8(15)
 1046 0420 8093 0000 		sts replycnt.1764,r24
 817:mavin.h       **** 							MelodyRegister&= ~EEPREPLAYNUMBERFLAG;					
 1048               	.LM138:
 1049 0424 8091 0000 		lds r24,MelodyRegister
 1050 0428 8F7D      		andi r24,lo8(-33)
 1051 042a 8093 0000 		sts MelodyRegister,r24
 1052               	.L69:
 819:mavin.h       **** 						if(!(replycnt == 0)){
 1054               	.LM139:
 1055 042e 8091 0000 		lds r24,replycnt.1764
 1056 0432 8823      		tst r24
 1057 0434 01F4      		brne .+2
 1058 0436 00C0      		rjmp .L81
 820:mavin.h       **** 							replycnt--;
 1060               	.LM140:
 1061 0438 8150      		subi r24,lo8(-(-1))
 1062 043a 8093 0000 		sts replycnt.1764,r24
 1063 043e 00C0      		rjmp .L75
 1064               	.L68:
 1065               	.LBE25:
 830:mavin.h       **** 		  			} else if(OvfCount == 0xc0)	MelodyRegister |= BREAKTIME;
 1067               	.LM141:
 1068 0440 803C      		cpi r24,lo8(-64)
 1069 0442 01F0      		breq .+2
 1070 0444 00C0      		rjmp .L75
 1071 0446 00C0      		rjmp .L80
 1072               	.L63:
 1073               	.LBB26:
 832:mavin.h       **** 					OvfCount 	= pgm_read_byte(&Melody_Tof_count[*pM_]);
 1075               	.LM142:
 1076 0448 E091 0000 		lds r30,pM_
 1077 044c F091 0000 		lds r31,pM_+1
 1078 0450 E081      		ld r30,Z
 1079 0452 00C0      		rjmp .L79
 1080               	.L59:
 1081               	.LBE26:
 839:mavin.h       **** 			if(MelodyRegister & InvertFLAG){ 		
 1083               	.LM143:
 1084 0454 8091 0000 		lds r24,MelodyRegister
 1085 0458 80FF      		sbrs r24,0
 1086 045a 00C0      		rjmp .L60
 840:mavin.h       **** 				if(!(MelodyRegister & BREAKTIME)){	
 1088               	.LM144:
 1089 045c 8091 0000 		lds r24,MelodyRegister
 1090 0460 82FD      		sbrc r24,2
 1091 0462 00C0      		rjmp .L71
 841:mavin.h       **** 		      		if(MelodyRegister& SpFLAG){		// 스피커 포트 인버트
 1093               	.LM145:
 1094 0464 8091 0000 		lds r24,MelodyRegister
 1095 0468 81FF      		sbrs r24,1
 1096 046a 00C0      		rjmp .L72
 842:mavin.h       **** 						DAC_OUTDATA(m_nPos_Speaker,l_mel_low);
 1098               	.LM146:
 1099 046c 8091 0000 		lds r24,m_nPos_Speaker
 1100 0470 40E0      		ldi r20,lo8(0)
 1101 0472 0E94 0000 		call DacDigToAlog
 843:mavin.h       **** 						MelodyRegister &= ~SpFLAG;
 1103               	.LM147:
 1104 0476 8091 0000 		lds r24,MelodyRegister
 1105 047a 8D7F      		andi r24,lo8(-3)
 1106 047c 00C0      		rjmp .L78
 1107               	.L72:
 845:mavin.h       **** 						DAC_OUTDATA(m_nPos_Speaker,l_mel_high);
 1109               	.LM148:
 1110 047e 8091 0000 		lds r24,m_nPos_Speaker
 1111 0482 692F      		mov r22,r25
 1112 0484 40E0      		ldi r20,lo8(0)
 1113 0486 0E94 0000 		call DacDigToAlog
 846:mavin.h       **** 						MelodyRegister |=SpFLAG;
 1115               	.LM149:
 1116 048a 8091 0000 		lds r24,MelodyRegister
 1117 048e 8260      		ori r24,lo8(2)
 1118               	.L78:
 1119 0490 8093 0000 		sts MelodyRegister,r24
 1120               	.L71:
 849:mavin.h       **** 				if(KongCount==0){ 	//다음 멜로디 호출
 1122               	.LM150:
 1123 0494 8091 0000 		lds r24,KongCount
 1124 0498 E091 0000 		lds r30,pM_
 1125 049c F091 0000 		lds r31,pM_+1
 1126 04a0 8823      		tst r24
 1127 04a2 01F0      		breq .+2
 1128 04a4 00C0      		rjmp .L73
 850:mavin.h       **** 			     	pM_++;	pK_++;	MelodyRegister &= ~BREAKTIME;
 1130               	.LM151:
 1131 04a6 3196      		adiw r30,1
 1132 04a8 F093 0000 		sts pM_+1,r31
 1133 04ac E093 0000 		sts pM_,r30
 1134 04b0 8091 0000 		lds r24,pK_
 1135 04b4 9091 0000 		lds r25,pK_+1
 1136 04b8 0196      		adiw r24,1
 1137 04ba 9093 0000 		sts pK_+1,r25
 1138 04be 8093 0000 		sts pK_,r24
 1139 04c2 2091 0000 		lds r18,MelodyRegister
 1140 04c6 2B7F      		andi r18,lo8(-5)
 1141 04c8 2093 0000 		sts MelodyRegister,r18
 1142               	.LBB27:
 1143               	.LBB28:
 852:mavin.h       **** 					OvfCount 	= pgm_read_byte(&Melody_Tof_count[pgm_read_byte(pM_)]);
 1145               	.LM152:
 1146               	/* #APP */
 1147               	 ;  852 "mavin.h" 1
 1148 04cc E491      		lpm r30, Z
 1149               		
 1150               	 ;  0 "" 2
 1151               	/* #NOAPP */
 1152               	.LBE28:
 1153 04ce 2E2F      		mov r18,r30
 1154 04d0 30E0      		ldi r19,lo8(0)
 1155 04d2 F901      		movw r30,r18
 1156 04d4 E050      		subi r30,lo8(-(Melody_Tof_count))
 1157 04d6 F040      		sbci r31,hi8(-(Melody_Tof_count))
 1158               	/* #APP */
 1159               	 ;  852 "mavin.h" 1
 1160 04d8 4491      		lpm r20, Z
 1161               		
 1162               	 ;  0 "" 2
 1163               	/* #NOAPP */
 1164               	.LBE27:
 1165 04da 4093 0000 		sts OvfCount,r20
 1166               	.LBB29:
 853:mavin.h       **** 					SubTimeValue= pgm_read_byte(&Melody_Sub_Time[pgm_read_byte(pM_)]);
 1168               	.LM153:
 1169 04de 2050      		subi r18,lo8(-(Melody_Sub_Time))
 1170 04e0 3040      		sbci r19,hi8(-(Melody_Sub_Time))
 1171 04e2 F901      		movw r30,r18
 1172               	/* #APP */
 1173               	 ;  853 "mavin.h" 1
 1174 04e4 2491      		lpm r18, Z
 1175               		
 1176               	 ;  0 "" 2
 1177               	/* #NOAPP */
 1178               	.LBE29:
 1179 04e6 2093 0000 		sts SubTimeValue,r18
 1180               	.LBB30:
 854:mavin.h       **** 					MelImpect = pgm_read_byte(pK_);
 1182               	.LM154:
 1183 04ea FC01      		movw r30,r24
 1184               	/* #APP */
 1185               	 ;  854 "mavin.h" 1
 1186 04ec 8491      		lpm r24, Z
 1187               		
 1188               	 ;  0 "" 2
 1189               	/* #NOAPP */
 1190               	.LBE30:
 1191 04ee 8093 0000 		sts MelImpect,r24
 1192               	.LBB31:
 855:mavin.h       **** 					KongCount 	= pgm_read_byte(&Melody_Kongnamul[(0x0f &(pgm_read_byte(pK_)))]);
 1194               	.LM155:
 1195 04f2 E82F      		mov r30,r24
 1196 04f4 F0E0      		ldi r31,lo8(0)
 1197 04f6 EF70      		andi r30,lo8(15)
 1198 04f8 F070      		andi r31,hi8(15)
 1199 04fa E050      		subi r30,lo8(-(Melody_Kongnamul))
 1200 04fc F040      		sbci r31,hi8(-(Melody_Kongnamul))
 1201               	/* #APP */
 1202               	 ;  855 "mavin.h" 1
 1203 04fe E491      		lpm r30, Z
 1204               		
 1205               	 ;  0 "" 2
 1206               	/* #NOAPP */
 1207               	.LBE31:
 1208 0500 E093 0000 		sts KongCount,r30
 857:mavin.h       **** 		  		    if(OvfCount== ENDCODE){
 1210               	.LM156:
 1211 0504 4038      		cpi r20,lo8(-128)
 1212 0506 01F4      		brne .L74
 858:mavin.h       **** 		  		    	MelodyRegister &= ~EEPPLAYFLAG;
 1214               	.LM157:
 1215 0508 8091 0000 		lds r24,MelodyRegister
 1216 050c 8F7E      		andi r24,lo8(-17)
 1217 050e 8093 0000 		sts MelodyRegister,r24
 1218               	.L81:
 859:mavin.h       **** 		  				ENDMELODY();
 1220               	.LM158:
 1221 0512 8091 0000 		lds r24,MelodyRegister
 1222 0516 877F      		andi r24,lo8(-9)
 1223 0518 8093 0000 		sts MelodyRegister,r24
 861:mavin.h       **** 						DAC_OUTDATA(m_nPos_Speaker,M_DAC_M);						
 1225               	.LM159:
 1226 051c 8091 0000 		lds r24,m_nPos_Speaker
 1227 0520 63E7      		ldi r22,lo8(115)
 1228 0522 40E0      		ldi r20,lo8(0)
 1229 0524 0E94 0000 		call DacDigToAlog
 1230 0528 00C0      		rjmp .L75
 1231               	.L74:
 862:mavin.h       **** 		 			} else if(OvfCount== REPLAYCODE){
 1233               	.LM160:
 1234 052a 4034      		cpi r20,lo8(64)
 1235 052c 01F4      		brne .L76
 863:mavin.h       **** 						pM_ = pM_refrash;	pK_ = pK_refrash;
 1237               	.LM161:
 1238 052e 9091 0000 		lds r25,pM_refrash
 1239 0532 8091 0000 		lds r24,pM_refrash+1
 1240 0536 9093 0000 		sts pM_,r25
 1241 053a 8093 0000 		sts pM_+1,r24
 1242 053e 3091 0000 		lds r19,pK_refrash
 1243 0542 2091 0000 		lds r18,pK_refrash+1
 1244 0546 3093 0000 		sts pK_,r19
 1245 054a 2093 0000 		sts pK_+1,r18
 1246               	.LBB32:
 1247               	.LBB33:
 864:mavin.h       **** 						OvfCount 	= pgm_read_byte(&Melody_Tof_count[pgm_read_byte(pM_)]);
 1249               	.LM162:
 1250 054e E92F      		mov r30,r25
 1251 0550 F82F      		mov r31,r24
 1252               	/* #APP */
 1253               	 ;  864 "mavin.h" 1
 1254 0552 8491      		lpm r24, Z
 1255               		
 1256               	 ;  0 "" 2
 1257               	/* #NOAPP */
 1258               	.LBE33:
 1259 0554 90E0      		ldi r25,lo8(0)
 1260 0556 FC01      		movw r30,r24
 1261 0558 E050      		subi r30,lo8(-(Melody_Tof_count))
 1262 055a F040      		sbci r31,hi8(-(Melody_Tof_count))
 1263               	/* #APP */
 1264               	 ;  864 "mavin.h" 1
 1265 055c E491      		lpm r30, Z
 1266               		
 1267               	 ;  0 "" 2
 1268               	/* #NOAPP */
 1269               	.LBE32:
 1270 055e E093 0000 		sts OvfCount,r30
 1271               	.LBB34:
 865:mavin.h       **** 						SubTimeValue= pgm_read_byte(&Melody_Sub_Time[pgm_read_byte(pM_)]);
 1273               	.LM163:
 1274 0562 8050      		subi r24,lo8(-(Melody_Sub_Time))
 1275 0564 9040      		sbci r25,hi8(-(Melody_Sub_Time))
 1276 0566 FC01      		movw r30,r24
 1277               	/* #APP */
 1278               	 ;  865 "mavin.h" 1
 1279 0568 8491      		lpm r24, Z
 1280               		
 1281               	 ;  0 "" 2
 1282               	/* #NOAPP */
 1283               	.LBE34:
 1284 056a 8093 0000 		sts SubTimeValue,r24
 1285               	.LBB35:
 866:mavin.h       **** 						MelImpect = pgm_read_byte(pK_);
 1287               	.LM164:
 1288 056e E32F      		mov r30,r19
 1289 0570 F22F      		mov r31,r18
 1290               	/* #APP */
 1291               	 ;  866 "mavin.h" 1
 1292 0572 E491      		lpm r30, Z
 1293               		
 1294               	 ;  0 "" 2
 1295               	/* #NOAPP */
 1296               	.LBE35:
 1297 0574 E093 0000 		sts MelImpect,r30
 1298               	.LBB36:
 867:mavin.h       **** 						KongCount 	= pgm_read_byte(&Melody_Kongnamul[(0x0f&(pgm_read_byte(pK_)))]); 
 1300               	.LM165:
 1301 0578 F0E0      		ldi r31,lo8(0)
 1302 057a EF70      		andi r30,lo8(15)
 1303 057c F070      		andi r31,hi8(15)
 1304 057e E050      		subi r30,lo8(-(Melody_Kongnamul))
 1305 0580 F040      		sbci r31,hi8(-(Melody_Kongnamul))
 1306               	/* #APP */
 1307               	 ;  867 "mavin.h" 1
 1308 0582 E491      		lpm r30, Z
 1309               		
 1310               	 ;  0 "" 2
 1311               	/* #NOAPP */
 1312               	.LBE36:
 1313 0584 E093 0000 		sts KongCount,r30
 1314 0588 00C0      		rjmp .L75
 1315               	.L76:
 868:mavin.h       **** 		  			} else if(OvfCount == 0xc0)	MelodyRegister |= BREAKTIME;
 1317               	.LM166:
 1318 058a 403C      		cpi r20,lo8(-64)
 1319 058c 01F4      		brne .L75
 1320               	.L80:
 868:mavin.h       **** 		  			} else if(OvfCount == 0xc0)	MelodyRegister |= BREAKTIME;
 1322               	.LM167:
 1323 058e 8091 0000 		lds r24,MelodyRegister
 1324 0592 8460      		ori r24,lo8(4)
 1325 0594 8093 0000 		sts MelodyRegister,r24
 1326 0598 00C0      		rjmp .L75
 1327               	.L73:
 1328               	.LBB37:
 1329               	.LBB38:
 871:mavin.h       **** 					OvfCount 	= pgm_read_byte(&Melody_Tof_count[pgm_read_byte(pM_)]);
 1331               	.LM168:
 1332               	/* #APP */
 1333               	 ;  871 "mavin.h" 1
 1334 059a E491      		lpm r30, Z
 1335               		
 1336               	 ;  0 "" 2
 1337               	/* #NOAPP */
 1338               	.L79:
 1339               	.LBE38:
 1340 059c F0E0      		ldi r31,lo8(0)
 1341 059e E050      		subi r30,lo8(-(Melody_Tof_count))
 1342 05a0 F040      		sbci r31,hi8(-(Melody_Tof_count))
 1343               	/* #APP */
 1344               	 ;  871 "mavin.h" 1
 1345 05a2 E491      		lpm r30, Z
 1346               		
 1347               	 ;  0 "" 2
 1348               	/* #NOAPP */
 1349               	.LBE37:
 1350 05a4 E093 0000 		sts OvfCount,r30
 1351               	.L75:
 873:mavin.h       **** 				MelodyRegister &= ~ InvertFLAG;	
 1353               	.LM169:
 1354 05a8 8091 0000 		lds r24,MelodyRegister
 1355 05ac 8E7F      		andi r24,lo8(-2)
 1356 05ae 8093 0000 		sts MelodyRegister,r24
 1357               	.L60:
 878:mavin.h       **** 		if((--OvfCount)==1){ 				//overflow 횟수가 맞으면 시간 조정
 1359               	.LM170:
 1360 05b2 8091 0000 		lds r24,OvfCount
 1361 05b6 8150      		subi r24,lo8(-(-1))
 1362 05b8 8093 0000 		sts OvfCount,r24
 1363 05bc 8130      		cpi r24,lo8(1)
 1364 05be 01F4      		brne .L54
 879:mavin.h       **** 			MelodyRegister |= InvertFLAG;
 1366               	.LM171:
 1367 05c0 8091 0000 		lds r24,MelodyRegister
 1368 05c4 8160      		ori r24,lo8(1)
 1369 05c6 8093 0000 		sts MelodyRegister,r24
 880:mavin.h       **** 			outp(SubTimeValue,TCNT0);
 1371               	.LM172:
 1372 05ca 8091 0000 		lds r24,SubTimeValue
 1373 05ce 82BF      		out 82-32,r24
 1374               	.L54:
 1375               	/* epilogue start */
 884:mavin.h       **** }
 1377               	.LM173:
 1378 05d0 DF91      		pop r29
 1379 05d2 CF91      		pop r28
 1380 05d4 0895      		ret
 1392               	.Lscope6:
 1394               		.stabd	78,0,0
 1396               	.global	GetRemocon
 1398               	GetRemocon:
 1399               		.stabd	46,0,0
 986:mavin.h       **** 		}		
 987:mavin.h       **** 	}	
 988:mavin.h       **** 
 989:mavin.h       **** }
 990:mavin.h       **** 
 991:mavin.h       **** 
 992:mavin.h       **** //////////////////////////////////////////////////////
 993:mavin.h       **** //리모콘 함수들
 994:mavin.h       **** 
 995:mavin.h       **** u08 GetRemocon()
 996:mavin.h       **** {
 1401               	.LM174:
 1402               	.LFBB7:
 1403 05d6 1F93      		push r17
 1404 05d8 DF93      		push r29
 1405 05da CF93      		push r28
 1406 05dc 00D0      		rcall .
 1407 05de 00D0      		rcall .
 1408 05e0 00D0      		rcall .
 1409 05e2 CDB7      		in r28,__SP_L__
 1410 05e4 DEB7      		in r29,__SP_H__
 1411               	/* prologue: function */
 1412               	/* frame size = 6 */
 1413               	/* stack size = 9 */
 1414               	.L__stack_usage = 9
 997:mavin.h       **** 	
 998:mavin.h       **** 	u08 temp[6],i,ird1,ird2,ir_1;
 999:mavin.h       **** 	u08* pData;
1000:mavin.h       ****     
1001:mavin.h       **** 	ir_1 = ir_data[0];
 1416               	.LM175:
 1417 05e6 1091 0000 		lds r17,ir_data
1002:mavin.h       **** 	temp[0] = ~ir_data[1];	
 1419               	.LM176:
 1420 05ea 8091 0000 		lds r24,ir_data+1
 1421 05ee 8095      		com r24
 1422 05f0 8983      		std Y+1,r24
1003:mavin.h       **** 	ird1 = ir_data[2];	//데이타값 리턴		
 1424               	.LM177:
 1425 05f2 8091 0000 		lds r24,ir_data+2
1004:mavin.h       **** 	ird2 = ir_data[3];	
 1427               	.LM178:
 1428 05f6 9091 0000 		lds r25,ir_data+3
 1429 05fa FE01      		movw r30,r28
 1430 05fc 3296      		adiw r30,2
 1431 05fe 27E0      		ldi r18,lo8(7)
 1432 0600 30E0      		ldi r19,hi8(7)
 995:mavin.h       **** u08 GetRemocon()
 1434               	.LM179:
 1435 0602 A8E0      		ldi r26,lo8(8)
 1436 0604 B0E0      		ldi r27,hi8(8)
 1437               	.L83:
1005:mavin.h       **** 	
1006:mavin.h       **** 	for(i=1;i<6; i++)
1007:mavin.h       **** 	{			
1008:mavin.h       **** 		temp[i]  = temp[0]>>i;		
 1439               	.LM180:
 1440 0606 4981      		ldd r20,Y+1
 1441 0608 50E0      		ldi r21,lo8(0)
 995:mavin.h       **** u08 GetRemocon()
 1443               	.LM181:
 1444 060a BD01      		movw r22,r26
 1445 060c 621B      		sub r22,r18
 1446 060e 730B      		sbc r23,r19
 1448               	.LM182:
 1449 0610 00C0      		rjmp 2f
 1450 0612 5595      	1:	asr r21
 1451 0614 4795      		ror r20
 1452 0616 6A95      	2:	dec r22
 1453 0618 02F4      		brpl 1b
 1454 061a 4083      		st Z,r20
1009:mavin.h       **** 		temp[i] |= temp[0]<<(8-i);	
 1456               	.LM183:
 1457 061c 6981      		ldd r22,Y+1
 1458 061e 70E0      		ldi r23,lo8(0)
 1459 0620 022E      		mov r0,r18
 1460 0622 00C0      		rjmp 2f
 1461 0624 660F      	1:	lsl r22
 1462 0626 771F      		rol r23
 1463 0628 0A94      	2:	dec r0
 1464 062a 02F4      		brpl 1b
 1465 062c 462B      		or r20,r22
 1466 062e 4193      		st Z+,r20
 1467 0630 2150      		subi r18,lo8(-(-1))
 1468 0632 3040      		sbci r19,hi8(-(-1))
1006:mavin.h       **** 	for(i=1;i<6; i++)
 1470               	.LM184:
 1471 0634 2230      		cpi r18,2
 1472 0636 3105      		cpc r19,__zero_reg__
 1473 0638 01F4      		brne .L83
1010:mavin.h       **** 	}
1011:mavin.h       ****    	if(ir_1 == temp[1])
 1475               	.LM185:
 1476 063a 2A81      		ldd r18,Y+2
 1477 063c 1217      		cp r17,r18
 1478 063e 01F4      		brne .L85
1012:mavin.h       **** 	{	            // 	C ^C<<1 D ^D
1013:mavin.h       **** 	
1014:mavin.h       **** 		temp[1] = ~ird2;			//
 1480               	.LM186:
 1481 0640 9095      		com r25
1015:mavin.h       **** 		if(ird1 == temp[1]){
 1483               	.LM187:
 1484 0642 8913      		cpse r24,r25
 1485               	.L85:
1016:mavin.h       ****        		pData = &ird1;
1017:mavin.h       **** 			return *pData;
1018:mavin.h       **** 		}
1019:mavin.h       **** 	} 	
1020:mavin.h       **** 	
1021:mavin.h       **** 	return 0;
 1487               	.LM188:
 1488 0644 80E0      		ldi r24,lo8(0)
 1489               	.L84:
 1490               	/* epilogue start */
1022:mavin.h       **** }
 1492               	.LM189:
 1493 0646 2696      		adiw r28,6
 1494 0648 0FB6      		in __tmp_reg__,__SREG__
 1495 064a F894      		cli
 1496 064c DEBF      		out __SP_H__,r29
 1497 064e 0FBE      		out __SREG__,__tmp_reg__
 1498 0650 CDBF      		out __SP_L__,r28
 1499 0652 CF91      		pop r28
 1500 0654 DF91      		pop r29
 1501 0656 1F91      		pop r17
 1502 0658 0895      		ret
 1509               	.Lscope7:
 1511               		.stabd	78,0,0
 1513               	.global	IrRecv
 1515               	IrRecv:
 1516               		.stabd	46,0,0
1023:mavin.h       **** 
1024:mavin.h       **** //---------------------------------------------------------
1025:mavin.h       **** void IrComm(void)
1026:mavin.h       **** {
1027:mavin.h       **** 	if(IRReg&IrTimeFLAG){//timer0 ovf(주기 64 *2) = 128usec 생성
1028:mavin.h       **** 		IrRecv();
1029:mavin.h       **** 		IRReg &= ~IrTimeFLAG; 	
1030:mavin.h       **** 	} else {
1031:mavin.h       **** 		//IrTransmit();
1032:mavin.h       **** 		IRReg |= IrTimeFLAG;
1033:mavin.h       **** 	}
1034:mavin.h       **** }
1035:mavin.h       **** 
1036:mavin.h       **** //---------------------------------------------------------
1037:mavin.h       **** void IrRecv(void)
1038:mavin.h       **** {
 1518               	.LM190:
 1519               	.LFBB8:
 1520               	/* prologue: function */
 1521               	/* frame size = 0 */
 1522               	/* stack size = 0 */
 1523               	.L__stack_usage = 0
1039:mavin.h       **** 
1040:mavin.h       **** 	static u08	c_count = 0, s_count = 0;
1041:mavin.h       **** 
1042:mavin.h       **** // DETECT SET	
1043:mavin.h       **** 	if((1<<IR_RX_PIN)&inp(IRRxPORT)){		
 1525               	.LM191:
 1526 065a 80B1      		in r24,32-32
 1527 065c 90E0      		ldi r25,lo8(0)
 1528 065e 0090 0000 		lds r0,IR_RX_PIN
 1529 0662 00C0      		rjmp 2f
 1530 0664 9595      	1:	asr r25
 1531 0666 8795      		ror r24
 1532 0668 0A94      	2:	dec r0
 1533 066a 02F4      		brpl 1b
 1534 066c 80FF      		sbrs r24,0
 1535 066e 00C0      		rjmp .L88
1044:mavin.h       **** 
1045:mavin.h       **** 			//이전 상태가 low 면	// set_FLAG   <===SET	// clear_FLAG <=== CLEAR
1046:mavin.h       **** 		if(IRReg & clear_d_FLAG){	IRReg |= set_d_FLAG;	IRReg &= ~clear_d_FLAG;	
 1537               	.LM192:
 1538 0670 8091 0000 		lds r24,IRReg
 1539 0674 85FF      		sbrs r24,5
 1540 0676 00C0      		rjmp .L89
 1542               	.LM193:
 1543 0678 8091 0000 		lds r24,IRReg
 1544 067c 8061      		ori r24,lo8(16)
 1545 067e 8093 0000 		sts IRReg,r24
 1546 0682 8091 0000 		lds r24,IRReg
 1547 0686 8F7D      		andi r24,lo8(-33)
 1548 0688 8093 0000 		sts IRReg,r24
1047:mavin.h       **** 
1048:mavin.h       **** 			if((2< c_count)&&(c_count <12 )){	T_count += 1;		//T
 1550               	.LM194:
 1551 068c 8091 0000 		lds r24,c_count.1879
 1552 0690 982F      		mov r25,r24
 1553 0692 9350      		subi r25,lo8(-(-3))
 1554 0694 9930      		cpi r25,lo8(9)
 1555 0696 00F4      		brsh .L90
 1556 0698 8091 0000 		lds r24,T_count
 1557 069c 8F5F      		subi r24,lo8(-(1))
 1558 069e 8093 0000 		sts T_count,r24
 1559 06a2 00C0      		rjmp .L91
 1560               	.L90:
1049:mavin.h       **** 			
1050:mavin.h       **** 			} else if(c_count >29){									//4T +
 1562               	.LM195:
 1563 06a4 8E31      		cpi r24,lo8(30)
 1564 06a6 00F0      		brlo .L91
 1565               	.LBB39:
1051:mavin.h       **** 				
1052:mavin.h       **** 				
1053:mavin.h       **** 				//NONFLASHSENSBF=1;	
1054:mavin.h       **** 				
1055:mavin.h       **** 				cbi(PORTC, SENS_TRIG);	
 1567               	.LM196:
 1568 06a8 AE98      		cbi 53-32,6
1056:mavin.h       **** 
1057:mavin.h       **** 				u08 kk;
1058:mavin.h       **** 				for(kk =0;kk<4;kk++)ir_data[kk] =0;//ir_data
 1570               	.LM197:
 1571 06aa 1092 0000 		sts ir_data,__zero_reg__
 1572 06ae 1092 0000 		sts ir_data+1,__zero_reg__
 1573 06b2 1092 0000 		sts ir_data+2,__zero_reg__
 1574 06b6 1092 0000 		sts ir_data+3,__zero_reg__
1059:mavin.h       **** 				OnlyIrCnt = 0;	T_count=0;
 1576               	.LM198:
 1577 06ba 1092 0000 		sts OnlyIrCnt,__zero_reg__
 1578 06be 1092 0000 		sts T_count,__zero_reg__
 1579               	.L91:
 1580               	.LBE39:
1060:mavin.h       **** 			}
1061:mavin.h       **** 			s_count = 0;
 1582               	.LM199:
 1583 06c2 1092 0000 		sts s_count.1880,__zero_reg__
 1584               	.L89:
1062:mavin.h       **** 		}
1063:mavin.h       **** 
1064:mavin.h       **** 		if(s_count >250);	else  s_count++;	// over flow 방지 
 1586               	.LM200:
 1587 06c6 8091 0000 		lds r24,s_count.1880
 1588 06ca 8B3F      		cpi r24,lo8(-5)
 1589 06cc 00F4      		brsh .L92
 1591               	.LM201:
 1592 06ce 8F5F      		subi r24,lo8(-(1))
 1593 06d0 8093 0000 		sts s_count.1880,r24
 1594               	.L92:
1065:mavin.h       **** 
1066:mavin.h       **** 		c_count = 0;	
 1596               	.LM202:
 1597 06d4 1092 0000 		sts c_count.1879,__zero_reg__
 1598 06d8 00C0      		rjmp .L93
 1599               	.L88:
1067:mavin.h       **** 			
1068:mavin.h       **** // DETECT LOW		
1069:mavin.h       **** 	} else {		
1070:mavin.h       **** 			//이전 상태가 high면	// clear_FLAG <===SET	// set_FLAG   <=== CLEAR
1071:mavin.h       **** 		if(IRReg & set_d_FLAG){	
 1601               	.LM203:
 1602 06da 8091 0000 		lds r24,IRReg
 1603 06de 84FF      		sbrs r24,4
 1604 06e0 00C0      		rjmp .L94
1072:mavin.h       **** 			IRReg |= clear_d_FLAG;
 1606               	.LM204:
 1607 06e2 8091 0000 		lds r24,IRReg
 1608 06e6 8062      		ori r24,lo8(32)
 1609 06e8 8093 0000 		sts IRReg,r24
1073:mavin.h       **** 			IRReg &= ~set_d_FLAG;
 1611               	.LM205:
 1612 06ec 8091 0000 		lds r24,IRReg
 1613 06f0 8F7E      		andi r24,lo8(-17)
 1614 06f2 8093 0000 		sts IRReg,r24
1074:mavin.h       **** 
1075:mavin.h       **** 			if     ((2< s_count)&&(s_count <6 )){		// T 
 1616               	.LM206:
 1617 06f6 8091 0000 		lds r24,s_count.1880
 1618 06fa 982F      		mov r25,r24
 1619 06fc 9350      		subi r25,lo8(-(-3))
 1620 06fe 9330      		cpi r25,lo8(3)
 1621 0700 00F4      		brsh .+2
 1622 0702 00C0      		rjmp .L107
 1623               	.L95:
1076:mavin.h       **** 														// 송신 완료...
1077:mavin.h       **** 				if((T_count ==32 )){
1078:mavin.h       **** 					T_data = ir_data[2];	IRReg |= IrRxdFLAG;	
1079:mavin.h       **** 
1080:mavin.h       **** 				}
1081:mavin.h       **** 				
1082:mavin.h       **** 			} else if((5< s_count)&&(s_count <30)){		//3T
 1625               	.LM207:
 1626 0704 982F      		mov r25,r24
 1627 0706 9650      		subi r25,lo8(-(-6))
 1628 0708 9831      		cpi r25,lo8(24)
 1629 070a 00F0      		brlo .+2
 1630 070c 00C0      		rjmp .L97
 1631               	.LBB40:
1083:mavin.h       **** 				u08 tmmp;
1084:mavin.h       **** 
1085:mavin.h       **** 				if(T_count<=8){	
 1633               	.LM208:
 1634 070e 8091 0000 		lds r24,T_count
 1635 0712 8930      		cpi r24,lo8(9)
 1636 0714 00F4      		brsh .L98
1086:mavin.h       **** 					tmmp = T_count-1;				ir_data[0] = ir_data[0] |(1<<tmmp);
 1638               	.LM209:
 1639 0716 3091 0000 		lds r19,T_count
 1640 071a 2091 0000 		lds r18,ir_data
 1641 071e 3150      		subi r19,lo8(-(-1))
 1642 0720 81E0      		ldi r24,lo8(1)
 1643 0722 90E0      		ldi r25,hi8(1)
 1644 0724 00C0      		rjmp 2f
 1645 0726 880F      	1:	lsl r24
 1646 0728 991F      		rol r25
 1647 072a 3A95      	2:	dec r19
 1648 072c 02F4      		brpl 1b
 1649 072e 282B      		or r18,r24
 1650 0730 2093 0000 		sts ir_data,r18
1087:mavin.h       **** 					
1088:mavin.h       **** 					if(T_count == 8){					// 다자간 게임모드 데이터...
 1652               	.LM210:
 1653 0734 8091 0000 		lds r24,T_count
 1654 0738 8830      		cpi r24,lo8(8)
 1655 073a 01F0      		breq .+2
 1656 073c 00C0      		rjmp .L96
1089:mavin.h       **** 						MultiCommData = ir_data[0];
 1658               	.LM211:
 1659 073e 8091 0000 		lds r24,ir_data
 1660 0742 8093 0000 		sts MultiCommData,r24
1090:mavin.h       **** 						IRReg |= MULTIRXDFLAG;
 1662               	.LM212:
 1663 0746 8091 0000 		lds r24,IRReg
 1664 074a 8160      		ori r24,lo8(1)
 1665 074c 00C0      		rjmp .L104
 1666               	.L98:
1091:mavin.h       **** 					}
1092:mavin.h       **** 
1093:mavin.h       **** 				} else if((T_count>8)&&(T_count<=16)){
 1668               	.LM213:
 1669 074e 8091 0000 		lds r24,T_count
 1670 0752 8930      		cpi r24,lo8(9)
 1671 0754 00F0      		brlo .L99
 1673               	.LM214:
 1674 0756 8091 0000 		lds r24,T_count
 1675 075a 8131      		cpi r24,lo8(17)
 1676 075c 00F4      		brsh .L99
1094:mavin.h       **** 					tmmp = T_count-9;				ir_data[1] = ir_data[1] |(1<<tmmp); 
 1678               	.LM215:
 1679 075e 3091 0000 		lds r19,T_count
 1680 0762 2091 0000 		lds r18,ir_data+1
 1681 0766 3950      		subi r19,lo8(-(-9))
 1682 0768 81E0      		ldi r24,lo8(1)
 1683 076a 90E0      		ldi r25,hi8(1)
 1684 076c 00C0      		rjmp 2f
 1685 076e 880F      	1:	lsl r24
 1686 0770 991F      		rol r25
 1687 0772 3A95      	2:	dec r19
 1688 0774 02F4      		brpl 1b
 1689 0776 282B      		or r18,r24
 1690 0778 2093 0000 		sts ir_data+1,r18
 1691 077c 00C0      		rjmp .L96
 1692               	.L99:
1095:mavin.h       **** 					
1096:mavin.h       **** 				} else if((T_count>16)&&(T_count<=24)){
 1694               	.LM216:
 1695 077e 8091 0000 		lds r24,T_count
 1696 0782 8131      		cpi r24,lo8(17)
 1697 0784 00F0      		brlo .L100
 1699               	.LM217:
 1700 0786 8091 0000 		lds r24,T_count
 1701 078a 8931      		cpi r24,lo8(25)
 1702 078c 00F4      		brsh .L100
1097:mavin.h       **** 					tmmp = T_count-17;				ir_data[2] = ir_data[2] |(1<<tmmp); 
 1704               	.LM218:
 1705 078e 3091 0000 		lds r19,T_count
 1706 0792 2091 0000 		lds r18,ir_data+2
 1707 0796 3151      		subi r19,lo8(-(-17))
 1708 0798 81E0      		ldi r24,lo8(1)
 1709 079a 90E0      		ldi r25,hi8(1)
 1710 079c 00C0      		rjmp 2f
 1711 079e 880F      	1:	lsl r24
 1712 07a0 991F      		rol r25
 1713 07a2 3A95      	2:	dec r19
 1714 07a4 02F4      		brpl 1b
 1715 07a6 282B      		or r18,r24
 1716 07a8 2093 0000 		sts ir_data+2,r18
 1717 07ac 00C0      		rjmp .L96
 1718               	.L100:
1098:mavin.h       **** 					
1099:mavin.h       **** 				} else if((T_count>24)&&(T_count<=32)){
 1720               	.LM219:
 1721 07ae 8091 0000 		lds r24,T_count
 1722 07b2 8931      		cpi r24,lo8(25)
 1723 07b4 00F0      		brlo .L96
 1725               	.LM220:
 1726 07b6 8091 0000 		lds r24,T_count
 1727 07ba 8132      		cpi r24,lo8(33)
 1728 07bc 00F4      		brsh .L96
1100:mavin.h       **** 					tmmp = T_count-25;				ir_data[3] = ir_data[3] |(1<<tmmp); 
 1730               	.LM221:
 1731 07be 3091 0000 		lds r19,T_count
 1732 07c2 2091 0000 		lds r18,ir_data+3
 1733 07c6 3951      		subi r19,lo8(-(-25))
 1734 07c8 81E0      		ldi r24,lo8(1)
 1735 07ca 90E0      		ldi r25,hi8(1)
 1736 07cc 00C0      		rjmp 2f
 1737 07ce 880F      	1:	lsl r24
 1738 07d0 991F      		rol r25
 1739 07d2 3A95      	2:	dec r19
 1740 07d4 02F4      		brpl 1b
 1741 07d6 282B      		or r18,r24
 1742 07d8 2093 0000 		sts ir_data+3,r18
 1743               	.L107:
1101:mavin.h       **** 														// 송신완료
1102:mavin.h       **** 					if((T_count ==32 )){
 1745               	.LM222:
 1746 07dc 8091 0000 		lds r24,T_count
 1747 07e0 8032      		cpi r24,lo8(32)
 1748 07e2 01F4      		brne .L96
1103:mavin.h       **** 						T_data = ir_data[2];	IRReg |= IrRxdFLAG;	
 1750               	.LM223:
 1751 07e4 8091 0000 		lds r24,ir_data+2
 1752 07e8 8093 0000 		sts T_data,r24
 1753 07ec 8091 0000 		lds r24,IRReg
 1754 07f0 8068      		ori r24,lo8(-128)
 1755               	.L104:
 1756 07f2 8093 0000 		sts IRReg,r24
 1757 07f6 00C0      		rjmp .L96
 1758               	.L97:
 1759               	.LBE40:
1104:mavin.h       **** //						RComFlagReg &= ~ExclRxFLAG;
1105:mavin.h       **** 					}
1106:mavin.h       **** 				}
1107:mavin.h       **** 
1108:mavin.h       **** 
1109:mavin.h       **** 			} else if((29< s_count)/*&&(s_count<45)*/){	//4T
 1761               	.LM224:
 1762 07f8 8E31      		cpi r24,lo8(30)
 1763 07fa 00F0      		brlo .L96
1110:mavin.h       **** 				T_count=0;							
 1765               	.LM225:
 1766 07fc 1092 0000 		sts T_count,__zero_reg__
 1767               	.L96:
1111:mavin.h       **** 			}
1112:mavin.h       **** 			c_count = 0;
 1769               	.LM226:
 1770 0800 1092 0000 		sts c_count.1879,__zero_reg__
 1771               	.L94:
1113:mavin.h       **** 		} 
1114:mavin.h       **** 		
1115:mavin.h       **** 		if(!(c_count > 250)) c_count++ ;
 1773               	.LM227:
 1774 0804 8091 0000 		lds r24,c_count.1879
 1775 0808 8B3F      		cpi r24,lo8(-5)
 1776 080a 00F4      		brsh .L101
 1778               	.LM228:
 1779 080c 8F5F      		subi r24,lo8(-(1))
 1780 080e 8093 0000 		sts c_count.1879,r24
 1781               	.L101:
1116:mavin.h       **** 		s_count = 0;	
 1783               	.LM229:
 1784 0812 1092 0000 		sts s_count.1880,__zero_reg__
 1785               	.L93:
1117:mavin.h       **** 	}// else
1118:mavin.h       **** 	if(RemoconValuedelayCnt){
 1787               	.LM230:
 1788 0816 8091 0000 		lds r24,RemoconValuedelayCnt
 1789 081a 8823      		tst r24
 1790 081c 01F0      		breq .L87
1119:mavin.h       **** 		if(RemoconValuedelayCnt == 1){
 1792               	.LM231:
 1793 081e 8091 0000 		lds r24,RemoconValuedelayCnt
 1794 0822 8130      		cpi r24,lo8(1)
 1795 0824 01F4      		brne .L103
1120:mavin.h       **** 			IRReg&= ~IrRxdFLAG;
 1797               	.LM232:
 1798 0826 8091 0000 		lds r24,IRReg
 1799 082a 8F77      		andi r24,lo8(127)
 1800 082c 8093 0000 		sts IRReg,r24
 1801               	.L103:
1121:mavin.h       **** 		}
1122:mavin.h       **** 		RemoconValuedelayCnt--;
 1803               	.LM233:
 1804 0830 8091 0000 		lds r24,RemoconValuedelayCnt
 1805 0834 8150      		subi r24,lo8(-(-1))
 1806 0836 8093 0000 		sts RemoconValuedelayCnt,r24
 1807               	.L87:
 1808 083a 0895      		ret
 1814               	.Lscope8:
 1816               		.stabd	78,0,0
 1818               	.global	IrComm
 1820               	IrComm:
 1821               		.stabd	46,0,0
1026:mavin.h       **** {
 1823               	.LM234:
 1824               	.LFBB9:
 1825               	/* prologue: function */
 1826               	/* frame size = 0 */
 1827               	/* stack size = 0 */
 1828               	.L__stack_usage = 0
1027:mavin.h       **** 	if(IRReg&IrTimeFLAG){//timer0 ovf(주기 64 *2) = 128usec 생성
 1830               	.LM235:
 1831 083c 8091 0000 		lds r24,IRReg
 1832 0840 86FF      		sbrs r24,6
 1833 0842 00C0      		rjmp .L109
1028:mavin.h       **** 		IrRecv();
 1835               	.LM236:
 1836 0844 0E94 0000 		call IrRecv
1029:mavin.h       **** 		IRReg &= ~IrTimeFLAG; 	
 1838               	.LM237:
 1839 0848 8091 0000 		lds r24,IRReg
 1840 084c 8F7B      		andi r24,lo8(-65)
 1841 084e 00C0      		rjmp .L111
 1842               	.L109:
1032:mavin.h       **** 		IRReg |= IrTimeFLAG;
 1844               	.LM238:
 1845 0850 8091 0000 		lds r24,IRReg
 1846 0854 8064      		ori r24,lo8(64)
 1847               	.L111:
 1848 0856 8093 0000 		sts IRReg,r24
 1849 085a 0895      		ret
 1851               	.Lscope9:
 1853               		.stabd	78,0,0
 1858               	.global	DcMotor_temp
 1860               	DcMotor_temp:
 1861               		.stabd	46,0,0
1123:mavin.h       **** 	}
1124:mavin.h       **** }
1125:mavin.h       **** 
1126:mavin.h       **** 
1127:mavin.h       **** /////////////////////////////////////////////////////////////
1128:mavin.h       **** //모터함수
1129:mavin.h       **** 
1130:mavin.h       **** void DcMotor_temp(u08 direction ,u08 sel_motor, u08 pwm_value){
 1863               	.LM239:
 1864               	.LFBB10:
 1865               	/* prologue: function */
 1866               	/* frame size = 0 */
 1867               	/* stack size = 0 */
 1868               	.L__stack_usage = 0
1131:mavin.h       **** 	
1132:mavin.h       **** // cur_pwm[2], org_pwm[2], pwm_cycle, pwm_cnt
1133:mavin.h       **** 
1134:mavin.h       **** 		sbi(DDRB,4);
 1870               	.LM240:
 1871 085c BC9A      		sbi 55-32,4
1135:mavin.h       **** 		sbi(DDRB,5);
 1873               	.LM241:
 1874 085e BD9A      		sbi 55-32,5
1136:mavin.h       **** 		sbi(DDRE,4);
 1876               	.LM242:
 1877 0860 149A      		sbi 34-32,4
1137:mavin.h       **** 		sbi(DDRB,6);
 1879               	.LM243:
 1880 0862 BE9A      		sbi 55-32,6
1138:mavin.h       **** 		sbi(DDRB,7);
 1882               	.LM244:
 1883 0864 BF9A      		sbi 55-32,7
1139:mavin.h       **** 		sbi(DDRE,5);
 1885               	.LM245:
 1886 0866 159A      		sbi 34-32,5
1140:mavin.h       **** 	
1141:mavin.h       **** 	if(sel_motor == 1) 			// right_motor
 1888               	.LM246:
 1889 0868 6130      		cpi r22,lo8(1)
 1890 086a 01F4      		brne .L113
1142:mavin.h       **** 	{
1143:mavin.h       **** 		if(direction == 1){		// 정방향		
 1892               	.LM247:
 1893 086c 8130      		cpi r24,lo8(1)
 1894 086e 01F4      		brne .L114
1144:mavin.h       **** 			cbi(PORTB,4);
 1896               	.LM248:
 1897 0870 C498      		cbi 56-32,4
1145:mavin.h       **** 			sbi(PORTB,5);
 1899               	.LM249:
 1900 0872 C59A      		sbi 56-32,5
 1901 0874 00C0      		rjmp .L115
 1902               	.L114:
1146:mavin.h       **** 		}else if(direction == 0){// 역방향
 1904               	.LM250:
 1905 0876 8823      		tst r24
 1906 0878 01F4      		brne .L115
1147:mavin.h       **** 			cbi(PORTB,5);
 1908               	.LM251:
 1909 087a C598      		cbi 56-32,5
1148:mavin.h       **** 			sbi(PORTB,4);
 1911               	.LM252:
 1912 087c C49A      		sbi 56-32,4
 1913               	.L115:
1149:mavin.h       **** 		}
1150:mavin.h       **** 		org_pwm[0] = pwm_value;
 1915               	.LM253:
 1916 087e 4093 0000 		sts org_pwm,r20
1151:mavin.h       **** 		if(org_pwm[0]){
 1918               	.LM254:
 1919 0882 8091 0000 		lds r24,org_pwm
 1920 0886 8823      		tst r24
 1921 0888 01F0      		breq .L116
1152:mavin.h       **** 			org_pwm[0] = pwm_value;
 1923               	.LM255:
 1924 088a 4093 0000 		sts org_pwm,r20
 1925 088e 0895      		ret
 1926               	.L116:
1153:mavin.h       **** 		} else {
1154:mavin.h       **** 			cbi(PORTB,4);
 1928               	.LM256:
 1929 0890 C498      		cbi 56-32,4
1155:mavin.h       **** 			cbi(PORTB,5);
 1931               	.LM257:
 1932 0892 C598      		cbi 56-32,5
 1933 0894 0895      		ret
 1934               	.L113:
1156:mavin.h       **** 		}
1157:mavin.h       **** 	}
1158:mavin.h       **** 	else if(sel_motor == 2)		// left_motor
 1936               	.LM258:
 1937 0896 6230      		cpi r22,lo8(2)
 1938 0898 01F4      		brne .L118
1159:mavin.h       **** 	{	
1160:mavin.h       **** 		if(direction == 1){		// 정방향
 1940               	.LM259:
 1941 089a 8130      		cpi r24,lo8(1)
 1942 089c 01F4      		brne .L119
1161:mavin.h       **** 			cbi(PORTB,7);
 1944               	.LM260:
 1945 089e C798      		cbi 56-32,7
1162:mavin.h       **** 			sbi(PORTB,6);
 1947               	.LM261:
 1948 08a0 C69A      		sbi 56-32,6
 1949 08a2 00C0      		rjmp .L120
 1950               	.L119:
1163:mavin.h       **** 		}else if(direction == 0){// 역방향
 1952               	.LM262:
 1953 08a4 8823      		tst r24
 1954 08a6 01F4      		brne .L120
1164:mavin.h       **** 			cbi(PORTB,6);
 1956               	.LM263:
 1957 08a8 C698      		cbi 56-32,6
1165:mavin.h       **** 			sbi(PORTB,7);
 1959               	.LM264:
 1960 08aa C79A      		sbi 56-32,7
 1961               	.L120:
1166:mavin.h       **** 		}
1167:mavin.h       **** 		org_pwm[1] = pwm_value;
 1963               	.LM265:
 1964 08ac 4093 0000 		sts org_pwm+1,r20
1168:mavin.h       **** 		if(org_pwm[1]){
 1966               	.LM266:
 1967 08b0 8091 0000 		lds r24,org_pwm+1
 1968 08b4 8823      		tst r24
 1969 08b6 01F4      		brne .L129
 1970               	.L121:
1169:mavin.h       **** 			org_pwm[1] = pwm_value;		
1170:mavin.h       **** 		}else {
1171:mavin.h       **** 			cbi(PORTB,6);
 1972               	.LM267:
 1973 08b8 C698      		cbi 56-32,6
1172:mavin.h       **** 			cbi(PORTB,7);
 1975               	.LM268:
 1976 08ba C798      		cbi 56-32,7
 1977 08bc 0895      		ret
 1978               	.L118:
1173:mavin.h       **** 		}
1174:mavin.h       **** 	}	
1175:mavin.h       **** 	else if(sel_motor == 3)		// 양쪽모터
 1980               	.LM269:
 1981 08be 6330      		cpi r22,lo8(3)
 1982 08c0 01F4      		brne .L112
1176:mavin.h       **** 	{
1177:mavin.h       **** 		if(direction == 1){		// 정방향
 1984               	.LM270:
 1985 08c2 8130      		cpi r24,lo8(1)
 1986 08c4 01F4      		brne .L122
1178:mavin.h       **** 			
1179:mavin.h       **** 			cbi(PORTB,4);
 1988               	.LM271:
 1989 08c6 C498      		cbi 56-32,4
1180:mavin.h       **** 			sbi(PORTB,5);
 1991               	.LM272:
 1992 08c8 C59A      		sbi 56-32,5
 1993 08ca 00C0      		rjmp .L123
 1994               	.L122:
1181:mavin.h       **** 		}else if(direction == 0){// 역방향
 1996               	.LM273:
 1997 08cc 8823      		tst r24
 1998 08ce 01F4      		brne .L123
1182:mavin.h       **** 			cbi(PORTB,5);
 2000               	.LM274:
 2001 08d0 C598      		cbi 56-32,5
1183:mavin.h       **** 			sbi(PORTB,4);
 2003               	.LM275:
 2004 08d2 C49A      		sbi 56-32,4
 2005               	.L123:
1184:mavin.h       **** 		}
1185:mavin.h       **** 		org_pwm[0] = pwm_value;
 2007               	.LM276:
 2008 08d4 4093 0000 		sts org_pwm,r20
1186:mavin.h       **** 		if(org_pwm[0]){
 2010               	.LM277:
 2011 08d8 9091 0000 		lds r25,org_pwm
 2012 08dc 9923      		tst r25
 2013 08de 01F0      		breq .L124
1187:mavin.h       **** 			org_pwm[0] = pwm_value;
 2015               	.LM278:
 2016 08e0 4093 0000 		sts org_pwm,r20
 2017 08e4 00C0      		rjmp .L125
 2018               	.L124:
1188:mavin.h       **** 		} else {
1189:mavin.h       **** 			cbi(PORTB,4);
 2020               	.LM279:
 2021 08e6 C498      		cbi 56-32,4
1190:mavin.h       **** 			cbi(PORTB,5);
 2023               	.LM280:
 2024 08e8 C598      		cbi 56-32,5
 2025               	.L125:
1191:mavin.h       **** 		}
1192:mavin.h       **** 	
1193:mavin.h       **** 		if(direction == 1){		// 정방향
 2027               	.LM281:
 2028 08ea 8130      		cpi r24,lo8(1)
 2029 08ec 01F4      		brne .L126
1194:mavin.h       **** 			cbi(PORTB,7);
 2031               	.LM282:
 2032 08ee C798      		cbi 56-32,7
1195:mavin.h       **** 			sbi(PORTB,6);
 2034               	.LM283:
 2035 08f0 C69A      		sbi 56-32,6
 2036 08f2 00C0      		rjmp .L127
 2037               	.L126:
1196:mavin.h       **** 		}else if(direction == 0){// 역방향
 2039               	.LM284:
 2040 08f4 8823      		tst r24
 2041 08f6 01F4      		brne .L127
1197:mavin.h       **** 			cbi(PORTB,6);
 2043               	.LM285:
 2044 08f8 C698      		cbi 56-32,6
1198:mavin.h       **** 			sbi(PORTB,7);
 2046               	.LM286:
 2047 08fa C79A      		sbi 56-32,7
 2048               	.L127:
1199:mavin.h       **** 		}
1200:mavin.h       **** 		org_pwm[1] = pwm_value;
 2050               	.LM287:
 2051 08fc 4093 0000 		sts org_pwm+1,r20
1201:mavin.h       **** 		if(org_pwm[1]){
 2053               	.LM288:
 2054 0900 8091 0000 		lds r24,org_pwm+1
 2055 0904 8823      		tst r24
 2056 0906 01F0      		breq .L128
 2057               	.L129:
1202:mavin.h       **** 			org_pwm[1] = pwm_value;		
 2059               	.LM289:
 2060 0908 4093 0000 		sts org_pwm+1,r20
 2061 090c 0895      		ret
 2062               	.L128:
1203:mavin.h       **** 		}else {
1204:mavin.h       **** 			cbi(PORTB,6);
 2064               	.LM290:
 2065 090e C698      		cbi 56-32,6
1205:mavin.h       **** 			cbi(PORTB,7);
 2067               	.LM291:
 2068 0910 C798      		cbi 56-32,7
 2069               	.L112:
 2070 0912 0895      		ret
 2072               	.Lscope10:
 2074               		.stabd	78,0,0
 2076               	.global	isr_pwm
 2078               	isr_pwm:
 2079               		.stabd	46,0,0
1206:mavin.h       **** 		}
1207:mavin.h       **** 	}	
1208:mavin.h       **** 	
1209:mavin.h       **** }
1210:mavin.h       **** 
1211:mavin.h       **** //---------------------------------------------------------
1212:mavin.h       **** void isr_pwm(void)
1213:mavin.h       **** {
 2081               	.LM292:
 2082               	.LFBB11:
 2083               	/* prologue: function */
 2084               	/* frame size = 0 */
 2085               	/* stack size = 0 */
 2086               	.L__stack_usage = 0
1214:mavin.h       **** 	// cur_pwm[2], org_pwm[2], pwm_cycle, pwm_cnt
1215:mavin.h       **** 
1216:mavin.h       **** 	pwm_cnt++;
 2088               	.LM293:
 2089 0914 8091 0000 		lds r24,pwm_cnt
 2090 0918 8F5F      		subi r24,lo8(-(1))
 2091 091a 8093 0000 		sts pwm_cnt,r24
1217:mavin.h       **** 		
1218:mavin.h       **** 	if(pwm_cnt == pwm_cycle){
 2093               	.LM294:
 2094 091e 9091 0000 		lds r25,pwm_cnt
 2095 0922 8091 0000 		lds r24,pwm_cycle
 2096 0926 9817      		cp r25,r24
 2097 0928 01F4      		brne .L131
1219:mavin.h       **** 		pwm_cnt = 0;	
 2099               	.LM295:
 2100 092a 1092 0000 		sts pwm_cnt,__zero_reg__
1220:mavin.h       **** 		cur_pwm[0] = org_pwm[0];
 2102               	.LM296:
 2103 092e 8091 0000 		lds r24,org_pwm
 2104 0932 8093 0000 		sts cur_pwm,r24
1221:mavin.h       **** 		cur_pwm[1] = org_pwm[1];
 2106               	.LM297:
 2107 0936 8091 0000 		lds r24,org_pwm+1
 2108 093a 8093 0000 		sts cur_pwm+1,r24
1222:mavin.h       **** 		
1223:mavin.h       **** 		if(cur_pwm[0]){		// right 동작
 2110               	.LM298:
 2111 093e 8091 0000 		lds r24,cur_pwm
 2112 0942 8111      		cpse r24,__zero_reg__
1224:mavin.h       **** 			sbi(PORTE,4);
 2114               	.LM299:
 2115 0944 1C9A      		sbi 35-32,4
 2116               	.L132:
1225:mavin.h       **** 		}
1226:mavin.h       **** 		if(cur_pwm[1]){		// left 동작
 2118               	.LM300:
 2119 0946 8091 0000 		lds r24,cur_pwm+1
 2120 094a 8111      		cpse r24,__zero_reg__
1227:mavin.h       **** 			sbi(PORTE,5);
 2122               	.LM301:
 2123 094c 1D9A      		sbi 35-32,5
 2124               	.L131:
1228:mavin.h       **** 		}
1229:mavin.h       **** 	}
1230:mavin.h       **** 	
1231:mavin.h       **** 	if(pwm_cnt == cur_pwm[0]){		// right_정지
 2126               	.LM302:
 2127 094e 9091 0000 		lds r25,pwm_cnt
 2128 0952 8091 0000 		lds r24,cur_pwm
 2129 0956 9817      		cp r25,r24
 2130 0958 01F4      		brne .L133
1232:mavin.h       **** 			cbi(PORTE,4);
 2132               	.LM303:
 2133 095a 1C98      		cbi 35-32,4
 2134               	.L133:
1233:mavin.h       **** 	}	
1234:mavin.h       **** 	if(pwm_cnt == cur_pwm[1]){		// left_정지
 2136               	.LM304:
 2137 095c 9091 0000 		lds r25,pwm_cnt
 2138 0960 8091 0000 		lds r24,cur_pwm+1
 2139 0964 9817      		cp r25,r24
 2140 0966 01F4      		brne .L130
1235:mavin.h       **** 			cbi(PORTE,5);
 2142               	.LM305:
 2143 0968 1D98      		cbi 35-32,5
 2144               	.L130:
 2145 096a 0895      		ret
 2147               	.Lscope11:
 2149               		.stabd	78,0,0
 2151               	.global	PhotoSensorUpdate
 2153               	PhotoSensorUpdate:
 2154               		.stabd	46,0,0
1236:mavin.h       **** 	}
1237:mavin.h       **** 	
1238:mavin.h       **** }
1239:mavin.h       **** 
1240:mavin.h       **** //---------------------------------------------------------
1241:mavin.h       **** void PhotoSensorUpdate()
1242:mavin.h       **** {
 2156               	.LM306:
 2157               	.LFBB12:
 2158               	/* prologue: function */
 2159               	/* frame size = 0 */
 2160               	/* stack size = 0 */
 2161               	.L__stack_usage = 0
1243:mavin.h       ****     static u08 timingcnt;	//읽은 센서값을 카운터 시간 지연을 줌
1244:mavin.h       ****     
1245:mavin.h       **** 	timingcnt++;
 2163               	.LM307:
 2164 096c 8091 0000 		lds r24,timingcnt.1896
 2165 0970 8F5F      		subi r24,lo8(-(1))
 2166 0972 8093 0000 		sts timingcnt.1896,r24
1246:mavin.h       **** 	
1247:mavin.h       **** 	if(timingcnt == 16){
 2168               	.LM308:
 2169 0976 8031      		cpi r24,lo8(16)
 2170 0978 01F4      		brne .L136
1248:mavin.h       **** 	    timingcnt = 0;	
 2172               	.LM309:
 2173 097a 1092 0000 		sts timingcnt.1896,__zero_reg__
 2174 097e 0895      		ret
 2175               	.L136:
1249:mavin.h       **** 	
1250:mavin.h       **** 	}else if(timingcnt == 14){
 2177               	.LM310:
 2178 0980 8E30      		cpi r24,lo8(14)
 2179 0982 01F4      		brne .L138
1251:mavin.h       **** 		// 센서 발광 시작
1252:mavin.h       **** 		sbi(PORTC, SENS_TRIG);				
 2181               	.LM311:
 2182 0984 AE9A      		sbi 53-32,6
 2183 0986 0895      		ret
 2184               	.L138:
1253:mavin.h       **** 		
1254:mavin.h       **** 	}else if(timingcnt == 15){
 2186               	.LM312:
 2187 0988 8F30      		cpi r24,lo8(15)
 2188 098a 01F4      		brne .L135
1255:mavin.h       **** 		//센서수광, 값읽음	
1256:mavin.h       **** 		
1257:mavin.h       **** 		//
1258:mavin.h       **** 		if(SensorDir == FORWARD){
 2190               	.LM313:
 2191 098c 8091 0000 		lds r24,SensorDir
 2192 0990 8130      		cpi r24,lo8(1)
 2193 0992 01F4      		brne .L139
1259:mavin.h       ****   		    ForwardPhotoSensor = inp(PINC)& 0x07;			//전방센서	
 2195               	.LM314:
 2196 0994 83B3      		in r24,51-32
 2197 0996 8770      		andi r24,lo8(7)
 2198 0998 8093 0000 		sts ForwardPhotoSensor,r24
 2199 099c 00C0      		rjmp .L140
 2200               	.L139:
1260:mavin.h       ****   		}else{
1261:mavin.h       ****   		    DownwardPhotoSensor = //(inp(PINC)>>3)&0x07;
1262:mavin.h       ****   		     (~((inp(PINC)&( 0x38))>> 3))&0x07;	//하방센서			
 2202               	.LM315:
 2203 099e 83B3      		in r24,51-32
 2204 09a0 90E0      		ldi r25,lo8(0)
 2205 09a2 8873      		andi r24,lo8(56)
 2206 09a4 9070      		andi r25,hi8(56)
 2207 09a6 23E0      		ldi r18,3
 2208 09a8 9595      	1:	asr r25
 2209 09aa 8795      		ror r24
 2210 09ac 2A95      		dec r18
 2211 09ae 01F4      		brne 1b
1261:mavin.h       ****   		    DownwardPhotoSensor = //(inp(PINC)>>3)&0x07;
 2213               	.LM316:
 2214 09b0 8095      		com r24
 2215 09b2 8770      		andi r24,lo8(7)
 2216 09b4 8093 0000 		sts DownwardPhotoSensor,r24
 2217               	.L140:
1263:mavin.h       ****   		} 
1264:mavin.h       ****   		  		  		
1265:mavin.h       ****   		cbi(PORTC, SENS_TRIG);	//센서 발광 끝	  			  		
 2219               	.LM317:
 2220 09b8 AE98      		cbi 53-32,6
 2221               	.L135:
 2222 09ba 0895      		ret
 2227               	.Lscope12:
 2229               		.stabd	78,0,0
 2231               	.global	__vector_16
 2233               	__vector_16:
 2234               		.stabd	46,0,0
 626:mavin.h       **** {						//32uS 마다 진입
 2236               	.LM318:
 2237               	.LFBB13:
 2238 09bc 1F92      		push __zero_reg__
 2239 09be 0F92      		push r0
 2240 09c0 0FB6      		in r0,__SREG__
 2241 09c2 0F92      		push r0
 2242 09c4 1124      		clr __zero_reg__
 2243 09c6 2F93      		push r18
 2244 09c8 3F93      		push r19
 2245 09ca 4F93      		push r20
 2246 09cc 5F93      		push r21
 2247 09ce 6F93      		push r22
 2248 09d0 7F93      		push r23
 2249 09d2 8F93      		push r24
 2250 09d4 9F93      		push r25
 2251 09d6 AF93      		push r26
 2252 09d8 BF93      		push r27
 2253 09da EF93      		push r30
 2254 09dc FF93      		push r31
 2255               	/* prologue: Signal */
 2256               	/* frame size = 0 */
 2257               	/* stack size = 15 */
 2258               	.L__stack_usage = 15
 633:mavin.h       ****  	if(mux2){      //64uS 마다 진입
 2260               	.LM319:
 2261 09de 8091 0000 		lds r24,mux2.1701
 2262 09e2 8823      		tst r24
 2263 09e4 01F0      		breq .L142
 634:mavin.h       ****  	    mux2 = 0;
 2265               	.LM320:
 2266 09e6 1092 0000 		sts mux2.1701,__zero_reg__
 635:mavin.h       ****      	IrComm(); 
 2268               	.LM321:
 2269 09ea 0E94 0000 		call IrComm
 636:mavin.h       ****      	MelFunc();         	
 2271               	.LM322:
 2272 09ee 0E94 0000 		call MelFunc
 638:mavin.h       **** 		if(delay_count != 0){	
 2274               	.LM323:
 2275 09f2 8091 0000 		lds r24,delay_count
 2276 09f6 9091 0000 		lds r25,delay_count+1
 2277 09fa 0097      		sbiw r24,0
 2278 09fc 01F0      		breq .L143
 639:mavin.h       **** 			delay_count--;
 2280               	.LM324:
 2281 09fe 8091 0000 		lds r24,delay_count
 2282 0a02 9091 0000 		lds r25,delay_count+1
 2283 0a06 0197      		sbiw r24,1
 2284 0a08 9093 0000 		sts delay_count+1,r25
 2285 0a0c 8093 0000 		sts delay_count,r24
 2286               	.L143:
 641:mavin.h       **** 		if(delayms_count != 0){
 2288               	.LM325:
 2289 0a10 8091 0000 		lds r24,delayms_count
 2290 0a14 9091 0000 		lds r25,delayms_count+1
 2291 0a18 0097      		sbiw r24,0
 2292 0a1a 01F0      		breq .L144
 642:mavin.h       **** 			delayms_count--;
 2294               	.LM326:
 2295 0a1c 8091 0000 		lds r24,delayms_count
 2296 0a20 9091 0000 		lds r25,delayms_count+1
 2297 0a24 0197      		sbiw r24,1
 2298 0a26 9093 0000 		sts delayms_count+1,r25
 2299 0a2a 8093 0000 		sts delayms_count,r24
 2300 0a2e 00C0      		rjmp .L144
 2301               	.L142:
 646:mavin.h       **** 		mux2 = 1;					///// ControlPortc == 1 포토센서.
 2303               	.LM327:
 2304 0a30 81E0      		ldi r24,lo8(1)
 2305 0a32 8093 0000 		sts mux2.1701,r24
 647:mavin.h       **** 		if(ControlPortc == 1)  PhotoSensorUpdate();     ///// 2007.03.13 추가. (불도저 or 포토센서)
 2307               	.LM328:
 2308 0a36 8091 0000 		lds r24,ControlPortc
 2309 0a3a 8130      		cpi r24,lo8(1)
 2310 0a3c 01F4      		brne .L145
 647:mavin.h       **** 		if(ControlPortc == 1)  PhotoSensorUpdate();     ///// 2007.03.13 추가. (불도저 or 포토센서)
 2312               	.LM329:
 2313 0a3e 0E94 0000 		call PhotoSensorUpdate
 2314               	.L145:
 649:mavin.h       **** 		if(Pwmloopcnt == 0){	// PWM 루틴	
 2316               	.LM330:
 2317 0a42 8091 0000 		lds r24,Pwmloopcnt.1704
 2318 0a46 8823      		tst r24
 2319 0a48 01F4      		brne .L146
 650:mavin.h       **** 		    Pwmloopcnt = 2;	    
 2321               	.LM331:
 2322 0a4a 82E0      		ldi r24,lo8(2)
 2323 0a4c 8093 0000 		sts Pwmloopcnt.1704,r24
 651:mavin.h       **** 			isr_pwm();
 2325               	.LM332:
 2326 0a50 0E94 0000 		call isr_pwm
 2327               	.L146:
 654:mavin.h       **** 		--Pwmloopcnt;		
 2329               	.LM333:
 2330 0a54 8091 0000 		lds r24,Pwmloopcnt.1704
 2331 0a58 8150      		subi r24,lo8(-(-1))
 2332 0a5a 8093 0000 		sts Pwmloopcnt.1704,r24
 655:mavin.h       **** 		ClkTickFunc();		// 	CLK Genarate Zone 	   	
 2334               	.LM334:
 2335 0a5e 0E94 0000 		call ClkTickFunc
 2336               	.L144:
 658:mavin.h       **** 	if(delay32us != 0) delay32us--;
 2338               	.LM335:
 2339 0a62 8091 0000 		lds r24,delay32us
 2340 0a66 9091 0000 		lds r25,delay32us+1
 2341 0a6a 0097      		sbiw r24,0
 2342 0a6c 01F0      		breq .L147
 658:mavin.h       **** 	if(delay32us != 0) delay32us--;
 2344               	.LM336:
 2345 0a6e 8091 0000 		lds r24,delay32us
 2346 0a72 9091 0000 		lds r25,delay32us+1
 2347 0a76 0197      		sbiw r24,1
 2348 0a78 9093 0000 		sts delay32us+1,r25
 2349 0a7c 8093 0000 		sts delay32us,r24
 2350               	.L147:
 659:mavin.h       **** 	if(delay32us < 0 ) delay32us =0;
 2352               	.LM337:
 2353 0a80 8091 0000 		lds r24,delay32us
 2354 0a84 9091 0000 		lds r25,delay32us+1
 2355               	/* epilogue start */
 661:mavin.h       **** }
 2357               	.LM338:
 2358 0a88 FF91      		pop r31
 2359 0a8a EF91      		pop r30
 2360 0a8c BF91      		pop r27
 2361 0a8e AF91      		pop r26
 2362 0a90 9F91      		pop r25
 2363 0a92 8F91      		pop r24
 2364 0a94 7F91      		pop r23
 2365 0a96 6F91      		pop r22
 2366 0a98 5F91      		pop r21
 2367 0a9a 4F91      		pop r20
 2368 0a9c 3F91      		pop r19
 2369 0a9e 2F91      		pop r18
 2370 0aa0 0F90      		pop r0
 2371 0aa2 0FBE      		out __SREG__,r0
 2372 0aa4 0F90      		pop r0
 2373 0aa6 1F90      		pop __zero_reg__
 2374 0aa8 1895      		reti
 2380               	.Lscope13:
 2382               		.stabd	78,0,0
 2385               	.global	delayms
 2387               	delayms:
 2388               		.stabd	46,0,0
1266:mavin.h       ****   		
1267:mavin.h       **** 	}
1268:mavin.h       **** }
1269:mavin.h       **** 
1270:mavin.h       **** //Delay Function...... 
1271:mavin.h       **** //////////////////////////////////////////////////////////////////////////////////////
1272:mavin.h       **** //@@@@@@@@@@@@@@@ 07.03.28 @@@@@@@@@@@@@@@@@@@@//
1273:mavin.h       **** 
1274:mavin.h       **** void delayms(unsigned int delay_ms)
1275:mavin.h       **** {
 2390               	.LM339:
 2391               	.LFBB14:
 2392               	/* prologue: function */
 2393               	/* frame size = 0 */
 2394               	/* stack size = 0 */
 2395               	.L__stack_usage = 0
1276:mavin.h       ****     for(;delay_ms>0;delay_ms--)
1277:mavin.h       **** 	{
1278:mavin.h       ****         while(delayms_count > 0){}
1279:mavin.h       **** 		delayms_count = 16;
 2397               	.LM340:
 2398 0aaa 20E1      		ldi r18,lo8(16)
 2399 0aac 30E0      		ldi r19,hi8(16)
1276:mavin.h       ****     for(;delay_ms>0;delay_ms--)
 2401               	.LM341:
 2402 0aae 00C0      		rjmp .L149
 2403               	.L151:
1278:mavin.h       ****         while(delayms_count > 0){}
 2405               	.LM342:
 2406 0ab0 4091 0000 		lds r20,delayms_count
 2407 0ab4 5091 0000 		lds r21,delayms_count+1
 2408 0ab8 4115      		cp r20,__zero_reg__
 2409 0aba 5105      		cpc r21,__zero_reg__
 2410 0abc 01F4      		brne .L151
 2412               	.LM343:
 2413 0abe 3093 0000 		sts delayms_count+1,r19
 2414 0ac2 2093 0000 		sts delayms_count,r18
1276:mavin.h       ****     for(;delay_ms>0;delay_ms--)
 2416               	.LM344:
 2417 0ac6 0197      		sbiw r24,1
 2418               	.L149:
1276:mavin.h       ****     for(;delay_ms>0;delay_ms--)
 2420               	.LM345:
 2421 0ac8 0097      		sbiw r24,0
 2422 0aca 01F4      		brne .L151
 2423               	/* epilogue start */
1280:mavin.h       ****     }
1281:mavin.h       **** }
 2425               	.LM346:
 2426 0acc 0895      		ret
 2428               	.Lscope14:
 2430               		.stabd	78,0,0
 2432               	.global	delay_cho
 2434               	delay_cho:
 2435               		.stabd	46,0,0
1282:mavin.h       **** //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@//
1283:mavin.h       **** 
1284:mavin.h       **** 
1285:mavin.h       **** void delay_cho(void)
1286:mavin.h       **** {
 2437               	.LM347:
 2438               	.LFBB15:
 2439               	/* prologue: function */
 2440               	/* frame size = 0 */
 2441               	/* stack size = 0 */
 2442               	.L__stack_usage = 0
 2443               	.L154:
1287:mavin.h       ****     while(delay_count > 0){
 2445               	.LM348:
 2446 0ace 8091 0000 		lds r24,delay_count
 2447 0ad2 9091 0000 		lds r25,delay_count+1
 2448 0ad6 0097      		sbiw r24,0
 2449 0ad8 01F4      		brne .L154
1288:mavin.h       ****     }
1289:mavin.h       **** 	delay_count = 16;
 2451               	.LM349:
 2452 0ada 80E1      		ldi r24,lo8(16)
 2453 0adc 90E0      		ldi r25,hi8(16)
 2454 0ade 9093 0000 		sts delay_count+1,r25
 2455 0ae2 8093 0000 		sts delay_count,r24
 2456               	/* epilogue start */
1290:mavin.h       **** }
 2458               	.LM350:
 2459 0ae6 0895      		ret
 2461               	.Lscope15:
 2463               		.stabd	78,0,0
 2466               	.global	delay
 2468               	delay:
 2469               		.stabd	46,0,0
1291:mavin.h       **** 
1292:mavin.h       **** //---------------------------------------------------------
1293:mavin.h       **** void delay(unsigned int delay_cnt)
1294:mavin.h       **** {
 2471               	.LM351:
 2472               	.LFBB16:
 2473               	/* prologue: function */
 2474               	/* frame size = 0 */
 2475               	/* stack size = 0 */
 2476               	.L__stack_usage = 0
1295:mavin.h       **** 	
1296:mavin.h       **** 	delay32us = 1;
 2478               	.LM352:
 2479 0ae8 21E0      		ldi r18,lo8(1)
 2480 0aea 30E0      		ldi r19,hi8(1)
 2481 0aec 3093 0000 		sts delay32us+1,r19
 2482 0af0 2093 0000 		sts delay32us,r18
1297:mavin.h       **** 	
1298:mavin.h       **** 	for(;delay_cnt>0;delay_cnt--)
 2484               	.LM353:
 2485 0af4 00C0      		rjmp .L157
 2486               	.L159:
1299:mavin.h       **** 	{
1300:mavin.h       **** 		while(delay32us>0);
 2488               	.LM354:
 2489 0af6 4091 0000 		lds r20,delay32us
 2490 0afa 5091 0000 		lds r21,delay32us+1
 2491 0afe 4115      		cp r20,__zero_reg__
 2492 0b00 5105      		cpc r21,__zero_reg__
 2493 0b02 01F4      		brne .L159
1301:mavin.h       **** 		delay32us = 1;
 2495               	.LM355:
 2496 0b04 3093 0000 		sts delay32us+1,r19
 2497 0b08 2093 0000 		sts delay32us,r18
1298:mavin.h       **** 	for(;delay_cnt>0;delay_cnt--)
 2499               	.LM356:
 2500 0b0c 0197      		sbiw r24,1
 2501               	.L157:
1298:mavin.h       **** 	for(;delay_cnt>0;delay_cnt--)
 2503               	.LM357:
 2504 0b0e 0097      		sbiw r24,0
 2505 0b10 01F4      		brne .L159
 2506               	/* epilogue start */
1302:mavin.h       **** 	}   
1303:mavin.h       **** 
1304:mavin.h       **** 
1305:mavin.h       **** }
 2508               	.LM358:
 2509 0b12 0895      		ret
 2511               	.Lscope16:
 2513               		.stabd	78,0,0
 2516               	.global	mSecDelay
 2518               	mSecDelay:
 2519               		.stabd	46,0,0
1306:mavin.h       **** 
1307:mavin.h       **** //---------------------------------------------------------
1308:mavin.h       **** void mSecDelay(unsigned int delay_ms)  
1309:mavin.h       **** {
 2521               	.LM359:
 2522               	.LFBB17:
 2523 0b14 CF93      		push r28
 2524 0b16 DF93      		push r29
 2525               	/* prologue: function */
 2526               	/* frame size = 0 */
 2527               	/* stack size = 2 */
 2528               	.L__stack_usage = 2
1310:mavin.h       **** 	
1311:mavin.h       ****     unsigned int delayms;
1312:mavin.h       ****     
1313:mavin.h       ****     delay_count = 16;
 2530               	.LM360:
 2531 0b18 20E1      		ldi r18,lo8(16)
 2532 0b1a 30E0      		ldi r19,hi8(16)
 2533 0b1c 3093 0000 		sts delay_count+1,r19
 2534 0b20 2093 0000 		sts delay_count,r18
1314:mavin.h       **** 		
1315:mavin.h       ****     delayms=delay_ms*100;
 2536               	.LM361:
 2537 0b24 24E6      		ldi r18,lo8(100)
 2538 0b26 30E0      		ldi r19,hi8(100)
 2539 0b28 829F      		mul r24,r18
 2540 0b2a E001      		movw r28,r0
 2541 0b2c 839F      		mul r24,r19
 2542 0b2e D00D      		add r29,r0
 2543 0b30 929F      		mul r25,r18
 2544 0b32 D00D      		add r29,r0
 2545 0b34 1124      		clr r1
1316:mavin.h       **** 		
1317:mavin.h       ****     for(;delayms>0;delayms--){
 2547               	.LM362:
 2548 0b36 00C0      		rjmp .L162
 2549               	.L163:
1318:mavin.h       ****         delay_cho();		//delay(920);
 2551               	.LM363:
 2552 0b38 0E94 0000 		call delay_cho
1317:mavin.h       ****     for(;delayms>0;delayms--){
 2554               	.LM364:
 2555 0b3c 2197      		sbiw r28,1
 2556               	.L162:
1317:mavin.h       ****     for(;delayms>0;delayms--){
 2558               	.LM365:
 2559 0b3e 2097      		sbiw r28,0
 2560 0b40 01F4      		brne .L163
 2561               	/* epilogue start */
1319:mavin.h       ****     }
1320:mavin.h       **** 	
1321:mavin.h       **** }
 2563               	.LM366:
 2564 0b42 DF91      		pop r29
 2565 0b44 CF91      		pop r28
 2566 0b46 0895      		ret
 2571               	.Lscope17:
 2573               		.stabd	78,0,0
 2575               	.global	lcd_port_init
 2577               	lcd_port_init:
 2578               		.stabd	46,0,0
1322:mavin.h       **** 
1323:mavin.h       **** //LCD 관련함수
1324:mavin.h       **** //////////////////////////////////////////////////////////////////////////////////////
1325:mavin.h       **** void lcd_port_init(void)
1326:mavin.h       **** {
 2580               	.LM367:
 2581               	.LFBB18:
 2582               	/* prologue: function */
 2583               	/* frame size = 0 */
 2584               	/* stack size = 0 */
 2585               	.L__stack_usage = 0
1327:mavin.h       ****     //Port Initialization
1328:mavin.h       ****     outp(0xFF, LCD_C_INOUT);
 2587               	.LM368:
 2588 0b48 8FEF      		ldi r24,lo8(-1)
 2589 0b4a 8093 6400 		sts 100,r24
1329:mavin.h       ****     outp(0xFF, LCD_D_INOUT);
 2591               	.LM369:
 2592 0b4e 8ABB      		out 58-32,r24
1330:mavin.h       ****     outp(0x00, LCD_CONTROL);
 2594               	.LM370:
 2595 0b50 1092 6500 		sts 101,__zero_reg__
1331:mavin.h       ****     outp(0x00, LCD_DATA);
 2597               	.LM371:
 2598 0b54 1BBA      		out 59-32,__zero_reg__
 2599               	/* epilogue start */
1332:mavin.h       **** }
 2601               	.LM372:
 2602 0b56 0895      		ret
 2604               	.Lscope18:
 2606               		.stabd	78,0,0
 2609               	.global	command
 2611               	command:
 2612               		.stabd	46,0,0
1333:mavin.h       **** 
1334:mavin.h       **** //---------------------------------------------------------
1335:mavin.h       **** void lcd_init(void)		
1336:mavin.h       **** {
1337:mavin.h       ****     delay(625);       // Wait for more than 30ms
1338:mavin.h       **** 	
1339:mavin.h       ****         command(LCD_SET_8); // Function Set
1340:mavin.h       **** 	delay(63);			// 2ms 지연
1341:mavin.h       **** 	command(LCD_SET_8);
1342:mavin.h       **** 	delay(63);
1343:mavin.h       **** 	command(LCD_D_ON);  // Display On/Off Control
1344:mavin.h       ****         command(LCD_E_N);   // Entry Mode Set
1345:mavin.h       **** 	command(LCD_D_CLR); // Display Clear
1346:mavin.h       ****         command(LCD_D_CLR);     // There must be!
1347:mavin.h       **** }
1348:mavin.h       **** 
1349:mavin.h       **** //---------------------------------------------------------
1350:mavin.h       **** void command(unsigned char cmd)
1351:mavin.h       **** {
 2614               	.LM373:
 2615               	.LFBB19:
 2616 0b58 1F93      		push r17
 2617 0b5a CF93      		push r28
 2618 0b5c DF93      		push r29
 2619               	/* prologue: function */
 2620               	/* frame size = 0 */
 2621               	/* stack size = 3 */
 2622               	.L__stack_usage = 3
 2623 0b5e 182F      		mov r17,r24
1352:mavin.h       ****     delay(5);
 2625               	.LM374:
 2626 0b60 85E0      		ldi r24,lo8(5)
 2627 0b62 90E0      		ldi r25,hi8(5)
 2628 0b64 0E94 0000 		call delay
1353:mavin.h       ****     outp(0x04, PORTG);  
 2630               	.LM375:
 2631 0b68 C5E6      		ldi r28,lo8(101)
 2632 0b6a D0E0      		ldi r29,hi8(101)
 2633 0b6c 84E0      		ldi r24,lo8(4)
 2634 0b6e 8883      		st Y,r24
1354:mavin.h       ****     delay(5);
 2636               	.LM376:
 2637 0b70 85E0      		ldi r24,lo8(5)
 2638 0b72 90E0      		ldi r25,hi8(5)
 2639 0b74 0E94 0000 		call delay
1355:mavin.h       ****     outp(cmd,LCD_DATA);
 2641               	.LM377:
 2642 0b78 1BBB      		out 59-32,r17
1356:mavin.h       ****     delay(5);
 2644               	.LM378:
 2645 0b7a 85E0      		ldi r24,lo8(5)
 2646 0b7c 90E0      		ldi r25,hi8(5)
 2647 0b7e 0E94 0000 		call delay
1357:mavin.h       ****     outp(0x00, PORTG);
 2649               	.LM379:
 2650 0b82 1882      		st Y,__zero_reg__
1358:mavin.h       ****     delay(5);
 2652               	.LM380:
 2653 0b84 85E0      		ldi r24,lo8(5)
 2654 0b86 90E0      		ldi r25,hi8(5)
 2655 0b88 0E94 0000 		call delay
 2656               	/* epilogue start */
1359:mavin.h       **** }
 2658               	.LM381:
 2659 0b8c DF91      		pop r29
 2660 0b8e CF91      		pop r28
 2661 0b90 1F91      		pop r17
 2662 0b92 0895      		ret
 2664               	.Lscope19:
 2666               		.stabd	78,0,0
 2668               	.global	lcd_init
 2670               	lcd_init:
 2671               		.stabd	46,0,0
1336:mavin.h       **** {
 2673               	.LM382:
 2674               	.LFBB20:
 2675               	/* prologue: function */
 2676               	/* frame size = 0 */
 2677               	/* stack size = 0 */
 2678               	.L__stack_usage = 0
1337:mavin.h       ****     delay(625);       // Wait for more than 30ms
 2680               	.LM383:
 2681 0b94 81E7      		ldi r24,lo8(625)
 2682 0b96 92E0      		ldi r25,hi8(625)
 2683 0b98 0E94 0000 		call delay
1339:mavin.h       ****         command(LCD_SET_8); // Function Set
 2685               	.LM384:
 2686 0b9c 88E3      		ldi r24,lo8(56)
 2687 0b9e 0E94 0000 		call command
1340:mavin.h       **** 	delay(63);			// 2ms 지연
 2689               	.LM385:
 2690 0ba2 8FE3      		ldi r24,lo8(63)
 2691 0ba4 90E0      		ldi r25,hi8(63)
 2692 0ba6 0E94 0000 		call delay
1341:mavin.h       **** 	command(LCD_SET_8);
 2694               	.LM386:
 2695 0baa 88E3      		ldi r24,lo8(56)
 2696 0bac 0E94 0000 		call command
1342:mavin.h       **** 	delay(63);
 2698               	.LM387:
 2699 0bb0 8FE3      		ldi r24,lo8(63)
 2700 0bb2 90E0      		ldi r25,hi8(63)
 2701 0bb4 0E94 0000 		call delay
1343:mavin.h       **** 	command(LCD_D_ON);  // Display On/Off Control
 2703               	.LM388:
 2704 0bb8 8CE0      		ldi r24,lo8(12)
 2705 0bba 0E94 0000 		call command
1344:mavin.h       ****         command(LCD_E_N);   // Entry Mode Set
 2707               	.LM389:
 2708 0bbe 86E0      		ldi r24,lo8(6)
 2709 0bc0 0E94 0000 		call command
1345:mavin.h       **** 	command(LCD_D_CLR); // Display Clear
 2711               	.LM390:
 2712 0bc4 81E0      		ldi r24,lo8(1)
 2713 0bc6 0E94 0000 		call command
1346:mavin.h       ****         command(LCD_D_CLR);     // There must be!
 2715               	.LM391:
 2716 0bca 81E0      		ldi r24,lo8(1)
 2717 0bcc 0E94 0000 		call command
 2718               	/* epilogue start */
1347:mavin.h       **** }
 2720               	.LM392:
 2721 0bd0 0895      		ret
 2723               	.Lscope20:
 2725               		.stabd	78,0,0
 2728               	.global	lcd_out
 2730               	lcd_out:
 2731               		.stabd	46,0,0
1360:mavin.h       **** 
1361:mavin.h       **** //---------------------------------------------------------
1362:mavin.h       **** void lcd_out(unsigned char data)
1363:mavin.h       **** {
 2733               	.LM393:
 2734               	.LFBB21:
 2735 0bd2 1F93      		push r17
 2736 0bd4 CF93      		push r28
 2737 0bd6 DF93      		push r29
 2738               	/* prologue: function */
 2739               	/* frame size = 0 */
 2740               	/* stack size = 3 */
 2741               	.L__stack_usage = 3
 2742 0bd8 182F      		mov r17,r24
1364:mavin.h       ****     delay(5);
 2744               	.LM394:
 2745 0bda 85E0      		ldi r24,lo8(5)
 2746 0bdc 90E0      		ldi r25,hi8(5)
 2747 0bde 0E94 0000 		call delay
1365:mavin.h       ****     outp(0x05, PORTG);
 2749               	.LM395:
 2750 0be2 C5E6      		ldi r28,lo8(101)
 2751 0be4 D0E0      		ldi r29,hi8(101)
 2752 0be6 85E0      		ldi r24,lo8(5)
 2753 0be8 8883      		st Y,r24
1366:mavin.h       ****     delay(5);
 2755               	.LM396:
 2756 0bea 85E0      		ldi r24,lo8(5)
 2757 0bec 90E0      		ldi r25,hi8(5)
 2758 0bee 0E94 0000 		call delay
1367:mavin.h       ****     outp(data,LCD_DATA);
 2760               	.LM397:
 2761 0bf2 1BBB      		out 59-32,r17
1368:mavin.h       ****     delay(5);
 2763               	.LM398:
 2764 0bf4 85E0      		ldi r24,lo8(5)
 2765 0bf6 90E0      		ldi r25,hi8(5)
 2766 0bf8 0E94 0000 		call delay
1369:mavin.h       ****     outp(0x01, PORTG);
 2768               	.LM399:
 2769 0bfc 81E0      		ldi r24,lo8(1)
 2770 0bfe 8883      		st Y,r24
1370:mavin.h       ****     delay(5);
 2772               	.LM400:
 2773 0c00 85E0      		ldi r24,lo8(5)
 2774 0c02 90E0      		ldi r25,hi8(5)
 2775 0c04 0E94 0000 		call delay
 2776               	/* epilogue start */
1371:mavin.h       **** }
 2778               	.LM401:
 2779 0c08 DF91      		pop r29
 2780 0c0a CF91      		pop r28
 2781 0c0c 1F91      		pop r17
 2782 0c0e 0895      		ret
 2784               	.Lscope21:
 2786               		.stabd	78,0,0
 2790               	.global	lcd_position
 2792               	lcd_position:
 2793               		.stabd	46,0,0
1372:mavin.h       **** 
1373:mavin.h       **** //---------------------------------------------------------
1374:mavin.h       **** void lcd_position(unsigned char row, unsigned char col)
1375:mavin.h       **** {
 2795               	.LM402:
 2796               	.LFBB22:
 2797               	/* prologue: function */
 2798               	/* frame size = 0 */
 2799               	/* stack size = 0 */
 2800               	.L__stack_usage = 0
1376:mavin.h       ****     char addr;
1377:mavin.h       ****     addr=0x80+0x40*(row-1)+(col-1);
 2802               	.LM403:
 2803 0c10 8295      		swap r24
 2804 0c12 880F      		lsl r24
 2805 0c14 880F      		lsl r24
 2806 0c16 807C      		andi r24,lo8(-64)
 2807 0c18 680F      		add r22,r24
1378:mavin.h       ****     command(addr);
 2809               	.LM404:
 2810 0c1a 862F      		mov r24,r22
 2811 0c1c 815C      		subi r24,lo8(-(63))
 2812 0c1e 0E94 0000 		call command
 2813               	/* epilogue start */
1379:mavin.h       **** }
 2815               	.LM405:
 2816 0c22 0895      		ret
 2818               	.Lscope22:
 2820               		.stabd	78,0,0
 2825               	.global	lcd_char_out
 2827               	lcd_char_out:
 2828               		.stabd	46,0,0
1380:mavin.h       **** 
1381:mavin.h       **** //---------------------------------------------------------
1382:mavin.h       **** void lcd_char_out(unsigned char row, unsigned char col, unsigned char data)
1383:mavin.h       **** {
 2830               	.LM406:
 2831               	.LFBB23:
 2832 0c24 DF93      		push r29
 2833 0c26 CF93      		push r28
 2834 0c28 0F92      		push __tmp_reg__
 2835 0c2a CDB7      		in r28,__SP_L__
 2836 0c2c DEB7      		in r29,__SP_H__
 2837               	/* prologue: function */
 2838               	/* frame size = 1 */
 2839               	/* stack size = 3 */
 2840               	.L__stack_usage = 3
1384:mavin.h       ****     lcd_position(row,col);
 2842               	.LM407:
 2843 0c2e 4983      		std Y+1,r20
 2844 0c30 0E94 0000 		call lcd_position
1385:mavin.h       ****     lcd_out(data);
 2846               	.LM408:
 2847 0c34 4981      		ldd r20,Y+1
 2848 0c36 842F      		mov r24,r20
 2849 0c38 0E94 0000 		call lcd_out
 2850               	/* epilogue start */
1386:mavin.h       **** }
 2852               	.LM409:
 2853 0c3c 0F90      		pop __tmp_reg__
 2854 0c3e CF91      		pop r28
 2855 0c40 DF91      		pop r29
 2856 0c42 0895      		ret
 2858               	.Lscope23:
 2860               		.stabd	78,0,0
 2864               	.global	lcd_str_out
 2866               	lcd_str_out:
 2867               		.stabd	46,0,0
1387:mavin.h       **** 
1388:mavin.h       **** //---------------------------------------------------------
1389:mavin.h       **** void lcd_str_out(unsigned char row, unsigned char col, unsigned char *msg)
1390:mavin.h       **** {
 2869               	.LM410:
 2870               	.LFBB24:
 2871 0c44 EF92      		push r14
 2872 0c46 FF92      		push r15
 2873 0c48 0F93      		push r16
 2874 0c4a 1F93      		push r17
 2875 0c4c DF93      		push r29
 2876 0c4e CF93      		push r28
 2877 0c50 00D0      		rcall .
 2878 0c52 CDB7      		in r28,__SP_L__
 2879 0c54 DEB7      		in r29,__SP_H__
 2880               	/* prologue: function */
 2881               	/* frame size = 2 */
 2882               	/* stack size = 8 */
 2883               	.L__stack_usage = 8
1391:mavin.h       ****     lcd_position(row,col);
 2885               	.LM411:
 2886 0c56 4983      		std Y+1,r20
 2887 0c58 5A83      		std Y+2,r21
 2888 0c5a 0E94 0000 		call lcd_position
 2889 0c5e 4981      		ldd r20,Y+1
 2890 0c60 5A81      		ldd r21,Y+2
 2891 0c62 8A01      		movw r16,r20
1392:mavin.h       ****     while(*msg){
 2893               	.LM412:
 2894 0c64 00C0      		rjmp .L171
 2895               	.L172:
1393:mavin.h       ****         lcd_out(*(msg++));
 2897               	.LM413:
 2898 0c66 0E94 0000 		call lcd_out
 2899               	.L171:
1392:mavin.h       ****     while(*msg){
 2901               	.LM414:
 2902 0c6a F801      		movw r30,r16
 2903 0c6c 8191      		ld r24,Z+
 2904 0c6e 8F01      		movw r16,r30
 2905 0c70 8823      		tst r24
 2906 0c72 01F4      		brne .L172
 2907               	/* epilogue start */
1394:mavin.h       ****     }
1395:mavin.h       **** }
 2909               	.LM415:
 2910 0c74 0F90      		pop __tmp_reg__
 2911 0c76 0F90      		pop __tmp_reg__
 2912 0c78 CF91      		pop r28
 2913 0c7a DF91      		pop r29
 2914 0c7c 1F91      		pop r17
 2915 0c7e 0F91      		pop r16
 2916 0c80 FF90      		pop r15
 2917 0c82 EF90      		pop r14
 2918 0c84 0895      		ret
 2920               	.Lscope24:
 2922               		.stabd	78,0,0
 2925               	.global	lcd_line_clr
 2927               	lcd_line_clr:
 2928               		.stabd	46,0,0
1396:mavin.h       **** 
1397:mavin.h       **** //---------------------------------------------------------
1398:mavin.h       **** void lcd_line_clr(unsigned char line)
1399:mavin.h       **** {
 2930               	.LM416:
 2931               	.LFBB25:
 2932 0c86 1F93      		push r17
 2933               	/* prologue: function */
 2934               	/* frame size = 0 */
 2935               	/* stack size = 1 */
 2936               	.L__stack_usage = 1
1400:mavin.h       ****     unsigned char i;
1401:mavin.h       ****     switch(line){
 2938               	.LM417:
 2939 0c88 8230      		cpi r24,lo8(2)
 2940 0c8a 01F0      		breq .L176
 2941 0c8c 8330      		cpi r24,lo8(3)
 2942 0c8e 01F0      		breq .L177
 2943 0c90 8130      		cpi r24,lo8(1)
 2944 0c92 01F4      		brne .L173
 2946               	.LM418:
 2947 0c94 10E0      		ldi r17,lo8(0)
 2948               	.L178:
1402:mavin.h       **** 	case 1:
1403:mavin.h       **** 		for(i=0;i<LCD_SIZE;i++)
1404:mavin.h       **** 			lcd_char_out(1,i+1,' ');
 2950               	.LM419:
 2951 0c96 1F5F      		subi r17,lo8(-(1))
 2952 0c98 81E0      		ldi r24,lo8(1)
 2953 0c9a 612F      		mov r22,r17
 2954 0c9c 40E2      		ldi r20,lo8(32)
 2955 0c9e 0E94 0000 		call lcd_char_out
1403:mavin.h       **** 		for(i=0;i<LCD_SIZE;i++)
 2957               	.LM420:
 2958 0ca2 1830      		cpi r17,lo8(8)
 2959 0ca4 01F4      		brne .L178
 2960 0ca6 00C0      		rjmp .L173
 2961               	.L176:
1401:mavin.h       ****     switch(line){
 2963               	.LM421:
 2964 0ca8 10E0      		ldi r17,lo8(0)
 2965               	.L179:
1405:mavin.h       **** 		break;
1406:mavin.h       **** 	case 2:
1407:mavin.h       **** 		for(i=0;i<LCD_SIZE;i++)
1408:mavin.h       **** 			lcd_char_out(2,i+1,' ');
 2967               	.LM422:
 2968 0caa 1F5F      		subi r17,lo8(-(1))
 2969 0cac 82E0      		ldi r24,lo8(2)
 2970 0cae 612F      		mov r22,r17
 2971 0cb0 40E2      		ldi r20,lo8(32)
 2972 0cb2 0E94 0000 		call lcd_char_out
1407:mavin.h       **** 		for(i=0;i<LCD_SIZE;i++)
 2974               	.LM423:
 2975 0cb6 1830      		cpi r17,lo8(8)
 2976 0cb8 01F4      		brne .L179
 2977 0cba 00C0      		rjmp .L173
 2978               	.L177:
1401:mavin.h       ****     switch(line){
 2980               	.LM424:
 2981 0cbc 10E0      		ldi r17,lo8(0)
 2982               	.L180:
1409:mavin.h       **** 		break;
1410:mavin.h       **** 	case 3:
1411:mavin.h       **** 		for(i=0;i<LCD_SIZE;i++)
1412:mavin.h       **** 			lcd_char_out(1,i+1,' ');
 2984               	.LM425:
 2985 0cbe 1F5F      		subi r17,lo8(-(1))
 2986 0cc0 81E0      		ldi r24,lo8(1)
 2987 0cc2 612F      		mov r22,r17
 2988 0cc4 40E2      		ldi r20,lo8(32)
 2989 0cc6 0E94 0000 		call lcd_char_out
1411:mavin.h       **** 		for(i=0;i<LCD_SIZE;i++)
 2991               	.LM426:
 2992 0cca 1830      		cpi r17,lo8(8)
 2993 0ccc 01F4      		brne .L180
 2994 0cce 10E0      		ldi r17,lo8(0)
 2995               	.L181:
1413:mavin.h       **** 		for(i=0;i<LCD_SIZE;i++)
1414:mavin.h       **** 			lcd_char_out(2,i+1,' ');
 2997               	.LM427:
 2998 0cd0 1F5F      		subi r17,lo8(-(1))
 2999 0cd2 82E0      		ldi r24,lo8(2)
 3000 0cd4 612F      		mov r22,r17
 3001 0cd6 40E2      		ldi r20,lo8(32)
 3002 0cd8 0E94 0000 		call lcd_char_out
1413:mavin.h       **** 		for(i=0;i<LCD_SIZE;i++)
 3004               	.LM428:
 3005 0cdc 1830      		cpi r17,lo8(8)
 3006 0cde 01F4      		brne .L181
 3007               	.L173:
 3008               	/* epilogue start */
1415:mavin.h       **** 		break;
1416:mavin.h       ****     }
1417:mavin.h       **** }
 3010               	.LM429:
 3011 0ce0 1F91      		pop r17
 3012 0ce2 0895      		ret
 3014               	.Lscope25:
 3016               		.stabd	78,0,0
 3019               	.global	lcd_shift
 3021               	lcd_shift:
 3022               		.stabd	46,0,0
1418:mavin.h       **** 
1419:mavin.h       **** //---------------------------------------------------------
1420:mavin.h       **** void lcd_shift(unsigned char RL)
1421:mavin.h       **** {
 3024               	.LM430:
 3025               	.LFBB26:
 3026               	/* prologue: function */
 3027               	/* frame size = 0 */
 3028               	/* stack size = 0 */
 3029               	.L__stack_usage = 0
1422:mavin.h       ****     if(RL==LCD_RIGHT)
 3031               	.LM431:
 3032 0ce4 8823      		tst r24
 3033 0ce6 01F4      		brne .L187
1423:mavin.h       ****         command(LCD_R_SHF);
 3035               	.LM432:
 3036 0ce8 8CE1      		ldi r24,lo8(28)
 3037 0cea 00C0      		rjmp .L189
 3038               	.L187:
1424:mavin.h       ****     else
1425:mavin.h       ****         command(LCD_L_SHF);
 3040               	.LM433:
 3041 0cec 88E1      		ldi r24,lo8(24)
 3042               	.L189:
 3043 0cee 0E94 0000 		call command
 3044 0cf2 0895      		ret
 3046               	.Lscope26:
 3048               		.stabd	78,0,0
 3051               	.global	Beep
 3053               	Beep:
 3054               		.stabd	46,0,0
1426:mavin.h       **** }
1427:mavin.h       **** 
1428:mavin.h       **** //---------------------------------------------------------
1429:mavin.h       **** u08 GetCds(int pos)
1430:mavin.h       **** {
1431:mavin.h       ****     u08 tempCds;
1432:mavin.h       ****    
1433:mavin.h       **** 	switch(pos){
1434:mavin.h       **** 		case 1:
1435:mavin.h       **** 			ADC_CHANNEL(AD_0);				// Cds value => ADC
1436:mavin.h       **** 			break;
1437:mavin.h       **** 		case 2:
1438:mavin.h       **** 			ADC_CHANNEL(AD_1);				// Cds value => ADC 
1439:mavin.h       **** 			break;
1440:mavin.h       **** 		case 3:
1441:mavin.h       **** 			ADC_CHANNEL(AD_2);				// Cds value => ADC
1442:mavin.h       **** 			break;
1443:mavin.h       **** 		case 4:
1444:mavin.h       **** 			ADC_CHANNEL(AD_3);				// Cds value => ADC
1445:mavin.h       **** 			break;
1446:mavin.h       **** 		
1447:mavin.h       **** 		case 5:
1448:mavin.h       **** 			ADC_CHANNEL(AD_4);				// Cds value => ADC
1449:mavin.h       **** 			break;
1450:mavin.h       **** 		
1451:mavin.h       **** 		default:
1452:mavin.h       **** 			break;	
1453:mavin.h       **** 	}
1454:mavin.h       **** 		
1455:mavin.h       **** 	tempCds = GetADC();				// AD start
1456:mavin.h       **** 
1457:mavin.h       **** 	if(tempCds < 20){								//2007.06.27 수정
1458:mavin.h       **** 	    return 0;   //Cds Sensor Read Failed
1459:mavin.h       **** 	}else if(tempCds <= ILLUMINANCE_LV1){
1460:mavin.h       **** 	    return 1;   
1461:mavin.h       **** 	}else if(tempCds <= ILLUMINANCE_LV2){
1462:mavin.h       **** 	    return 2;   
1463:mavin.h       **** 	}else if(tempCds <= ILLUMINANCE_LV3){
1464:mavin.h       **** 	    return 3;
1465:mavin.h       **** 	}else if(tempCds <= ILLUMINANCE_LV4){
1466:mavin.h       **** 	    return 4;   
1467:mavin.h       **** 	}else{
1468:mavin.h       **** 		return 5;					//2007.06.27 수정
1469:mavin.h       **** 	}
1470:mavin.h       **** }
1471:mavin.h       **** 
1472:mavin.h       **** //buzzer
1473:mavin.h       **** //////////////////////////////////////////////////////////////////////////////////////////////
1474:mavin.h       **** void Beep(int position)
1475:mavin.h       **** {
 3056               	.LM434:
 3057               	.LFBB27:
 3058 0cf4 CF93      		push r28
 3059 0cf6 DF93      		push r29
 3060               	/* prologue: function */
 3061               	/* frame size = 0 */
 3062               	/* stack size = 2 */
 3063               	.L__stack_usage = 2
1476:mavin.h       **** 	switch(position)
 3065               	.LM435:
 3066 0cf8 8330      		cpi r24,3
 3067 0cfa 9105      		cpc r25,__zero_reg__
 3068 0cfc 01F4      		brne .+2
 3069 0cfe 00C0      		rjmp .L194
 3070 0d00 8430      		cpi r24,4
 3071 0d02 9105      		cpc r25,__zero_reg__
 3072 0d04 04F4      		brge .L197
 3073 0d06 8130      		cpi r24,1
 3074 0d08 9105      		cpc r25,__zero_reg__
 3075 0d0a 01F0      		breq .L192
 3076 0d0c 8230      		cpi r24,2
 3077 0d0e 9105      		cpc r25,__zero_reg__
 3078 0d10 01F0      		breq .+2
 3079 0d12 00C0      		rjmp .L190
 3080 0d14 00C0      		rjmp .L208
 3081               	.L197:
 3082 0d16 8430      		cpi r24,4
 3083 0d18 9105      		cpc r25,__zero_reg__
 3084 0d1a 01F4      		brne .+2
 3085 0d1c 00C0      		rjmp .L195
 3086 0d1e 8530      		cpi r24,5
 3087 0d20 9105      		cpc r25,__zero_reg__
 3088 0d22 01F0      		breq .+2
 3089 0d24 00C0      		rjmp .L190
 3090 0d26 00C0      		rjmp .L209
 3091               	.L192:
1477:mavin.h       **** 	{
1478:mavin.h       **** 	case 1:
1479:mavin.h       **** 		sbi(DDRB,0);
 3093               	.LM436:
 3094 0d28 B89A      		sbi 55-32,0
1480:mavin.h       **** 		sbi(DDRB,1);
 3096               	.LM437:
 3097 0d2a B99A      		sbi 55-32,1
1481:mavin.h       **** 		sbi(DDRB,2);
 3099               	.LM438:
 3100 0d2c BA9A      		sbi 55-32,2
1482:mavin.h       **** 		sbi(DDRB,3);
 3102               	.LM439:
 3103 0d2e BB9A      		sbi 55-32,3
 3104 0d30 CCE2      		ldi r28,lo8(300)
 3105 0d32 D1E0      		ldi r29,hi8(300)
 3106               	.L198:
 3107               	.LBB41:
1483:mavin.h       **** 				
1484:mavin.h       **** 		for(int i=0;i<300;i++){
1485:mavin.h       **** 			sbi(PORTB,1);	//buzzer ON
 3109               	.LM440:
 3110 0d34 C19A      		sbi 56-32,1
1486:mavin.h       **** 			sbi(PORTB,0);	//LED ON			
 3112               	.LM441:
 3113 0d36 C09A      		sbi 56-32,0
1487:mavin.h       **** 			delay(16);
 3115               	.LM442:
 3116 0d38 80E1      		ldi r24,lo8(16)
 3117 0d3a 90E0      		ldi r25,hi8(16)
 3118 0d3c 0E94 0000 		call delay
1488:mavin.h       **** 				
1489:mavin.h       **** 			cbi(PORTB,1);	//buzzer OFF
 3120               	.LM443:
 3121 0d40 C198      		cbi 56-32,1
1490:mavin.h       **** 			cbi(PORTB,0);	//LED OFF
 3123               	.LM444:
 3124 0d42 C098      		cbi 56-32,0
1491:mavin.h       **** 			delay(16);
 3126               	.LM445:
 3127 0d44 80E1      		ldi r24,lo8(16)
 3128 0d46 90E0      		ldi r25,hi8(16)
 3129 0d48 0E94 0000 		call delay
 3130 0d4c 2197      		sbiw r28,1
1484:mavin.h       **** 		for(int i=0;i<300;i++){
 3132               	.LM446:
 3133 0d4e 01F4      		brne .L198
 3134 0d50 00C0      		rjmp .L190
 3135               	.L208:
 3136               	.LBE41:
1492:mavin.h       **** 		}	
1493:mavin.h       **** 
1494:mavin.h       **** 		break;
1495:mavin.h       **** 		
1496:mavin.h       **** 	case 2:
1497:mavin.h       **** 		sbi(DDRD,0);
 3138               	.LM447:
 3139 0d52 889A      		sbi 49-32,0
1498:mavin.h       **** 		sbi(DDRD,1);
 3141               	.LM448:
 3142 0d54 899A      		sbi 49-32,1
1499:mavin.h       **** 		sbi(DDRD,2);
 3144               	.LM449:
 3145 0d56 8A9A      		sbi 49-32,2
1500:mavin.h       **** 		sbi(DDRD,3);
 3147               	.LM450:
 3148 0d58 8B9A      		sbi 49-32,3
 3149 0d5a CCE2      		ldi r28,lo8(300)
 3150 0d5c D1E0      		ldi r29,hi8(300)
 3151               	.L199:
 3152               	.LBB42:
1501:mavin.h       **** 		
1502:mavin.h       **** 		for(int i=0;i<300;i++){
1503:mavin.h       **** 			sbi(PORTD,1);	//buzzer ON
 3154               	.LM451:
 3155 0d5e 919A      		sbi 50-32,1
1504:mavin.h       **** 			sbi(PORTD,0);	//LED ON
 3157               	.LM452:
 3158 0d60 909A      		sbi 50-32,0
1505:mavin.h       **** 			delay(16);
 3160               	.LM453:
 3161 0d62 80E1      		ldi r24,lo8(16)
 3162 0d64 90E0      		ldi r25,hi8(16)
 3163 0d66 0E94 0000 		call delay
1506:mavin.h       **** 			
1507:mavin.h       **** 			cbi(PORTD,1);	//buzzer OFF
 3165               	.LM454:
 3166 0d6a 9198      		cbi 50-32,1
1508:mavin.h       **** 			cbi(PORTD,0);	//LED OFF
 3168               	.LM455:
 3169 0d6c 9098      		cbi 50-32,0
1509:mavin.h       **** 			delay(16);
 3171               	.LM456:
 3172 0d6e 80E1      		ldi r24,lo8(16)
 3173 0d70 90E0      		ldi r25,hi8(16)
 3174 0d72 0E94 0000 		call delay
 3175 0d76 2197      		sbiw r28,1
1502:mavin.h       **** 		for(int i=0;i<300;i++){
 3177               	.LM457:
 3178 0d78 01F4      		brne .L199
 3179 0d7a 00C0      		rjmp .L190
 3180               	.L194:
 3181               	.LBE42:
1510:mavin.h       **** 		}
1511:mavin.h       **** 
1512:mavin.h       **** 		break;
1513:mavin.h       **** 		
1514:mavin.h       **** 	case 3:
1515:mavin.h       **** 		sbi(DDRD,4);
 3183               	.LM458:
 3184 0d7c 8C9A      		sbi 49-32,4
1516:mavin.h       **** 		sbi(DDRD,5);
 3186               	.LM459:
 3187 0d7e 8D9A      		sbi 49-32,5
1517:mavin.h       **** 		sbi(DDRD,6);
 3189               	.LM460:
 3190 0d80 8E9A      		sbi 49-32,6
1518:mavin.h       **** 		sbi(DDRD,7);
 3192               	.LM461:
 3193 0d82 8F9A      		sbi 49-32,7
 3194 0d84 CCE2      		ldi r28,lo8(300)
 3195 0d86 D1E0      		ldi r29,hi8(300)
 3196               	.L200:
 3197               	.LBB43:
1519:mavin.h       **** 		
1520:mavin.h       **** 		for(int i=0;i<300;i++){
1521:mavin.h       **** 			sbi(PORTD,5);	//buzzer ON
 3199               	.LM462:
 3200 0d88 959A      		sbi 50-32,5
1522:mavin.h       **** 			sbi(PORTD,4);	//LED ON			
 3202               	.LM463:
 3203 0d8a 949A      		sbi 50-32,4
1523:mavin.h       **** 			delay(16);
 3205               	.LM464:
 3206 0d8c 80E1      		ldi r24,lo8(16)
 3207 0d8e 90E0      		ldi r25,hi8(16)
 3208 0d90 0E94 0000 		call delay
1524:mavin.h       **** 
1525:mavin.h       **** 			cbi(PORTD,5);	//buzzer OFF
 3210               	.LM465:
 3211 0d94 9598      		cbi 50-32,5
1526:mavin.h       **** 			cbi(PORTD,4);	//LED OFF
 3213               	.LM466:
 3214 0d96 9498      		cbi 50-32,4
1527:mavin.h       **** 			delay(16);
 3216               	.LM467:
 3217 0d98 80E1      		ldi r24,lo8(16)
 3218 0d9a 90E0      		ldi r25,hi8(16)
 3219 0d9c 0E94 0000 		call delay
 3220 0da0 2197      		sbiw r28,1
1520:mavin.h       **** 		for(int i=0;i<300;i++){
 3222               	.LM468:
 3223 0da2 01F4      		brne .L200
 3224 0da4 00C0      		rjmp .L190
 3225               	.L195:
 3226               	.LBE43:
1528:mavin.h       **** 		}
1529:mavin.h       **** 
1530:mavin.h       **** 		break;
1531:mavin.h       **** 		
1532:mavin.h       **** 	case 4:	
1533:mavin.h       **** 		sbi(DDRE,0);
 3228               	.LM469:
 3229 0da6 109A      		sbi 34-32,0
1534:mavin.h       **** 		sbi(DDRE,1);
 3231               	.LM470:
 3232 0da8 119A      		sbi 34-32,1
1535:mavin.h       **** 		sbi(DDRE,2);
 3234               	.LM471:
 3235 0daa 129A      		sbi 34-32,2
1536:mavin.h       **** 		sbi(DDRE,3);
 3237               	.LM472:
 3238 0dac 139A      		sbi 34-32,3
 3239 0dae CCE2      		ldi r28,lo8(300)
 3240 0db0 D1E0      		ldi r29,hi8(300)
 3241               	.L201:
 3242               	.LBB44:
1537:mavin.h       **** 
1538:mavin.h       **** 		for(int i=0;i<300;i++){
1539:mavin.h       **** 			sbi(PORTE,1);	//buzzer ON
 3244               	.LM473:
 3245 0db2 199A      		sbi 35-32,1
1540:mavin.h       **** 			sbi(PORTE,0);	//LED ON
 3247               	.LM474:
 3248 0db4 189A      		sbi 35-32,0
1541:mavin.h       **** 			delay(16);
 3250               	.LM475:
 3251 0db6 80E1      		ldi r24,lo8(16)
 3252 0db8 90E0      		ldi r25,hi8(16)
 3253 0dba 0E94 0000 		call delay
1542:mavin.h       **** 
1543:mavin.h       **** 			cbi(PORTE,1);	//buzzer OFF
 3255               	.LM476:
 3256 0dbe 1998      		cbi 35-32,1
1544:mavin.h       **** 			cbi(PORTE,0);	//LED OFF
 3258               	.LM477:
 3259 0dc0 1898      		cbi 35-32,0
1545:mavin.h       **** 			delay(16);
 3261               	.LM478:
 3262 0dc2 80E1      		ldi r24,lo8(16)
 3263 0dc4 90E0      		ldi r25,hi8(16)
 3264 0dc6 0E94 0000 		call delay
 3265 0dca 2197      		sbiw r28,1
1538:mavin.h       **** 		for(int i=0;i<300;i++){
 3267               	.LM479:
 3268 0dcc 01F4      		brne .L201
 3269 0dce 00C0      		rjmp .L190
 3270               	.L209:
 3271               	.LBE44:
1546:mavin.h       **** 		}
1547:mavin.h       **** 
1548:mavin.h       **** 		break;
1549:mavin.h       **** 		
1550:mavin.h       **** 	case 5:
1551:mavin.h       **** 		sbi(DDRG,3);
 3273               	.LM480:
 3274 0dd0 8091 6400 		lds r24,100
 3275 0dd4 8860      		ori r24,lo8(8)
 3276 0dd6 8093 6400 		sts 100,r24
1552:mavin.h       **** 		cbi(PORTG,3);
 3278               	.LM481:
 3279 0dda 8091 6500 		lds r24,101
 3280 0dde 877F      		andi r24,lo8(-9)
 3281 0de0 8093 6500 		sts 101,r24
1553:mavin.h       **** 		sbi(DDRE,7);
 3283               	.LM482:
 3284 0de4 179A      		sbi 34-32,7
1554:mavin.h       **** 		cbi(PORTE,7);
 3286               	.LM483:
 3287 0de6 1F98      		cbi 35-32,7
 3288 0de8 CCE2      		ldi r28,lo8(300)
 3289 0dea D1E0      		ldi r29,hi8(300)
 3290               	.L202:
 3291               	.LBB45:
1555:mavin.h       **** 		
1556:mavin.h       **** 		for(int i=0;i<300;i++){
1557:mavin.h       **** 			sbi(PORTG,3);	//buzzer ON
 3293               	.LM484:
 3294 0dec 8091 6500 		lds r24,101
 3295 0df0 8860      		ori r24,lo8(8)
 3296 0df2 8093 6500 		sts 101,r24
1558:mavin.h       **** 			sbi(PORTE,7);	//LED ON
 3298               	.LM485:
 3299 0df6 1F9A      		sbi 35-32,7
1559:mavin.h       **** 			delay(16);
 3301               	.LM486:
 3302 0df8 80E1      		ldi r24,lo8(16)
 3303 0dfa 90E0      		ldi r25,hi8(16)
 3304 0dfc 0E94 0000 		call delay
1560:mavin.h       **** 	
1561:mavin.h       **** 			cbi(PORTG,3);	//buzzer OFF
 3306               	.LM487:
 3307 0e00 8091 6500 		lds r24,101
 3308 0e04 877F      		andi r24,lo8(-9)
 3309 0e06 8093 6500 		sts 101,r24
1562:mavin.h       **** 			cbi(PORTE,7);	//LED OFF
 3311               	.LM488:
 3312 0e0a 1F98      		cbi 35-32,7
1563:mavin.h       **** 			delay(16);
 3314               	.LM489:
 3315 0e0c 80E1      		ldi r24,lo8(16)
 3316 0e0e 90E0      		ldi r25,hi8(16)
 3317 0e10 0E94 0000 		call delay
 3318 0e14 2197      		sbiw r28,1
1556:mavin.h       **** 		for(int i=0;i<300;i++){
 3320               	.LM490:
 3321 0e16 01F4      		brne .L202
 3322               	.L190:
 3323               	/* epilogue start */
 3324               	.LBE45:
1564:mavin.h       **** 		}
1565:mavin.h       **** 
1566:mavin.h       **** 		break;
1567:mavin.h       **** 		
1568:mavin.h       **** 	default:
1569:mavin.h       **** 		break;
1570:mavin.h       **** 	
1571:mavin.h       **** 	}
1572:mavin.h       **** 	
1573:mavin.h       **** }
 3326               	.LM491:
 3327 0e18 DF91      		pop r29
 3328 0e1a CF91      		pop r28
 3329 0e1c 0895      		ret
 3331               	.Lscope27:
 3333               		.stabd	78,0,0
 3335               	.global	InitADC
 3337               	InitADC:
 3338               		.stabd	46,0,0
1574:mavin.h       **** 
1575:mavin.h       **** 
1576:mavin.h       **** void InitADC(void)
1577:mavin.h       **** {
 3340               	.LM492:
 3341               	.LFBB28:
 3342               	/* prologue: function */
 3343               	/* frame size = 0 */
 3344               	/* stack size = 0 */
 3345               	.L__stack_usage = 0
1578:mavin.h       **** 	
1579:mavin.h       ****     outp(BV(ADIF)|BV(ADEN)|BV(ADIE)|BV(ADPS0),ADCSRA);     
 3347               	.LM493:
 3348 0e1e 89E9      		ldi r24,lo8(-103)
 3349 0e20 86B9      		out 38-32,r24
1580:mavin.h       ****     outp(0,ADMUX);      //default channel 선택	
 3351               	.LM494:
 3352 0e22 17B8      		out 39-32,__zero_reg__
1581:mavin.h       ****     ADCComplete = 1;	
 3354               	.LM495:
 3355 0e24 81E0      		ldi r24,lo8(1)
 3356 0e26 8093 0000 		sts ADCComplete,r24
 3357               	/* epilogue start */
1582:mavin.h       **** }
 3359               	.LM496:
 3360 0e2a 0895      		ret
 3362               	.Lscope28:
 3364               		.stabd	78,0,0
 3366               	.global	GetADC
 3368               	GetADC:
 3369               		.stabd	46,0,0
1583:mavin.h       **** 
1584:mavin.h       **** //---------------------------------------------------------
1585:mavin.h       **** //Get Analog to Digital Converter
1586:mavin.h       **** u08 GetADC()
1587:mavin.h       **** {
 3371               	.LM497:
 3372               	.LFBB29:
 3373               	/* prologue: function */
 3374               	/* frame size = 0 */
 3375               	/* stack size = 0 */
 3376               	.L__stack_usage = 0
 3377               	.L212:
1588:mavin.h       **** 	u08 temp;
1589:mavin.h       ****     while(!ADCComplete); 	
 3379               	.LM498:
 3380 0e2c 8091 0000 		lds r24,ADCComplete
 3381 0e30 8823      		tst r24
 3382 0e32 01F0      		breq .L212
1590:mavin.h       ****     ADCComplete = 0;
 3384               	.LM499:
 3385 0e34 1092 0000 		sts ADCComplete,__zero_reg__
1591:mavin.h       ****     
1592:mavin.h       ****     temp = inp(ADCSRA);		
1593:mavin.h       ****     outp(temp|0x40,ADCSRA);	
 3387               	.LM500:
 3388 0e38 369A      		sbi 38-32,6
 3389               	.L213:
1594:mavin.h       **** 
1595:mavin.h       ****     while(!ADCComplete); 
 3391               	.LM501:
 3392 0e3a 8091 0000 		lds r24,ADCComplete
 3393 0e3e 8823      		tst r24
 3394 0e40 01F0      		breq .L213
1596:mavin.h       **** 	
1597:mavin.h       **** 	temp = ((u08)(ADCData[0]>>2)) | ((u08)(ADCData[1]<<6));
 3396               	.LM502:
 3397 0e42 9091 0000 		lds r25,ADCData+1
 3398 0e46 9295      		swap r25
 3399 0e48 990F      		lsl r25
 3400 0e4a 990F      		lsl r25
 3401 0e4c 907C      		andi r25,lo8(-64)
 3402 0e4e 8091 0000 		lds r24,ADCData
 3403 0e52 8695      		lsr r24
 3404 0e54 8695      		lsr r24
1598:mavin.h       ****     return temp;
1599:mavin.h       **** }
 3406               	.LM503:
 3407 0e56 892B      		or r24,r25
 3408               	/* epilogue start */
 3409 0e58 0895      		ret
 3411               	.Lscope29:
 3413               		.stabd	78,0,0
 3416               	.global	GetCds
 3418               	GetCds:
 3419               		.stabd	46,0,0
1430:mavin.h       **** {
 3421               	.LM504:
 3422               	.LFBB30:
 3423               	/* prologue: function */
 3424               	/* frame size = 0 */
 3425               	/* stack size = 0 */
 3426               	.L__stack_usage = 0
1433:mavin.h       **** 	switch(pos){
 3428               	.LM505:
 3429 0e5a 8330      		cpi r24,3
 3430 0e5c 9105      		cpc r25,__zero_reg__
 3431 0e5e 01F0      		breq .L220
 3432 0e60 8430      		cpi r24,4
 3433 0e62 9105      		cpc r25,__zero_reg__
 3434 0e64 04F4      		brge .L223
 3435 0e66 8130      		cpi r24,1
 3436 0e68 9105      		cpc r25,__zero_reg__
 3437 0e6a 01F0      		breq .L218
 3438 0e6c 8230      		cpi r24,2
 3439 0e6e 9105      		cpc r25,__zero_reg__
 3440 0e70 01F4      		brne .L217
 3441 0e72 00C0      		rjmp .L231
 3442               	.L223:
 3443 0e74 8430      		cpi r24,4
 3444 0e76 9105      		cpc r25,__zero_reg__
 3445 0e78 01F0      		breq .L221
 3446 0e7a 8530      		cpi r24,5
 3447 0e7c 9105      		cpc r25,__zero_reg__
 3448 0e7e 01F4      		brne .L217
 3449 0e80 00C0      		rjmp .L232
 3450               	.L218:
1435:mavin.h       **** 			ADC_CHANNEL(AD_0);				// Cds value => ADC
 3452               	.LM506:
 3453 0e82 17B8      		out 39-32,__zero_reg__
1436:mavin.h       **** 			break;
 3455               	.LM507:
 3456 0e84 00C0      		rjmp .L217
 3457               	.L231:
1438:mavin.h       **** 			ADC_CHANNEL(AD_1);				// Cds value => ADC 
 3459               	.LM508:
 3460 0e86 81E0      		ldi r24,lo8(1)
 3461 0e88 00C0      		rjmp .L230
 3462               	.L220:
1441:mavin.h       **** 			ADC_CHANNEL(AD_2);				// Cds value => ADC
 3464               	.LM509:
 3465 0e8a 82E0      		ldi r24,lo8(2)
 3466 0e8c 00C0      		rjmp .L230
 3467               	.L221:
1444:mavin.h       **** 			ADC_CHANNEL(AD_3);				// Cds value => ADC
 3469               	.LM510:
 3470 0e8e 83E0      		ldi r24,lo8(3)
 3471 0e90 00C0      		rjmp .L230
 3472               	.L232:
1448:mavin.h       **** 			ADC_CHANNEL(AD_4);				// Cds value => ADC
 3474               	.LM511:
 3475 0e92 84E0      		ldi r24,lo8(4)
 3476               	.L230:
 3477 0e94 87B9      		out 39-32,r24
 3478               	.L217:
1455:mavin.h       **** 	tempCds = GetADC();				// AD start
 3480               	.LM512:
 3481 0e96 0E94 0000 		call GetADC
1457:mavin.h       **** 	if(tempCds < 20){								//2007.06.27 수정
 3483               	.LM513:
 3484 0e9a 8431      		cpi r24,lo8(20)
 3485 0e9c 00F0      		brlo .L225
1459:mavin.h       **** 	}else if(tempCds <= ILLUMINANCE_LV1){
 3487               	.LM514:
 3488 0e9e 8F31      		cpi r24,lo8(31)
 3489 0ea0 00F0      		brlo .L226
1461:mavin.h       **** 	}else if(tempCds <= ILLUMINANCE_LV2){
 3491               	.LM515:
 3492 0ea2 8135      		cpi r24,lo8(81)
 3493 0ea4 00F0      		brlo .L227
1463:mavin.h       **** 	}else if(tempCds <= ILLUMINANCE_LV3){
 3495               	.LM516:
 3496 0ea6 8937      		cpi r24,lo8(121)
 3497 0ea8 00F0      		brlo .L228
1465:mavin.h       **** 	}else if(tempCds <= ILLUMINANCE_LV4){
 3499               	.LM517:
 3500 0eaa 8739      		cpi r24,lo8(-105)
 3501 0eac 00F4      		brsh .L229
1466:mavin.h       **** 	    return 4;   
 3503               	.LM518:
 3504 0eae 84E0      		ldi r24,lo8(4)
 3505 0eb0 0895      		ret
 3506               	.L225:
1458:mavin.h       **** 	    return 0;   //Cds Sensor Read Failed
 3508               	.LM519:
 3509 0eb2 80E0      		ldi r24,lo8(0)
 3510 0eb4 0895      		ret
 3511               	.L226:
1460:mavin.h       **** 	    return 1;   
 3513               	.LM520:
 3514 0eb6 81E0      		ldi r24,lo8(1)
 3515 0eb8 0895      		ret
 3516               	.L227:
1462:mavin.h       **** 	    return 2;   
 3518               	.LM521:
 3519 0eba 82E0      		ldi r24,lo8(2)
 3520 0ebc 0895      		ret
 3521               	.L228:
1464:mavin.h       **** 	    return 3;
 3523               	.LM522:
 3524 0ebe 83E0      		ldi r24,lo8(3)
 3525 0ec0 0895      		ret
 3526               	.L229:
1468:mavin.h       **** 		return 5;					//2007.06.27 수정
 3528               	.LM523:
 3529 0ec2 85E0      		ldi r24,lo8(5)
1470:mavin.h       **** }
 3531               	.LM524:
 3532 0ec4 0895      		ret
 3537               	.Lscope30:
 3539               		.stabd	78,0,0
 3541               	.global	Initialize
 3543               	Initialize:
 3544               		.stabd	46,0,0
1600:mavin.h       **** 
1601:mavin.h       **** //초기화 루틴
1602:mavin.h       **** /////////////////////////////////////////////////////////////////////////////////////////////////
1603:mavin.h       **** void Initialize()
1604:mavin.h       **** {	
 3546               	.LM525:
 3547               	.LFBB31:
 3548 0ec6 CF93      		push r28
 3549 0ec8 DF93      		push r29
 3550               	/* prologue: function */
 3551               	/* frame size = 0 */
 3552               	/* stack size = 2 */
 3553               	.L__stack_usage = 2
1605:mavin.h       **** 	
1606:mavin.h       **** 	fMicSample = 0;
 3555               	.LM526:
 3556 0eca 1092 0000 		sts fMicSample,__zero_reg__
1607:mavin.h       **** 	fcdsSample = 0;
 3558               	.LM527:
 3559 0ece 1092 0000 		sts fcdsSample,__zero_reg__
1608:mavin.h       **** 	
1609:mavin.h       **** 	
1610:mavin.h       **** 	outp(0x40, DDRC);
 3561               	.LM528:
 3562 0ed2 80E4      		ldi r24,lo8(64)
 3563 0ed4 84BB      		out 52-32,r24
1611:mavin.h       **** 	outp(0xff, PORTC);
 3565               	.LM529:
 3566 0ed6 8FEF      		ldi r24,lo8(-1)
 3567 0ed8 85BB      		out 53-32,r24
1612:mavin.h       **** 	
1613:mavin.h       **** 	
1614:mavin.h       **** 	outp(0x00, TCNT0);
 3569               	.LM530:
 3570 0eda 12BE      		out 82-32,__zero_reg__
1615:mavin.h       **** 	outp(0x01, TCCR0);  		
 3572               	.LM531:
 3573 0edc 81E0      		ldi r24,lo8(1)
 3574 0ede 83BF      		out 83-32,r24
1616:mavin.h       **** 	outp(BV(TOIE0), TIMSK);		
 3576               	.LM532:
 3577 0ee0 87BF      		out 87-32,r24
1617:mavin.h       **** 	
1618:mavin.h       **** 	sei();
 3579               	.LM533:
 3580               	/* #APP */
 3581               	 ;  1618 "mavin.h" 1
 3582 0ee2 7894      		sei
 3583               	 ;  0 "" 2
1619:mavin.h       **** 	
1620:mavin.h       **** 	// LCD Initialize
1621:mavin.h       ****     lcd_port_init();
 3585               	.LM534:
 3586               	/* #NOAPP */
 3587 0ee4 0E94 0000 		call lcd_port_init
1622:mavin.h       ****     lcd_init();
 3589               	.LM535:
 3590 0ee8 0E94 0000 		call lcd_init
1623:mavin.h       ****     
1624:mavin.h       **** /*	// 한글 폰트 로드
1625:mavin.h       **** 	 for (int i=0; i<8; i++){
1626:mavin.h       **** 	
1627:mavin.h       **** 		command(i | 0x40);	
1628:mavin.h       **** 		lcd_out(degree[i]);					
1629:mavin.h       **** 	}
1630:mavin.h       **** */	
1631:mavin.h       **** 	outp(DDRF_INPUT,DDRF);	
 3592               	.LM536:
 3593 0eec 1092 6100 		sts 97,__zero_reg__
1632:mavin.h       **** 	InitADC();				
 3595               	.LM537:
 3596 0ef0 0E94 0000 		call InitADC
1633:mavin.h       **** 	
1634:mavin.h       **** 	//lcd Initialize	
1635:mavin.h       **** 	lcd_str_out(1,1,empty);
 3598               	.LM538:
 3599 0ef4 C0E0      		ldi r28,lo8(empty)
 3600 0ef6 D0E0      		ldi r29,hi8(empty)
 3601 0ef8 81E0      		ldi r24,lo8(1)
 3602 0efa 61E0      		ldi r22,lo8(1)
 3603 0efc AE01      		movw r20,r28
 3604 0efe 0E94 0000 		call lcd_str_out
1636:mavin.h       **** 	lcd_str_out(2,1,empty);
 3606               	.LM539:
 3607 0f02 82E0      		ldi r24,lo8(2)
 3608 0f04 61E0      		ldi r22,lo8(1)
 3609 0f06 AE01      		movw r20,r28
 3610 0f08 0E94 0000 		call lcd_str_out
1637:mavin.h       **** 	
1638:mavin.h       ****     delay(100);
 3612               	.LM540:
 3613 0f0c 84E6      		ldi r24,lo8(100)
 3614 0f0e 90E0      		ldi r25,hi8(100)
 3615 0f10 0E94 0000 		call delay
 3616               	/* epilogue start */
1639:mavin.h       ****     
1640:mavin.h       **** }
 3618               	.LM541:
 3619 0f14 DF91      		pop r29
 3620 0f16 CF91      		pop r28
 3621 0f18 0895      		ret
 3623               	.Lscope31:
 3625               		.stabd	78,0,0
 3629               	.global	GetCdsVal
 3631               	GetCdsVal:
 3632               		.stabd	46,0,0
 3634               	.Ltext2:
   1:ModuleFunction.h **** 
   2:ModuleFunction.h **** 
   3:ModuleFunction.h **** //---------------------------------------------------------
   4:ModuleFunction.h **** bool GetCdsVal(u08 pos,u08 val)
   5:ModuleFunction.h **** {
 3636               	.LM542:
 3637               	.LFBB32:
 3638 0f1a DF93      		push r29
 3639 0f1c CF93      		push r28
 3640 0f1e 0F92      		push __tmp_reg__
 3641 0f20 CDB7      		in r28,__SP_L__
 3642 0f22 DEB7      		in r29,__SP_H__
 3643               	/* prologue: function */
 3644               	/* frame size = 1 */
 3645               	/* stack size = 3 */
 3646               	.L__stack_usage = 3
   6:ModuleFunction.h **** 	
   7:ModuleFunction.h **** 	if(GetCds(pos) >= val){
 3648               	.LM543:
 3649 0f24 90E0      		ldi r25,lo8(0)
 3650 0f26 6983      		std Y+1,r22
 3651 0f28 0E94 0000 		call GetCds
   8:ModuleFunction.h **** 		return TRUE;
 3653               	.LM544:
 3654 0f2c 91E0      		ldi r25,lo8(1)
 3655 0f2e 6981      		ldd r22,Y+1
 3656 0f30 8617      		cp r24,r22
 3657 0f32 00F4      		brsh .L235
 3658 0f34 90E0      		ldi r25,lo8(0)
 3659               	.L235:
   9:ModuleFunction.h **** 	}else{
  10:ModuleFunction.h **** 		return FALSE;
  11:ModuleFunction.h **** 	}
  12:ModuleFunction.h **** 	
  13:ModuleFunction.h **** }
 3661               	.LM545:
 3662 0f36 892F      		mov r24,r25
 3663               	/* epilogue start */
 3664 0f38 0F90      		pop __tmp_reg__
 3665 0f3a CF91      		pop r28
 3666 0f3c DF91      		pop r29
 3667 0f3e 0895      		ret
 3669               	.Lscope32:
 3671               		.stabd	78,0,0
 3675               	.global	GetRemoconVal
 3677               	GetRemoconVal:
 3678               		.stabd	46,0,0
  14:ModuleFunction.h **** 
  15:ModuleFunction.h **** 
  16:ModuleFunction.h **** //---------------------------------------------------------
  17:ModuleFunction.h **** bool GetRemoconVal(u08 repos,u08 nVal)
  18:ModuleFunction.h **** {
 3680               	.LM546:
 3681               	.LFBB33:
 3682 0f40 1F93      		push r17
 3683               	/* prologue: function */
 3684               	/* frame size = 0 */
 3685               	/* stack size = 1 */
 3686               	.L__stack_usage = 1
 3687 0f42 162F      		mov r17,r22
  19:ModuleFunction.h **** 	
  20:ModuleFunction.h **** 	u08 temp = 0;
  21:ModuleFunction.h **** 	REPosition(repos);
 3689               	.LM547:
 3690 0f44 0E94 0000 		call REPosition
  22:ModuleFunction.h **** 
  23:ModuleFunction.h **** 	if(IRReg&IrRxdFLAG){			
 3692               	.LM548:
 3693 0f48 8091 0000 		lds r24,IRReg
 3694 0f4c 87FF      		sbrs r24,7
 3695 0f4e 00C0      		rjmp .L239
  24:ModuleFunction.h **** 		temp = GetRemocon();        	
 3697               	.LM549:
 3698 0f50 0E94 0000 		call GetRemocon
 3699 0f54 982F      		mov r25,r24
  25:ModuleFunction.h **** 		RemoconValuedelayCnt = 3; 				       
 3701               	.LM550:
 3702 0f56 83E0      		ldi r24,lo8(3)
 3703 0f58 8093 0000 		sts RemoconValuedelayCnt,r24
 3704 0f5c 00C0      		rjmp .L237
 3705               	.L239:
  20:ModuleFunction.h **** 	u08 temp = 0;
 3707               	.LM551:
 3708 0f5e 90E0      		ldi r25,lo8(0)
 3709               	.L237:
  26:ModuleFunction.h ****       }
  27:ModuleFunction.h **** 
  28:ModuleFunction.h **** 	if(temp == nVal){
  29:ModuleFunction.h **** 		return TRUE;
 3711               	.LM552:
 3712 0f60 81E0      		ldi r24,lo8(1)
 3713 0f62 9113      		cpse r25,r17
 3714 0f64 80E0      		ldi r24,lo8(0)
 3715               	.L238:
 3716               	/* epilogue start */
  30:ModuleFunction.h **** 	}else{
  31:ModuleFunction.h **** 		return FALSE;
  32:ModuleFunction.h **** 	}
  33:ModuleFunction.h **** 	   
  34:ModuleFunction.h **** }
 3718               	.LM553:
 3719 0f66 1F91      		pop r17
 3720 0f68 0895      		ret
 3725               	.Lscope33:
 3727               		.stabd	78,0,0
 3730               	.global	GetMicVal
 3732               	GetMicVal:
 3733               		.stabd	46,0,0
  35:ModuleFunction.h **** 
  36:ModuleFunction.h **** 
  37:ModuleFunction.h **** //---------------------------------------------------------
  38:ModuleFunction.h **** bool GetMicVal(u08 nLevel)
  39:ModuleFunction.h **** {
 3735               	.LM554:
 3736               	.LFBB34:
 3737 0f6a 1F93      		push r17
 3738               	/* prologue: function */
 3739               	/* frame size = 0 */
 3740               	/* stack size = 1 */
 3741               	.L__stack_usage = 1
 3742 0f6c 182F      		mov r17,r24
  40:ModuleFunction.h **** 	
  41:ModuleFunction.h **** 	u08 tempMic;
  42:ModuleFunction.h **** 	
  43:ModuleFunction.h **** 	if(fMicSample){
 3744               	.LM555:
 3745 0f6e 8091 0000 		lds r24,fMicSample
 3746 0f72 8823      		tst r24
 3747 0f74 01F0      		breq .L241
  44:ModuleFunction.h **** 	ADC_CHANNEL(MIC_IN);		
 3749               	.LM556:
 3750 0f76 86E0      		ldi r24,lo8(6)
 3751 0f78 87B9      		out 39-32,r24
  45:ModuleFunction.h **** 	tempMic = GetADC();			// AD start	
 3753               	.LM557:
 3754 0f7a 0E94 0000 		call GetADC
 3755 0f7e 982F      		mov r25,r24
  46:ModuleFunction.h **** 	fMicSample = 0;	 	        
 3757               	.LM558:
 3758 0f80 1092 0000 		sts fMicSample,__zero_reg__
 3759               	.L241:
  47:ModuleFunction.h ****     }
  48:ModuleFunction.h **** 
  49:ModuleFunction.h **** 	if(tempMic >= nLevel)    
  50:ModuleFunction.h **** 		return TRUE;
 3761               	.LM559:
 3762 0f84 81E0      		ldi r24,lo8(1)
 3763 0f86 9117      		cp r25,r17
 3764 0f88 00F4      		brsh .L242
 3765 0f8a 80E0      		ldi r24,lo8(0)
 3766               	.L242:
 3767               	/* epilogue start */
  51:ModuleFunction.h **** 	else
  52:ModuleFunction.h **** 		return FALSE;
  53:ModuleFunction.h **** 
  54:ModuleFunction.h **** }
 3769               	.LM560:
 3770 0f8c 1F91      		pop r17
 3771 0f8e 0895      		ret
 3776               	.Lscope34:
 3778               		.stabd	78,0,0
 3782               	.global	GetPhotoSensor
 3784               	GetPhotoSensor:
 3785               		.stabd	46,0,0
  55:ModuleFunction.h **** 
  56:ModuleFunction.h **** 
  57:ModuleFunction.h **** //---------------------------------------------------------
  58:ModuleFunction.h **** bool GetPhotoSensor(u08 sel,u08 nPhotoVal)
  59:ModuleFunction.h **** {
 3787               	.LM561:
 3788               	.LFBB35:
 3789               	/* prologue: function */
 3790               	/* frame size = 0 */
 3791               	/* stack size = 0 */
 3792               	.L__stack_usage = 0
  60:ModuleFunction.h **** 	
  61:ModuleFunction.h **** 	ControlPortc = 1;
 3794               	.LM562:
 3795 0f90 91E0      		ldi r25,lo8(1)
 3796 0f92 9093 0000 		sts ControlPortc,r25
  62:ModuleFunction.h **** 	SensorDir = sel;
 3798               	.LM563:
 3799 0f96 8093 0000 		sts SensorDir,r24
  63:ModuleFunction.h **** 
  64:ModuleFunction.h **** 	if(sel == FORWARD){
 3801               	.LM564:
 3802 0f9a 8130      		cpi r24,lo8(1)
 3803 0f9c 01F4      		brne .L244
  65:ModuleFunction.h **** 		
  66:ModuleFunction.h **** 		if(ForwardPhotoSensor == nPhotoVal){
  67:ModuleFunction.h **** 			return TRUE;
 3805               	.LM565:
 3806 0f9e 9091 0000 		lds r25,ForwardPhotoSensor
 3807 0fa2 9617      		cp r25,r22
 3808 0fa4 01F0      		breq .L246
 3809 0fa6 80E0      		ldi r24,lo8(0)
 3810 0fa8 0895      		ret
 3811               	.L244:
 3812 0faa 81E0      		ldi r24,lo8(1)
 3813 0fac 9091 0000 		lds r25,DownwardPhotoSensor
 3814 0fb0 9613      		cpse r25,r22
 3815 0fb2 80E0      		ldi r24,lo8(0)
 3816               	.L246:
  68:ModuleFunction.h **** 		}else{
  69:ModuleFunction.h **** 			return FALSE;		
  70:ModuleFunction.h **** 		}
  71:ModuleFunction.h **** 				
  72:ModuleFunction.h **** 	}else{
  73:ModuleFunction.h **** 		
  74:ModuleFunction.h **** 		if(DownwardPhotoSensor == nPhotoVal){
  75:ModuleFunction.h **** 			return TRUE;
  76:ModuleFunction.h **** 		}else{
  77:ModuleFunction.h **** 			return FALSE;		
  78:ModuleFunction.h **** 		}		
  79:ModuleFunction.h **** 
  80:ModuleFunction.h **** 	}
  81:ModuleFunction.h **** 
  82:ModuleFunction.h **** }
 3818               	.LM566:
 3819 0fb4 0895      		ret
 3821               	.Lscope35:
 3823               		.stabd	78,0,0
 3827               	.global	TactSWModuleCtrl
 3829               	TactSWModuleCtrl:
 3830               		.stabd	46,0,0
  83:ModuleFunction.h **** 
  84:ModuleFunction.h **** 
  85:ModuleFunction.h **** //---------------------------------------------------------
  86:ModuleFunction.h **** bool TactSWModuleCtrl(u08 pos,u08 val)
  87:ModuleFunction.h **** {
 3832               	.LM567:
 3833               	.LFBB36:
 3834 0fb6 1F93      		push r17
 3835               	/* prologue: function */
 3836               	/* frame size = 0 */
 3837               	/* stack size = 1 */
 3838               	.L__stack_usage = 1
 3839 0fb8 162F      		mov r17,r22
  88:ModuleFunction.h **** 
  89:ModuleFunction.h **** 	static u08 swvalue = 0;
  90:ModuleFunction.h **** 	static u08 Nswvalue = 0;
  91:ModuleFunction.h **** 	u08 SwState = 0;
  92:ModuleFunction.h **** 
  93:ModuleFunction.h **** 	outp(0x00,SFIOR);		
 3841               	.LM568:
 3842 0fba 10BC      		out 64-32,__zero_reg__
  94:ModuleFunction.h **** 
  95:ModuleFunction.h **** 	
  96:ModuleFunction.h **** 	switch(pos)
 3844               	.LM569:
 3845 0fbc 8330      		cpi r24,lo8(3)
 3846 0fbe 01F0      		breq .L252
 3847 0fc0 8430      		cpi r24,lo8(4)
 3848 0fc2 00F4      		brsh .L255
 3849 0fc4 8130      		cpi r24,lo8(1)
 3850 0fc6 01F0      		breq .L250
 3851 0fc8 8230      		cpi r24,lo8(2)
 3852 0fca 01F0      		breq .+2
 3853 0fcc 00C0      		rjmp .L273
 3854 0fce 00C0      		rjmp .L283
 3855               	.L255:
 3856 0fd0 8430      		cpi r24,lo8(4)
 3857 0fd2 01F0      		breq .L253
 3858 0fd4 8530      		cpi r24,lo8(5)
 3859 0fd6 01F0      		breq .+2
 3860 0fd8 00C0      		rjmp .L273
 3861 0fda 00C0      		rjmp .L284
 3862               	.L250:
  97:ModuleFunction.h **** 	{
  98:ModuleFunction.h **** 		case 1:
  99:ModuleFunction.h **** 			cbi(DDRB , 0);	cbi(DDRB , 1);	cbi(DDRB , 2);	
 3864               	.LM570:
 3865 0fdc B898      		cbi 55-32,0
 3866 0fde B998      		cbi 55-32,1
 3867 0fe0 BA98      		cbi 55-32,2
 100:ModuleFunction.h **** 			sbi(PORTB, 0);	sbi(PORTB, 1);	sbi(PORTB, 2);	
 3869               	.LM571:
 3870 0fe2 C09A      		sbi 56-32,0
 3871 0fe4 C19A      		sbi 56-32,1
 3872 0fe6 C29A      		sbi 56-32,2
 101:ModuleFunction.h **** 			delayms(1);
 3874               	.LM572:
 3875 0fe8 81E0      		ldi r24,lo8(1)
 3876 0fea 90E0      		ldi r25,hi8(1)
 3877 0fec 0E94 0000 		call delayms
 102:ModuleFunction.h **** 			
 103:ModuleFunction.h **** 			if((0x01&inp(PINB)) == 0){				        
 3879               	.LM573:
 3880 0ff0 86B3      		in r24,54-32
 3881 0ff2 80FF      		sbrs r24,0
 3882 0ff4 00C0      		rjmp .L276
 3883               	.L256:
 104:ModuleFunction.h **** 				swvalue = 0xfe;								
 105:ModuleFunction.h **** 			}else if((0x02&inp(PINB)) == 0){
 3885               	.LM574:
 3886 0ff6 86B3      		in r24,54-32
 3887 0ff8 81FF      		sbrs r24,1
 3888 0ffa 00C0      		rjmp .L278
 3889               	.L258:
 106:ModuleFunction.h **** 				swvalue = 0xfd;									
 107:ModuleFunction.h **** 			}else if((0x04&inp(PINB)) == 0){
 3891               	.LM575:
 3892 0ffc 86B3      		in r24,54-32
 3893 0ffe 00C0      		rjmp .L282
 3894               	.L283:
 108:ModuleFunction.h **** 				swvalue = 0xfb;						
 109:ModuleFunction.h **** 			}else{
 110:ModuleFunction.h **** 				swvalue = 0xff;						
 111:ModuleFunction.h **** 			} 
 112:ModuleFunction.h **** 			break;
 113:ModuleFunction.h **** 
 114:ModuleFunction.h **** 		case 2:
 115:ModuleFunction.h **** 			cbi(DDRD ,0 );	cbi(DDRD ,1 );	cbi(DDRD ,2 );	
 3896               	.LM576:
 3897 1000 8898      		cbi 49-32,0
 3898 1002 8998      		cbi 49-32,1
 3899 1004 8A98      		cbi 49-32,2
 116:ModuleFunction.h **** 			sbi(PORTD,0 );	sbi(PORTD,1 );	sbi(PORTD,2 );	
 3901               	.LM577:
 3902 1006 909A      		sbi 50-32,0
 3903 1008 919A      		sbi 50-32,1
 3904 100a 929A      		sbi 50-32,2
 117:ModuleFunction.h **** 			delayms(1);
 3906               	.LM578:
 3907 100c 81E0      		ldi r24,lo8(1)
 3908 100e 90E0      		ldi r25,hi8(1)
 3909 1010 0E94 0000 		call delayms
 118:ModuleFunction.h **** 
 119:ModuleFunction.h **** 			if((0x01&inp(PIND)) == 0){				
 3911               	.LM579:
 3912 1014 80B3      		in r24,48-32
 3913 1016 80FF      		sbrs r24,0
 3914 1018 00C0      		rjmp .L276
 3915               	.L260:
 120:ModuleFunction.h **** 				swvalue = 0xfe;								
 121:ModuleFunction.h **** 			}else if((0x02&inp(PIND)) == 0){
 3917               	.LM580:
 3918 101a 80B3      		in r24,48-32
 3919 101c 81FF      		sbrs r24,1
 3920 101e 00C0      		rjmp .L278
 3921               	.L261:
 122:ModuleFunction.h **** 				swvalue = 0xfd;								
 123:ModuleFunction.h **** 			}else if((0x04&inp(PIND)) == 0){
 3923               	.LM581:
 3924 1020 80B3      		in r24,48-32
 3925 1022 00C0      		rjmp .L282
 3926               	.L252:
 124:ModuleFunction.h **** 				swvalue = 0xfb;				
 125:ModuleFunction.h **** 			}else{
 126:ModuleFunction.h **** 				swvalue = 0xff;						
 127:ModuleFunction.h **** 			}
 128:ModuleFunction.h **** 			break;
 129:ModuleFunction.h **** 
 130:ModuleFunction.h **** 		case 3:
 131:ModuleFunction.h **** 			cbi(DDRD, 4);	cbi(DDRD ,5);	cbi(DDRD ,6);	
 3928               	.LM582:
 3929 1024 8C98      		cbi 49-32,4
 3930 1026 8D98      		cbi 49-32,5
 3931 1028 8E98      		cbi 49-32,6
 132:ModuleFunction.h **** 			sbi(PORTD,4);	sbi(PORTD,5);	sbi(PORTD,6);	
 3933               	.LM583:
 3934 102a 949A      		sbi 50-32,4
 3935 102c 959A      		sbi 50-32,5
 3936 102e 969A      		sbi 50-32,6
 133:ModuleFunction.h **** 			delayms(1);
 3938               	.LM584:
 3939 1030 81E0      		ldi r24,lo8(1)
 3940 1032 90E0      		ldi r25,hi8(1)
 3941 1034 0E94 0000 		call delayms
 134:ModuleFunction.h **** 		
 135:ModuleFunction.h **** 			if((0x10&inp(PIND)) == 0){				
 3943               	.LM585:
 3944 1038 80B3      		in r24,48-32
 3945 103a 84FF      		sbrs r24,4
 3946 103c 00C0      		rjmp .L276
 3947               	.L263:
 136:ModuleFunction.h **** 				swvalue = 0xfe;						
 137:ModuleFunction.h **** 			}else if((0x20&inp(PIND)) == 0){
 3949               	.LM586:
 3950 103e 80B3      		in r24,48-32
 3951 1040 85FF      		sbrs r24,5
 3952 1042 00C0      		rjmp .L278
 3953               	.L264:
 138:ModuleFunction.h **** 				swvalue = 0xfd;						
 139:ModuleFunction.h **** 			}else if((0x40&inp(PIND)) == 0){
 3955               	.LM587:
 3956 1044 80B3      		in r24,48-32
 3957 1046 86FD      		sbrc r24,6
 3958 1048 00C0      		rjmp .L271
 3959 104a 00C0      		rjmp .L277
 3960               	.L253:
 140:ModuleFunction.h **** 				swvalue = 0xfb;						
 141:ModuleFunction.h **** 			}else{
 142:ModuleFunction.h **** 				swvalue = 0xff;						
 143:ModuleFunction.h **** 			}
 144:ModuleFunction.h **** 			break;
 145:ModuleFunction.h **** 
 146:ModuleFunction.h **** 		case 4:
 147:ModuleFunction.h **** 			cbi(DDRE , 0);	cbi(DDRE , 1);	cbi(DDRE , 2);	
 3962               	.LM588:
 3963 104c 1098      		cbi 34-32,0
 3964 104e 1198      		cbi 34-32,1
 3965 1050 1298      		cbi 34-32,2
 148:ModuleFunction.h **** 			sbi(PORTE, 0);	sbi(PORTE, 1);	sbi(PORTE, 2);	
 3967               	.LM589:
 3968 1052 189A      		sbi 35-32,0
 3969 1054 199A      		sbi 35-32,1
 3970 1056 1A9A      		sbi 35-32,2
 149:ModuleFunction.h **** 			delayms(1);
 3972               	.LM590:
 3973 1058 81E0      		ldi r24,lo8(1)
 3974 105a 90E0      		ldi r25,hi8(1)
 3975 105c 0E94 0000 		call delayms
 150:ModuleFunction.h **** 
 151:ModuleFunction.h **** 			if((0x01&inp(PINE)) == 0){				
 3977               	.LM591:
 3978 1060 81B1      		in r24,33-32
 3979 1062 80FF      		sbrs r24,0
 3980 1064 00C0      		rjmp .L276
 3981               	.L266:
 152:ModuleFunction.h **** 				swvalue = 0xfe;						
 153:ModuleFunction.h **** 			}else if((0x02&inp(PINE)) == 0){
 3983               	.LM592:
 3984 1066 81B1      		in r24,33-32
 3985 1068 81FF      		sbrs r24,1
 3986 106a 00C0      		rjmp .L278
 3987               	.L267:
 154:ModuleFunction.h **** 				swvalue = 0xfd;						
 155:ModuleFunction.h **** 			}else if((0x04&inp(PINE)) == 0){
 3989               	.LM593:
 3990 106c 81B1      		in r24,33-32
 3991               	.L282:
 3992 106e 82FD      		sbrc r24,2
 3993 1070 00C0      		rjmp .L271
 3994 1072 00C0      		rjmp .L277
 3995               	.L284:
 156:ModuleFunction.h **** 				swvalue = 0xfb;						
 157:ModuleFunction.h **** 			}else{
 158:ModuleFunction.h **** 				swvalue = 0xff;						
 159:ModuleFunction.h **** 			}
 160:ModuleFunction.h **** 			break;
 161:ModuleFunction.h **** 
 162:ModuleFunction.h **** 		case 5:
 163:ModuleFunction.h **** 			cbi(DDRE ,7 );	cbi(DDRG ,3 );	cbi(DDRG ,4 );	
 3997               	.LM594:
 3998 1074 1798      		cbi 34-32,7
 3999 1076 8091 6400 		lds r24,100
 4000 107a 877F      		andi r24,lo8(-9)
 4001 107c 8093 6400 		sts 100,r24
 4002 1080 8091 6400 		lds r24,100
 4003 1084 8F7E      		andi r24,lo8(-17)
 4004 1086 8093 6400 		sts 100,r24
 164:ModuleFunction.h **** 			sbi(PORTE,7 );  sbi(PORTG,3 );	sbi(PORTG,4 );	
 4006               	.LM595:
 4007 108a 1F9A      		sbi 35-32,7
 4008 108c 8091 6500 		lds r24,101
 4009 1090 8860      		ori r24,lo8(8)
 4010 1092 8093 6500 		sts 101,r24
 4011 1096 8091 6500 		lds r24,101
 4012 109a 8061      		ori r24,lo8(16)
 4013 109c 8093 6500 		sts 101,r24
 165:ModuleFunction.h **** 			delayms(1);
 4015               	.LM596:
 4016 10a0 81E0      		ldi r24,lo8(1)
 4017 10a2 90E0      		ldi r25,hi8(1)
 4018 10a4 0E94 0000 		call delayms
 166:ModuleFunction.h **** 			
 167:ModuleFunction.h **** 			if((0x80&inp(PINE)) == 0){
 4020               	.LM597:
 4021 10a8 0F99      		sbic 33-32,7
 4022 10aa 00C0      		rjmp .L269
 4023               	.L276:
 168:ModuleFunction.h **** 				swvalue = 0xfe;						
 4025               	.LM598:
 4026 10ac 8EEF      		ldi r24,lo8(-2)
 4027 10ae 00C0      		rjmp .L274
 4028               	.L269:
 169:ModuleFunction.h **** 			}else if((0x08&inp(PING)) == 0){
 4030               	.LM599:
 4031 10b0 8091 6300 		lds r24,99
 4032 10b4 83FD      		sbrc r24,3
 4033 10b6 00C0      		rjmp .L270
 4034               	.L278:
 170:ModuleFunction.h **** 				swvalue = 0xfd;						
 4036               	.LM600:
 4037 10b8 8DEF      		ldi r24,lo8(-3)
 4038 10ba 00C0      		rjmp .L274
 4039               	.L270:
 171:ModuleFunction.h **** 			}else if((0x10&inp(PING)) == 0){
 4041               	.LM601:
 4042 10bc 8091 6300 		lds r24,99
 4043 10c0 84FD      		sbrc r24,4
 4044 10c2 00C0      		rjmp .L271
 4045               	.L277:
 172:ModuleFunction.h **** 				swvalue = 0xfb;						
 4047               	.LM602:
 4048 10c4 8BEF      		ldi r24,lo8(-5)
 4049 10c6 00C0      		rjmp .L274
 4050               	.L271:
 173:ModuleFunction.h **** 			}else{
 174:ModuleFunction.h **** 				swvalue = 0xff;						
 4052               	.LM603:
 4053 10c8 8FEF      		ldi r24,lo8(-1)
 4054               	.L274:
 4055 10ca 8093 0000 		sts swvalue.2057,r24
 175:ModuleFunction.h **** 			}   
 176:ModuleFunction.h **** 			break;
 177:ModuleFunction.h **** 
 178:ModuleFunction.h **** 		default:
 179:ModuleFunction.h **** 			return 0x00;
 180:ModuleFunction.h **** 
 181:ModuleFunction.h **** 	}
 182:ModuleFunction.h **** 
 183:ModuleFunction.h ****     swvalue = (0x07& (~swvalue));	
 4057               	.LM604:
 4058 10ce 9091 0000 		lds r25,swvalue.2057
 4059 10d2 9095      		com r25
 4060 10d4 9770      		andi r25,lo8(7)
 4061 10d6 9093 0000 		sts swvalue.2057,r25
 179:ModuleFunction.h **** 			return 0x00;
 4063               	.LM605:
 4064 10da 81E0      		ldi r24,lo8(1)
 4065 10dc 9113      		cpse r25,r17
 4066               	.L273:
 4067 10de 80E0      		ldi r24,lo8(0)
 4068               	.L249:
 4069               	/* epilogue start */
 184:ModuleFunction.h **** 	 
 185:ModuleFunction.h ****     if(swvalue == val){
 186:ModuleFunction.h **** 		return TRUE;
 187:ModuleFunction.h **** 	}else{
 188:ModuleFunction.h **** 		return FALSE;
 189:ModuleFunction.h **** 	}
 190:ModuleFunction.h **** 
 191:ModuleFunction.h **** }
 4071               	.LM606:
 4072 10e0 1F91      		pop r17
 4073 10e2 0895      		ret
 4078               	.Lscope36:
 4080               		.stabd	78,0,0
 4083               	.global	TouchSensor
 4085               	TouchSensor:
 4086               		.stabd	46,0,0
 192:ModuleFunction.h **** 
 193:ModuleFunction.h **** 
 194:ModuleFunction.h **** //---------------------------------------------------------
 195:ModuleFunction.h **** bool TouchSensor(u08 pos)
 196:ModuleFunction.h **** {
 4088               	.LM607:
 4089               	.LFBB37:
 4090               	/* prologue: function */
 4091               	/* frame size = 0 */
 4092               	/* stack size = 0 */
 4093               	.L__stack_usage = 0
 197:ModuleFunction.h **** 
 198:ModuleFunction.h **** 	u08 temp = 0;	
 199:ModuleFunction.h **** 
 200:ModuleFunction.h **** 	switch(pos)
 4095               	.LM608:
 4096 10e4 8330      		cpi r24,lo8(3)
 4097 10e6 01F0      		breq .L289
 4098 10e8 8430      		cpi r24,lo8(4)
 4099 10ea 00F4      		brsh .L292
 4100 10ec 8130      		cpi r24,lo8(1)
 4101 10ee 01F0      		breq .L287
 4102 10f0 8230      		cpi r24,lo8(2)
 4103 10f2 01F0      		breq .+2
 4104 10f4 00C0      		rjmp .L286
 4105 10f6 00C0      		rjmp .L301
 4106               	.L292:
 4107 10f8 8430      		cpi r24,lo8(4)
 4108 10fa 01F0      		breq .L290
 4109 10fc 8530      		cpi r24,lo8(5)
 4110 10fe 01F0      		breq .+2
 4111 1100 00C0      		rjmp .L286
 4112 1102 00C0      		rjmp .L302
 4113               	.L287:
 201:ModuleFunction.h **** 	{
 202:ModuleFunction.h **** 		case 1:
 203:ModuleFunction.h **** 			cbi(DDRB,0);	cbi(PORTB,0);		
 4115               	.LM609:
 4116 1104 B898      		cbi 55-32,0
 4117 1106 C098      		cbi 56-32,0
 204:ModuleFunction.h **** 			sbi(DDRB,3);	sbi(PORTB,3);
 4119               	.LM610:
 4120 1108 BB9A      		sbi 55-32,3
 4121 110a C39A      		sbi 56-32,3
 205:ModuleFunction.h **** 		
 206:ModuleFunction.h **** 			temp = (0x01 & inp(PINB));
 4123               	.LM611:
 4124 110c 86B3      		in r24,54-32
 207:ModuleFunction.h **** 		
 208:ModuleFunction.h **** 			if(temp == 0x01)
 4126               	.LM612:
 4127 110e 80FF      		sbrs r24,0
 4128 1110 00C0      		rjmp .L293
 209:ModuleFunction.h **** 			{
 210:ModuleFunction.h **** 				cbi(PORTB,3);						
 4130               	.LM613:
 4131 1112 C398      		cbi 56-32,3
 4132 1114 00C0      		rjmp .L300
 4133               	.L293:
 211:ModuleFunction.h **** 				delayms(1);	
 212:ModuleFunction.h **** 				return TRUE;
 213:ModuleFunction.h **** 			}
 214:ModuleFunction.h **** 	
 215:ModuleFunction.h **** 			sbi(PORTB,3);
 4135               	.LM614:
 4136 1116 C39A      		sbi 56-32,3
 4137 1118 00C0      		rjmp .L299
 4138               	.L301:
 216:ModuleFunction.h **** 			return FALSE;
 217:ModuleFunction.h **** 			break;
 218:ModuleFunction.h **** 
 219:ModuleFunction.h **** 		case 2:
 220:ModuleFunction.h **** 			cbi(DDRD,0);	cbi(PORTD,0);		
 4140               	.LM615:
 4141 111a 8898      		cbi 49-32,0
 4142 111c 9098      		cbi 50-32,0
 221:ModuleFunction.h **** 			sbi(DDRD,3);	sbi(PORTD,3);
 4144               	.LM616:
 4145 111e 8B9A      		sbi 49-32,3
 4146 1120 939A      		sbi 50-32,3
 222:ModuleFunction.h **** 	
 223:ModuleFunction.h **** 			temp = (0x01 & inp(PIND));
 4148               	.LM617:
 4149 1122 80B3      		in r24,48-32
 224:ModuleFunction.h **** 			
 225:ModuleFunction.h **** 			if(temp == 0x01)
 4151               	.LM618:
 4152 1124 80FF      		sbrs r24,0
 4153 1126 00C0      		rjmp .L295
 226:ModuleFunction.h **** 			{
 227:ModuleFunction.h **** 				cbi(PORTD,3);						
 4155               	.LM619:
 4156 1128 9398      		cbi 50-32,3
 4157 112a 00C0      		rjmp .L300
 4158               	.L295:
 228:ModuleFunction.h **** 				delayms(1);	
 229:ModuleFunction.h **** 				return TRUE;
 230:ModuleFunction.h **** 			}
 231:ModuleFunction.h **** 
 232:ModuleFunction.h **** 			sbi(PORTD,3);
 4160               	.LM620:
 4161 112c 939A      		sbi 50-32,3
 4162 112e 00C0      		rjmp .L299
 4163               	.L289:
 233:ModuleFunction.h **** 			return FALSE;
 234:ModuleFunction.h **** 			break;
 235:ModuleFunction.h **** 
 236:ModuleFunction.h **** 		case 3:
 237:ModuleFunction.h **** 			cbi(DDRD,4);	cbi(PORTD,4);		
 4165               	.LM621:
 4166 1130 8C98      		cbi 49-32,4
 4167 1132 9498      		cbi 50-32,4
 238:ModuleFunction.h **** 			sbi(DDRD,7);	sbi(PORTD,7);
 4169               	.LM622:
 4170 1134 8F9A      		sbi 49-32,7
 4171 1136 979A      		sbi 50-32,7
 239:ModuleFunction.h **** 
 240:ModuleFunction.h **** 			temp = (0x10 & inp(PIND));
 4173               	.LM623:
 4174 1138 80B3      		in r24,48-32
 241:ModuleFunction.h **** 
 242:ModuleFunction.h **** 			if(temp == 0x10)
 4176               	.LM624:
 4177 113a 84FF      		sbrs r24,4
 4178 113c 00C0      		rjmp .L296
 243:ModuleFunction.h **** 			{
 244:ModuleFunction.h **** 				cbi(PORTD,7);						
 4180               	.LM625:
 4181 113e 9798      		cbi 50-32,7
 4182 1140 00C0      		rjmp .L300
 4183               	.L296:
 245:ModuleFunction.h **** 				delayms(1);	
 246:ModuleFunction.h **** 				return TRUE;
 247:ModuleFunction.h **** 			}
 248:ModuleFunction.h **** 
 249:ModuleFunction.h **** 			sbi(PORTD,7);
 4185               	.LM626:
 4186 1142 979A      		sbi 50-32,7
 4187 1144 00C0      		rjmp .L299
 4188               	.L290:
 250:ModuleFunction.h **** 			return FALSE;
 251:ModuleFunction.h **** 			break;
 252:ModuleFunction.h **** 
 253:ModuleFunction.h **** 		case 4:
 254:ModuleFunction.h **** 			cbi(DDRE,0);	cbi(PORTE,0);		
 4190               	.LM627:
 4191 1146 1098      		cbi 34-32,0
 4192 1148 1898      		cbi 35-32,0
 255:ModuleFunction.h **** 			sbi(DDRE,3);	sbi(PORTE,3);
 4194               	.LM628:
 4195 114a 139A      		sbi 34-32,3
 4196 114c 1B9A      		sbi 35-32,3
 256:ModuleFunction.h **** 		
 257:ModuleFunction.h **** 			temp = (0x01 & inp(PINE));
 4198               	.LM629:
 4199 114e 81B1      		in r24,33-32
 258:ModuleFunction.h **** 
 259:ModuleFunction.h **** 			if(temp == 0x01)
 4201               	.LM630:
 4202 1150 80FF      		sbrs r24,0
 4203 1152 00C0      		rjmp .L297
 260:ModuleFunction.h **** 			{
 261:ModuleFunction.h **** 				cbi(PORTE,3);						
 4205               	.LM631:
 4206 1154 1B98      		cbi 35-32,3
 4207 1156 00C0      		rjmp .L300
 4208               	.L297:
 262:ModuleFunction.h **** 				delayms(1);	
 263:ModuleFunction.h **** 				return TRUE;
 264:ModuleFunction.h **** 			}
 265:ModuleFunction.h **** 
 266:ModuleFunction.h **** 			sbi(PORTE,3);
 4210               	.LM632:
 4211 1158 1B9A      		sbi 35-32,3
 4212 115a 00C0      		rjmp .L299
 4213               	.L302:
 267:ModuleFunction.h **** 			return FALSE;
 268:ModuleFunction.h **** 			break;
 269:ModuleFunction.h **** 
 270:ModuleFunction.h **** 		case 5:
 271:ModuleFunction.h **** 			cbi(DDRE,7);	cbi(PORTE,7);		
 4215               	.LM633:
 4216 115c 1798      		cbi 34-32,7
 4217 115e 1F98      		cbi 35-32,7
 272:ModuleFunction.h **** 			sbi(DDRF,5);	sbi(PORTF,5);
 4219               	.LM634:
 4220 1160 8091 6100 		lds r24,97
 4221 1164 8062      		ori r24,lo8(32)
 4222 1166 8093 6100 		sts 97,r24
 4223 116a 8091 6200 		lds r24,98
 4224 116e 8062      		ori r24,lo8(32)
 4225 1170 8093 6200 		sts 98,r24
 273:ModuleFunction.h **** 	
 274:ModuleFunction.h **** 			temp = (0x80 & inp(PINE));
 4227               	.LM635:
 4228 1174 81B1      		in r24,33-32
 4229 1176 8078      		andi r24,lo8(-128)
 275:ModuleFunction.h **** 			
 276:ModuleFunction.h **** 			if(temp == 0x80)
 4231               	.LM636:
 4232 1178 8038      		cpi r24,lo8(-128)
 4233 117a 01F4      		brne .L298
 277:ModuleFunction.h **** 			{
 278:ModuleFunction.h **** 				cbi(PORTF,5);						
 4235               	.LM637:
 4236 117c 8091 6200 		lds r24,98
 4237 1180 8F7D      		andi r24,lo8(-33)
 4238 1182 8093 6200 		sts 98,r24
 4239               	.L300:
 279:ModuleFunction.h **** 				delayms(1);	
 4241               	.LM638:
 4242 1186 81E0      		ldi r24,lo8(1)
 4243 1188 90E0      		ldi r25,hi8(1)
 4244 118a 0E94 0000 		call delayms
 280:ModuleFunction.h **** 				return TRUE;
 4246               	.LM639:
 4247 118e 81E0      		ldi r24,lo8(1)
 4248 1190 0895      		ret
 4249               	.L298:
 281:ModuleFunction.h **** 			}
 282:ModuleFunction.h **** 
 283:ModuleFunction.h **** 			sbi(PORTF,5);
 4251               	.LM640:
 4252 1192 8091 6200 		lds r24,98
 4253 1196 8062      		ori r24,lo8(32)
 4254 1198 8093 6200 		sts 98,r24
 4255               	.L299:
 284:ModuleFunction.h **** 			return FALSE;
 4257               	.LM641:
 4258 119c 80E0      		ldi r24,lo8(0)
 4259 119e 0895      		ret
 4260               	.L286:
 285:ModuleFunction.h **** 			break;
 286:ModuleFunction.h **** 		
 287:ModuleFunction.h **** 		default:
 288:ModuleFunction.h **** 			break;	
 289:ModuleFunction.h **** 
 290:ModuleFunction.h **** 	}
 291:ModuleFunction.h **** 
 292:ModuleFunction.h **** }
 4262               	.LM642:
 4263 11a0 0895      		ret
 4265               	.Lscope37:
 4267               		.stabd	78,0,0
 4270               	.global	Bulldozer
 4272               	Bulldozer:
 4273               		.stabd	46,0,0
 293:ModuleFunction.h **** 
 294:ModuleFunction.h **** 
 295:ModuleFunction.h **** //---------------------------------------------------------
 296:ModuleFunction.h **** bool Bulldozer(u08 state)
 297:ModuleFunction.h **** {
 4275               	.LM643:
 4276               	.LFBB38:
 4277               	/* prologue: function */
 4278               	/* frame size = 0 */
 4279               	/* stack size = 0 */
 4280               	.L__stack_usage = 0
 298:ModuleFunction.h **** 
 299:ModuleFunction.h **** 	outp(0xfc, DDRC);
 4282               	.LM644:
 4283 11a2 9CEF      		ldi r25,lo8(-4)
 4284 11a4 94BB      		out 52-32,r25
 300:ModuleFunction.h **** 	outp(0xff, PORTC);
 4286               	.LM645:
 4287 11a6 9FEF      		ldi r25,lo8(-1)
 4288 11a8 95BB      		out 53-32,r25
 301:ModuleFunction.h **** 
 302:ModuleFunction.h **** 	if(inp(PINC)==state)    
 4290               	.LM646:
 4291 11aa 23B3      		in r18,51-32
 303:ModuleFunction.h **** 		return TRUE;
 4293               	.LM647:
 4294 11ac 91E0      		ldi r25,lo8(1)
 4295 11ae 2813      		cpse r18,r24
 4296 11b0 90E0      		ldi r25,lo8(0)
 4297               	.L304:
 304:ModuleFunction.h ****     else
 305:ModuleFunction.h **** 		return FALSE;
 306:ModuleFunction.h **** 
 307:ModuleFunction.h **** }
 4299               	.LM648:
 4300 11b2 892F      		mov r24,r25
 4301               	/* epilogue start */
 4302 11b4 0895      		ret
 4304               	.Lscope38:
 4306               		.stabd	78,0,0
 4310               	.global	Buzzer
 4312               	Buzzer:
 4313               		.stabd	46,0,0
 308:ModuleFunction.h **** 
 309:ModuleFunction.h **** 
 310:ModuleFunction.h **** //---------------------------------------------------------
 311:ModuleFunction.h **** void Buzzer(u08 pos,u08 num)
 312:ModuleFunction.h **** {
 4315               	.LM649:
 4316               	.LFBB39:
 4317 11b6 DF92      		push r13
 4318 11b8 EF92      		push r14
 4319 11ba FF92      		push r15
 4320 11bc 0F93      		push r16
 4321 11be 1F93      		push r17
 4322 11c0 CF93      		push r28
 4323 11c2 DF93      		push r29
 4324               	/* prologue: function */
 4325               	/* frame size = 0 */
 4326               	/* stack size = 7 */
 4327               	.L__stack_usage = 7
 4328 11c4 D82E      		mov r13,r24
 313:ModuleFunction.h **** 
 314:ModuleFunction.h **** 	int i,k;
 315:ModuleFunction.h **** 
 316:ModuleFunction.h **** 	for(i=0;i<num;i++){
 4330               	.LM650:
 4331 11c6 C0E0      		ldi r28,lo8(0)
 4332 11c8 D0E0      		ldi r29,hi8(0)
 4333 11ca 062F      		mov r16,r22
 4334 11cc 10E0      		ldi r17,lo8(0)
 317:ModuleFunction.h **** 		Beep(pos);	
 318:ModuleFunction.h **** 		if(i==num-1) break;
 4336               	.LM651:
 4337 11ce 7801      		movw r14,r16
 4338 11d0 0894      		sec
 4339 11d2 E108      		sbc r14,__zero_reg__
 4340 11d4 F108      		sbc r15,__zero_reg__
 316:ModuleFunction.h **** 	for(i=0;i<num;i++){
 4342               	.LM652:
 4343 11d6 00C0      		rjmp .L306
 4344               	.L308:
 317:ModuleFunction.h **** 		Beep(pos);	
 4346               	.LM653:
 4347 11d8 8D2D      		mov r24,r13
 4348 11da 90E0      		ldi r25,lo8(0)
 4349 11dc 0E94 0000 		call Beep
 4351               	.LM654:
 4352 11e0 CE15      		cp r28,r14
 4353 11e2 DF05      		cpc r29,r15
 4354 11e4 01F0      		breq .L305
 319:ModuleFunction.h **** 		delayms(600);
 4356               	.LM655:
 4357 11e6 88E5      		ldi r24,lo8(600)
 4358 11e8 92E0      		ldi r25,hi8(600)
 4359 11ea 0E94 0000 		call delayms
 316:ModuleFunction.h **** 	for(i=0;i<num;i++){
 4361               	.LM656:
 4362 11ee 2196      		adiw r28,1
 4363               	.L306:
 316:ModuleFunction.h **** 	for(i=0;i<num;i++){
 4365               	.LM657:
 4366 11f0 C017      		cp r28,r16
 4367 11f2 D107      		cpc r29,r17
 4368 11f4 04F0      		brlt .L308
 4369               	.L305:
 4370               	/* epilogue start */
 320:ModuleFunction.h **** 	}		
 321:ModuleFunction.h **** 
 322:ModuleFunction.h **** }	
 4372               	.LM658:
 4373 11f6 DF91      		pop r29
 4374 11f8 CF91      		pop r28
 4375 11fa 1F91      		pop r17
 4376 11fc 0F91      		pop r16
 4377 11fe FF90      		pop r15
 4378 1200 EF90      		pop r14
 4379 1202 DF90      		pop r13
 4380 1204 0895      		ret
 4385               	.Lscope39:
 4387               		.stabd	78,0,0
 4391               	.global	LcdDisplay
 4393               	LcdDisplay:
 4394               		.stabd	46,0,0
 323:ModuleFunction.h **** 
 324:ModuleFunction.h **** 
 325:ModuleFunction.h **** //---------------------------------------------------------
 326:ModuleFunction.h **** void LcdDisplay(char* msg1,char* msg2)
 327:ModuleFunction.h **** {
 4396               	.LM659:
 4397               	.LFBB40:
 4398 1206 EF92      		push r14
 4399 1208 FF92      		push r15
 4400 120a 0F93      		push r16
 4401 120c 1F93      		push r17
 4402 120e CF93      		push r28
 4403 1210 DF93      		push r29
 4404               	/* prologue: function */
 4405               	/* frame size = 0 */
 4406               	/* stack size = 6 */
 4407               	.L__stack_usage = 6
 4408 1212 8C01      		movw r16,r24
 4409 1214 EB01      		movw r28,r22
 328:ModuleFunction.h **** 
 329:ModuleFunction.h **** 	unsigned char find1,find2,SaveVal1,SaveVal2,cnt;
 330:ModuleFunction.h **** 	unsigned char cnt1 = 0, cnt2 = 0; 
 331:ModuleFunction.h **** 
 332:ModuleFunction.h **** 		SaveVal1 = text1;
 4411               	.LM660:
 4412 1216 5091 0000 		lds r21,text1
 333:ModuleFunction.h **** 		SaveVal2 = text2;
 4414               	.LM661:
 4415 121a F090 0000 		lds r15,text2
 4416 121e FC01      		movw r30,r24
 334:ModuleFunction.h **** 	
 335:ModuleFunction.h **** 		for(cnt=0;cnt<9;cnt++){
 4418               	.LM662:
 4419 1220 90E0      		ldi r25,lo8(0)
 4420 1222 00C0      		rjmp .L312
 4421               	.L326:
 4422 1224 982F      		mov r25,r24
 4423               	.L312:
 336:ModuleFunction.h **** 			find1=msg1[cnt];
 4425               	.LM663:
 4426 1226 8191      		ld r24,Z+
 337:ModuleFunction.h **** 			text1 = cnt;
 338:ModuleFunction.h **** 			if(find1 == 0) break;   
 4428               	.LM664:
 4429 1228 8823      		tst r24
 4430 122a 01F4      		brne .L310
 4431               	.L328:
 4432 122c 9093 0000 		sts text1,r25
 337:ModuleFunction.h **** 			text1 = cnt;
 4434               	.LM665:
 4435 1230 80E0      		ldi r24,lo8(0)
 4436 1232 00C0      		rjmp .L311
 4437               	.L310:
 335:ModuleFunction.h **** 		for(cnt=0;cnt<9;cnt++){
 4439               	.LM666:
 4440 1234 892F      		mov r24,r25
 4441 1236 8F5F      		subi r24,lo8(-(1))
 4442 1238 8930      		cpi r24,lo8(9)
 4443 123a 01F4      		brne .L326
 4444 123c 00C0      		rjmp .L328
 4445               	.L327:
 339:ModuleFunction.h **** 		}
 340:ModuleFunction.h **** 
 341:ModuleFunction.h **** 		for(cnt=0;cnt<9;cnt++){
 4447               	.LM667:
 4448 123e 822F      		mov r24,r18
 4449               	.L311:
 342:ModuleFunction.h **** 			find2=msg2[cnt];
 4451               	.LM668:
 4452 1240 FE01      		movw r30,r28
 4453 1242 E80F      		add r30,r24
 4454 1244 F11D      		adc r31,__zero_reg__
 343:ModuleFunction.h **** 			text2 = cnt;
 344:ModuleFunction.h **** 			if(find2 == 0) break;
 4456               	.LM669:
 4457 1246 2081      		ld r18,Z
 4458 1248 2223      		tst r18
 4459 124a 01F4      		brne .L314
 4460               	.L329:
 4461 124c 8093 0000 		sts text2,r24
 343:ModuleFunction.h **** 			text2 = cnt;
 4463               	.LM670:
 4464 1250 60E0      		ldi r22,lo8(0)
 4465 1252 40E0      		ldi r20,lo8(0)
 4466 1254 00C0      		rjmp .L315
 4467               	.L314:
 341:ModuleFunction.h **** 		for(cnt=0;cnt<9;cnt++){
 4469               	.LM671:
 4470 1256 282F      		mov r18,r24
 4471 1258 2F5F      		subi r18,lo8(-(1))
 4472 125a 2930      		cpi r18,lo8(9)
 4473 125c 01F4      		brne .L327
 4474 125e 00C0      		rjmp .L329
 4475               	.L318:
 345:ModuleFunction.h **** 		} 
 346:ModuleFunction.h **** 
 347:ModuleFunction.h **** 		for(cnt=0; cnt<text1; cnt++){
 348:ModuleFunction.h **** 			if(string1[cnt] == msg1[cnt])	cnt1+=1;  
 4477               	.LM672:
 4478 1260 242F      		mov r18,r20
 4479 1262 30E0      		ldi r19,lo8(0)
 4480 1264 F801      		movw r30,r16
 4481 1266 E20F      		add r30,r18
 4482 1268 F31F      		adc r31,r19
 4483 126a 7081      		ld r23,Z
 4484 126c F901      		movw r30,r18
 4485 126e E050      		subi r30,lo8(-(string1))
 4486 1270 F040      		sbci r31,hi8(-(string1))
 4487 1272 E081      		ld r30,Z
 4488 1274 E717      		cp r30,r23
 4489 1276 01F4      		brne .L317
 4491               	.LM673:
 4492 1278 6F5F      		subi r22,lo8(-(1))
 4493               	.L317:
 349:ModuleFunction.h **** 			string1[cnt] = msg1[cnt];
 4495               	.LM674:
 4496 127a 2050      		subi r18,lo8(-(string1))
 4497 127c 3040      		sbci r19,hi8(-(string1))
 4498 127e F901      		movw r30,r18
 4499 1280 7083      		st Z,r23
 347:ModuleFunction.h **** 		for(cnt=0; cnt<text1; cnt++){
 4501               	.LM675:
 4502 1282 4F5F      		subi r20,lo8(-(1))
 4503               	.L315:
 347:ModuleFunction.h **** 		for(cnt=0; cnt<text1; cnt++){
 4505               	.LM676:
 4506 1284 4917      		cp r20,r25
 4507 1286 00F0      		brlo .L318
 347:ModuleFunction.h **** 		for(cnt=0; cnt<text1; cnt++){
 4509               	.LM677:
 4510 1288 E0E0      		ldi r30,lo8(string2)
 4511 128a F0E0      		ldi r31,hi8(string2)
 4512 128c DE01      		movw r26,r28
 326:ModuleFunction.h **** void LcdDisplay(char* msg1,char* msg2)
 4514               	.LM678:
 4515 128e 90E0      		ldi r25,lo8(0)
 4516 1290 8E0F      		add r24,r30
 4517 1292 9F1F      		adc r25,r31
 4518 1294 EE24      		clr r14
 4519 1296 00C0      		rjmp .L319
 4520               	.L321:
 350:ModuleFunction.h **** 		}  
 351:ModuleFunction.h **** 
 352:ModuleFunction.h **** 		for(cnt=0; cnt<text2; cnt++){
 353:ModuleFunction.h **** 			if(string2[cnt] == msg2[cnt])	cnt2+=1;   
 4522               	.LM679:
 4523 1298 2D91      		ld r18,X+
 4524 129a 3081      		ld r19,Z
 4525 129c 3217      		cp r19,r18
 4526 129e 01F4      		brne .L320
 4528               	.LM680:
 4529 12a0 E394      		inc r14
 4530               	.L320:
 354:ModuleFunction.h **** 			string2[cnt] = msg2[cnt];
 4532               	.LM681:
 4533 12a2 2193      		st Z+,r18
 4534               	.L319:
 352:ModuleFunction.h **** 		for(cnt=0; cnt<text2; cnt++){
 4536               	.LM682:
 4537 12a4 E817      		cp r30,r24
 4538 12a6 F907      		cpc r31,r25
 4539 12a8 01F4      		brne .L321
 355:ModuleFunction.h **** 		}
 356:ModuleFunction.h **** 	
 357:ModuleFunction.h **** 	if(cnt1==SaveVal1){
 4541               	.LM683:
 4542 12aa 6517      		cp r22,r21
 4543 12ac 01F0      		breq .L330
 4544               	.L322:
 358:ModuleFunction.h **** 		lcd_str_out(1,1,msg1);
 359:ModuleFunction.h **** 	}else{
 360:ModuleFunction.h **** 		lcd_str_out(1,1,empty);
 4546               	.LM684:
 4547 12ae 81E0      		ldi r24,lo8(1)
 4548 12b0 61E0      		ldi r22,lo8(1)
 4549 12b2 40E0      		ldi r20,lo8(empty)
 4550 12b4 50E0      		ldi r21,hi8(empty)
 4551 12b6 0E94 0000 		call lcd_str_out
 4552               	.L330:
 361:ModuleFunction.h **** 		lcd_str_out(1,1,msg1);
 4554               	.LM685:
 4555 12ba 81E0      		ldi r24,lo8(1)
 4556 12bc 61E0      		ldi r22,lo8(1)
 4557 12be A801      		movw r20,r16
 4558 12c0 0E94 0000 		call lcd_str_out
 362:ModuleFunction.h **** 	}
 363:ModuleFunction.h **** 
 364:ModuleFunction.h **** 	if(cnt2==SaveVal2){
 4560               	.LM686:
 4561 12c4 EF14      		cp r14,r15
 4562 12c6 01F0      		breq .L331
 4563               	.L324:
 365:ModuleFunction.h **** 		lcd_str_out(2,1,msg2);
 366:ModuleFunction.h **** 	}else{
 367:ModuleFunction.h **** 		lcd_str_out(2,1,empty);
 4565               	.LM687:
 4566 12c8 82E0      		ldi r24,lo8(2)
 4567 12ca 61E0      		ldi r22,lo8(1)
 4568 12cc 40E0      		ldi r20,lo8(empty)
 4569 12ce 50E0      		ldi r21,hi8(empty)
 4570 12d0 0E94 0000 		call lcd_str_out
 4571               	.L331:
 368:ModuleFunction.h **** 		lcd_str_out(2,1,msg2);
 4573               	.LM688:
 4574 12d4 82E0      		ldi r24,lo8(2)
 4575 12d6 61E0      		ldi r22,lo8(1)
 4576 12d8 AE01      		movw r20,r28
 4577 12da 0E94 0000 		call lcd_str_out
 4578               	/* epilogue start */
 369:ModuleFunction.h **** 	}    
 370:ModuleFunction.h **** 
 371:ModuleFunction.h **** }
 4580               	.LM689:
 4581 12de DF91      		pop r29
 4582 12e0 CF91      		pop r28
 4583 12e2 1F91      		pop r17
 4584 12e4 0F91      		pop r16
 4585 12e6 FF90      		pop r15
 4586 12e8 EF90      		pop r14
 4587 12ea 0895      		ret
 4596               	.Lscope40:
 4598               		.stabd	78,0,0
 4604               	.global	DC_Control
 4606               	DC_Control:
 4607               		.stabd	46,0,0
 372:ModuleFunction.h **** 
 373:ModuleFunction.h **** 
 374:ModuleFunction.h **** //---------------------------------------------------------
 375:ModuleFunction.h **** void DC_Control(u08 pos,u08 sel_motor,u08 pwm_value,u08 direction)
 376:ModuleFunction.h **** {
 4609               	.LM690:
 4610               	.LFBB41:
 4611               	/* prologue: function */
 4612               	/* frame size = 0 */
 4613               	/* stack size = 0 */
 4614               	.L__stack_usage = 0
 377:ModuleFunction.h **** //	m_nPwmPeriod = 0;
 378:ModuleFunction.h **** 
 379:ModuleFunction.h **** 	if(pos == 0){
 4616               	.LM691:
 4617 12ec 8823      		tst r24
 4618 12ee 01F4      		brne .L332
 380:ModuleFunction.h **** 		DcMotor_temp(direction,sel_motor,pwm_value);
 4620               	.LM692:
 4621 12f0 822F      		mov r24,r18
 4622 12f2 0E94 0000 		call DcMotor_temp
 4623               	.L332:
 4624 12f6 0895      		ret
 4626               	.Lscope41:
 4628               		.stabd	78,0,0
 4632               	.global	LEDModuleCtrl
 4634               	LEDModuleCtrl:
 4635               		.stabd	46,0,0
 381:ModuleFunction.h **** 	}
 382:ModuleFunction.h **** 	
 383:ModuleFunction.h **** 	/*else if(pos == 1){
 384:ModuleFunction.h **** 		Motor_1(direction,sel_motor,pwm_value);
 385:ModuleFunction.h **** 	}else if(pos == 2){
 386:ModuleFunction.h **** 		Motor_2(direction,sel_motor,pwm_value);
 387:ModuleFunction.h **** 	}
 388:ModuleFunction.h **** 
 389:ModuleFunction.h **** 	if(pos == 3){
 390:ModuleFunction.h **** 		Motor_3(direction,sel_motor,pwm_value);
 391:ModuleFunction.h **** 	}else if(pos == 4){
 392:ModuleFunction.h **** 		Motor_4(direction,sel_motor,pwm_value);
 393:ModuleFunction.h **** 	}else if(pos == 5){
 394:ModuleFunction.h **** 		Motor_5(direction,sel_motor,pwm_value);
 395:ModuleFunction.h **** 	}*/
 396:ModuleFunction.h **** 
 397:ModuleFunction.h **** }
 398:ModuleFunction.h **** 
 399:ModuleFunction.h **** 
 400:ModuleFunction.h **** //---------------------------------------------------------
 401:ModuleFunction.h **** void LEDModuleCtrl(u08 position,u08 index)
 402:ModuleFunction.h **** {
 4637               	.LM693:
 4638               	.LFBB42:
 4639               	/* prologue: function */
 4640               	/* frame size = 0 */
 4641               	/* stack size = 0 */
 4642               	.L__stack_usage = 0
 403:ModuleFunction.h **** 
 404:ModuleFunction.h **** 	static u08 swvalue = 0;
 405:ModuleFunction.h **** 	u08 LedState,i;
 406:ModuleFunction.h **** 
 407:ModuleFunction.h **** 	switch(position){
 4644               	.LM694:
 4645 12f8 8330      		cpi r24,lo8(3)
 4646 12fa 01F4      		brne .+2
 4647 12fc 00C0      		rjmp .L338
 4648 12fe 8430      		cpi r24,lo8(4)
 4649 1300 00F4      		brsh .L341
 4650 1302 8130      		cpi r24,lo8(1)
 4651 1304 01F0      		breq .L336
 4652 1306 8230      		cpi r24,lo8(2)
 4653 1308 01F0      		breq .+2
 4654 130a 00C0      		rjmp .L334
 4655 130c 00C0      		rjmp .L371
 4656               	.L341:
 4657 130e 8430      		cpi r24,lo8(4)
 4658 1310 01F4      		brne .+2
 4659 1312 00C0      		rjmp .L339
 4660 1314 8530      		cpi r24,lo8(5)
 4661 1316 01F0      		breq .+2
 4662 1318 00C0      		rjmp .L334
 4663 131a 00C0      		rjmp .L372
 4664               	.L336:
 408:ModuleFunction.h **** 		case 1:			//Module_1
 409:ModuleFunction.h **** 			sbi(DDRB , 0);	sbi(DDRB , 1);	sbi(DDRB , 2);	sbi(DDRB , 3);	//LED port initialize
 4666               	.LM695:
 4667 131c B89A      		sbi 55-32,0
 4668 131e B99A      		sbi 55-32,1
 4669 1320 BA9A      		sbi 55-32,2
 4670 1322 BB9A      		sbi 55-32,3
 4671 1324 80E0      		ldi r24,lo8(0)
 4672 1326 90E0      		ldi r25,hi8(0)
 410:ModuleFunction.h **** 
 411:ModuleFunction.h **** 			for(i=0; i<4; i++)
 412:ModuleFunction.h **** 			{
 413:ModuleFunction.h **** 				LedState = index%2;                  
 414:ModuleFunction.h **** 				index = index >> 1;
 415:ModuleFunction.h **** 				if(LedState == 1) cbi(PORTB, i);  
 416:ModuleFunction.h **** 				else sbi(PORTB,i);
 4674               	.LM696:
 4675 1328 21E0      		ldi r18,lo8(1)
 4676 132a 30E0      		ldi r19,hi8(1)
 4677               	.L344:
 413:ModuleFunction.h **** 				LedState = index%2;                  
 4679               	.LM697:
 4680 132c 462F      		mov r20,r22
 4681 132e 4170      		andi r20,lo8(1)
 414:ModuleFunction.h **** 				index = index >> 1;
 4683               	.LM698:
 4684 1330 6695      		lsr r22
 415:ModuleFunction.h **** 				if(LedState == 1) cbi(PORTB, i);  
 4686               	.LM699:
 4687 1332 4130      		cpi r20,lo8(1)
 4688 1334 01F4      		brne .L342
 415:ModuleFunction.h **** 				if(LedState == 1) cbi(PORTB, i);  
 4690               	.LM700:
 4691 1336 78B3      		in r23,56-32
 4692 1338 A901      		movw r20,r18
 4693 133a 082E      		mov r0,r24
 4694 133c 00C0      		rjmp 2f
 4695 133e 440F      	1:	lsl r20
 4696 1340 551F      		rol r21
 4697 1342 0A94      	2:	dec r0
 4698 1344 02F4      		brpl 1b
 4699 1346 4095      		com r20
 4700 1348 4723      		and r20,r23
 4701 134a 48BB      		out 56-32,r20
 4702 134c 00C0      		rjmp .L343
 4703               	.L342:
 4705               	.LM701:
 4706 134e 78B3      		in r23,56-32
 4707 1350 A901      		movw r20,r18
 4708 1352 082E      		mov r0,r24
 4709 1354 00C0      		rjmp 2f
 4710 1356 440F      	1:	lsl r20
 4711 1358 551F      		rol r21
 4712 135a 0A94      	2:	dec r0
 4713 135c 02F4      		brpl 1b
 4714 135e 742B      		or r23,r20
 4715 1360 78BB      		out 56-32,r23
 4716               	.L343:
 4717 1362 0196      		adiw r24,1
 411:ModuleFunction.h **** 			for(i=0; i<4; i++)
 4719               	.LM702:
 4720 1364 8430      		cpi r24,4
 4721 1366 9105      		cpc r25,__zero_reg__
 4722 1368 01F4      		brne .L344
 4723 136a 0895      		ret
 4724               	.L371:
 417:ModuleFunction.h **** 			}
 418:ModuleFunction.h **** 			break;
 419:ModuleFunction.h **** 
 420:ModuleFunction.h **** 		case 2:
 421:ModuleFunction.h **** 			sbi(DDRD ,0 );	sbi(DDRD ,1 );	sbi(DDRD ,2 );	sbi(DDRD ,3 );
 4726               	.LM703:
 4727 136c 889A      		sbi 49-32,0
 4728 136e 899A      		sbi 49-32,1
 4729 1370 8A9A      		sbi 49-32,2
 4730 1372 8B9A      		sbi 49-32,3
 4731 1374 80E0      		ldi r24,lo8(0)
 4732 1376 90E0      		ldi r25,hi8(0)
 422:ModuleFunction.h **** 			
 423:ModuleFunction.h **** 			for(i=0; i<4; i++)
 424:ModuleFunction.h **** 			{
 425:ModuleFunction.h **** 				LedState = index%2;                  
 426:ModuleFunction.h **** 				index = index >> 1;
 427:ModuleFunction.h **** 				if(LedState == 1) cbi(PORTD, i);
 428:ModuleFunction.h **** 				else sbi(PORTD,i);
 4734               	.LM704:
 4735 1378 21E0      		ldi r18,lo8(1)
 4736 137a 30E0      		ldi r19,hi8(1)
 4737               	.L347:
 425:ModuleFunction.h **** 				LedState = index%2;                  
 4739               	.LM705:
 4740 137c 462F      		mov r20,r22
 4741 137e 4170      		andi r20,lo8(1)
 426:ModuleFunction.h **** 				index = index >> 1;
 4743               	.LM706:
 4744 1380 6695      		lsr r22
 427:ModuleFunction.h **** 				if(LedState == 1) cbi(PORTD, i);
 4746               	.LM707:
 4747 1382 4130      		cpi r20,lo8(1)
 4748 1384 01F4      		brne .L345
 427:ModuleFunction.h **** 				if(LedState == 1) cbi(PORTD, i);
 4750               	.LM708:
 4751 1386 72B3      		in r23,50-32
 4752 1388 A901      		movw r20,r18
 4753 138a 082E      		mov r0,r24
 4754 138c 00C0      		rjmp 2f
 4755 138e 440F      	1:	lsl r20
 4756 1390 551F      		rol r21
 4757 1392 0A94      	2:	dec r0
 4758 1394 02F4      		brpl 1b
 4759 1396 4095      		com r20
 4760 1398 4723      		and r20,r23
 4761 139a 42BB      		out 50-32,r20
 4762 139c 00C0      		rjmp .L346
 4763               	.L345:
 4765               	.LM709:
 4766 139e 72B3      		in r23,50-32
 4767 13a0 A901      		movw r20,r18
 4768 13a2 082E      		mov r0,r24
 4769 13a4 00C0      		rjmp 2f
 4770 13a6 440F      	1:	lsl r20
 4771 13a8 551F      		rol r21
 4772 13aa 0A94      	2:	dec r0
 4773 13ac 02F4      		brpl 1b
 4774 13ae 742B      		or r23,r20
 4775 13b0 72BB      		out 50-32,r23
 4776               	.L346:
 4777 13b2 0196      		adiw r24,1
 423:ModuleFunction.h **** 			for(i=0; i<4; i++)
 4779               	.LM710:
 4780 13b4 8430      		cpi r24,4
 4781 13b6 9105      		cpc r25,__zero_reg__
 4782 13b8 01F4      		brne .L347
 4783 13ba 0895      		ret
 4784               	.L338:
 429:ModuleFunction.h **** 			}
 430:ModuleFunction.h **** 			break;
 431:ModuleFunction.h **** 
 432:ModuleFunction.h **** 		case 3:
 433:ModuleFunction.h **** 			sbi(DDRD, 4);	sbi(DDRD ,5);	sbi(DDRD ,6);	sbi(DDRD ,7);
 4786               	.LM711:
 4787 13bc 8C9A      		sbi 49-32,4
 4788 13be 8D9A      		sbi 49-32,5
 4789 13c0 8E9A      		sbi 49-32,6
 4790 13c2 8F9A      		sbi 49-32,7
 4791 13c4 80E0      		ldi r24,lo8(0)
 4792 13c6 90E0      		ldi r25,hi8(0)
 434:ModuleFunction.h **** 
 435:ModuleFunction.h **** 			for(i=4; i<8; i++)
 436:ModuleFunction.h **** 			{
 437:ModuleFunction.h **** 				LedState = index%2;                  
 438:ModuleFunction.h **** 				index = index >> 1;
 439:ModuleFunction.h **** 				if(LedState == 1) cbi(PORTD, i);
 440:ModuleFunction.h **** 				else sbi(PORTD,i);
 4794               	.LM712:
 4795 13c8 21E0      		ldi r18,lo8(1)
 4796 13ca 30E0      		ldi r19,hi8(1)
 4797               	.L350:
 437:ModuleFunction.h **** 				LedState = index%2;                  
 4799               	.LM713:
 4800 13cc 762F      		mov r23,r22
 4801 13ce 7170      		andi r23,lo8(1)
 438:ModuleFunction.h **** 				index = index >> 1;
 4803               	.LM714:
 4804 13d0 6695      		lsr r22
 4805 13d2 AC01      		movw r20,r24
 4806 13d4 4C5F      		subi r20,lo8(-(4))
 4807 13d6 5F4F      		sbci r21,hi8(-(4))
 439:ModuleFunction.h **** 				if(LedState == 1) cbi(PORTD, i);
 4809               	.LM715:
 4810 13d8 7130      		cpi r23,lo8(1)
 4811 13da 01F4      		brne .L348
 439:ModuleFunction.h **** 				if(LedState == 1) cbi(PORTD, i);
 4813               	.LM716:
 4814 13dc 72B3      		in r23,50-32
 4815 13de F901      		movw r30,r18
 4816 13e0 00C0      		rjmp 2f
 4817 13e2 EE0F      	1:	lsl r30
 4818 13e4 FF1F      		rol r31
 4819 13e6 4A95      	2:	dec r20
 4820 13e8 02F4      		brpl 1b
 4821 13ea AF01      		movw r20,r30
 4822 13ec 4095      		com r20
 4823 13ee 4723      		and r20,r23
 4824 13f0 42BB      		out 50-32,r20
 4825 13f2 00C0      		rjmp .L349
 4826               	.L348:
 4828               	.LM717:
 4829 13f4 72B3      		in r23,50-32
 4830 13f6 F901      		movw r30,r18
 4831 13f8 00C0      		rjmp 2f
 4832 13fa EE0F      	1:	lsl r30
 4833 13fc FF1F      		rol r31
 4834 13fe 4A95      	2:	dec r20
 4835 1400 02F4      		brpl 1b
 4836 1402 7E2B      		or r23,r30
 4837 1404 72BB      		out 50-32,r23
 4838               	.L349:
 4839 1406 0196      		adiw r24,1
 435:ModuleFunction.h **** 			for(i=4; i<8; i++)
 4841               	.LM718:
 4842 1408 8430      		cpi r24,4
 4843 140a 9105      		cpc r25,__zero_reg__
 4844 140c 01F4      		brne .L350
 4845 140e 0895      		ret
 4846               	.L339:
 441:ModuleFunction.h **** 			}
 442:ModuleFunction.h **** 			break;
 443:ModuleFunction.h **** 
 444:ModuleFunction.h **** 		case 4:
 445:ModuleFunction.h **** 			sbi(DDRE , 0);	sbi(DDRE , 1);	sbi(DDRE , 2);	sbi(DDRE , 3);
 4848               	.LM719:
 4849 1410 109A      		sbi 34-32,0
 4850 1412 119A      		sbi 34-32,1
 4851 1414 129A      		sbi 34-32,2
 4852 1416 139A      		sbi 34-32,3
 4853 1418 80E0      		ldi r24,lo8(0)
 4854 141a 90E0      		ldi r25,hi8(0)
 446:ModuleFunction.h **** 		
 447:ModuleFunction.h **** 			for(i=0; i<4; i++)
 448:ModuleFunction.h **** 			{
 449:ModuleFunction.h **** 				LedState = index%2;                  
 450:ModuleFunction.h **** 				index = index >> 1;
 451:ModuleFunction.h **** 				if(LedState == 1) cbi(PORTE, i);
 452:ModuleFunction.h **** 				else sbi(PORTE,i);
 4856               	.LM720:
 4857 141c 21E0      		ldi r18,lo8(1)
 4858 141e 30E0      		ldi r19,hi8(1)
 4859               	.L353:
 449:ModuleFunction.h **** 				LedState = index%2;                  
 4861               	.LM721:
 4862 1420 462F      		mov r20,r22
 4863 1422 4170      		andi r20,lo8(1)
 450:ModuleFunction.h **** 				index = index >> 1;
 4865               	.LM722:
 4866 1424 6695      		lsr r22
 451:ModuleFunction.h **** 				if(LedState == 1) cbi(PORTE, i);
 4868               	.LM723:
 4869 1426 4130      		cpi r20,lo8(1)
 4870 1428 01F4      		brne .L351
 451:ModuleFunction.h **** 				if(LedState == 1) cbi(PORTE, i);
 4872               	.LM724:
 4873 142a 73B1      		in r23,35-32
 4874 142c A901      		movw r20,r18
 4875 142e 082E      		mov r0,r24
 4876 1430 00C0      		rjmp 2f
 4877 1432 440F      	1:	lsl r20
 4878 1434 551F      		rol r21
 4879 1436 0A94      	2:	dec r0
 4880 1438 02F4      		brpl 1b
 4881 143a 4095      		com r20
 4882 143c 4723      		and r20,r23
 4883 143e 43B9      		out 35-32,r20
 4884 1440 00C0      		rjmp .L352
 4885               	.L351:
 4887               	.LM725:
 4888 1442 73B1      		in r23,35-32
 4889 1444 A901      		movw r20,r18
 4890 1446 082E      		mov r0,r24
 4891 1448 00C0      		rjmp 2f
 4892 144a 440F      	1:	lsl r20
 4893 144c 551F      		rol r21
 4894 144e 0A94      	2:	dec r0
 4895 1450 02F4      		brpl 1b
 4896 1452 742B      		or r23,r20
 4897 1454 73B9      		out 35-32,r23
 4898               	.L352:
 4899 1456 0196      		adiw r24,1
 447:ModuleFunction.h **** 			for(i=0; i<4; i++)
 4901               	.LM726:
 4902 1458 8430      		cpi r24,4
 4903 145a 9105      		cpc r25,__zero_reg__
 4904 145c 01F4      		brne .L353
 4905 145e 0895      		ret
 4906               	.L372:
 453:ModuleFunction.h **** 			}
 454:ModuleFunction.h **** 			break;
 455:ModuleFunction.h **** 
 456:ModuleFunction.h **** 		case 5:
 457:ModuleFunction.h **** 			sbi(DDRE ,7 );	sbi(DDRG ,3 );	sbi(DDRG ,4 );	sbi(DDRF ,5 );
 4908               	.LM727:
 4909 1460 179A      		sbi 34-32,7
 4910 1462 8091 6400 		lds r24,100
 4911 1466 8860      		ori r24,lo8(8)
 4912 1468 8093 6400 		sts 100,r24
 4913 146c 8091 6400 		lds r24,100
 4914 1470 8061      		ori r24,lo8(16)
 4915 1472 8093 6400 		sts 100,r24
 4916 1476 8091 6100 		lds r24,97
 4917 147a 8062      		ori r24,lo8(32)
 4918 147c 8093 6100 		sts 97,r24
 458:ModuleFunction.h **** 			
 459:ModuleFunction.h **** 			for(i=0; i<4; i++)
 4920               	.LM728:
 4921 1480 80E0      		ldi r24,lo8(0)
 4922               	.L363:
 460:ModuleFunction.h **** 			{
 461:ModuleFunction.h **** 				LedState = index%2;                  
 4924               	.LM729:
 4925 1482 962F      		mov r25,r22
 4926 1484 9170      		andi r25,lo8(1)
 462:ModuleFunction.h **** 				index = index >> 1;
 4928               	.LM730:
 4929 1486 6695      		lsr r22
 463:ModuleFunction.h **** 				switch(i)
 4931               	.LM731:
 4932 1488 8230      		cpi r24,lo8(2)
 4933 148a 01F0      		breq .L356
 4934 148c 8330      		cpi r24,lo8(3)
 4935 148e 01F0      		breq .L357
 4936 1490 8130      		cpi r24,lo8(1)
 4937 1492 01F0      		breq .L355
 464:ModuleFunction.h **** 				{
 465:ModuleFunction.h **** 					case 0:		if(LedState == 1) cbi(PORTE, 7);
 4939               	.LM732:
 4940 1494 9130      		cpi r25,lo8(1)
 4941 1496 01F4      		brne .L358
 4943               	.LM733:
 4944 1498 1F98      		cbi 35-32,7
 4945 149a 00C0      		rjmp .L359
 4946               	.L358:
 466:ModuleFunction.h **** 								else sbi(PORTE,7);
 4948               	.LM734:
 4949 149c 1F9A      		sbi 35-32,7
 4950 149e 00C0      		rjmp .L359
 4951               	.L355:
 467:ModuleFunction.h **** 								break;
 468:ModuleFunction.h **** 					case 1:		if(LedState == 1) cbi(PORTG, 3);
 4953               	.LM735:
 4954 14a0 9130      		cpi r25,lo8(1)
 4955 14a2 01F4      		brne .L360
 4957               	.LM736:
 4958 14a4 9091 6500 		lds r25,101
 4959 14a8 977F      		andi r25,lo8(-9)
 4960 14aa 00C0      		rjmp .L369
 4961               	.L360:
 469:ModuleFunction.h **** 								else sbi(PORTG,3);
 4963               	.LM737:
 4964 14ac 9091 6500 		lds r25,101
 4965 14b0 9860      		ori r25,lo8(8)
 4966 14b2 00C0      		rjmp .L369
 4967               	.L356:
 470:ModuleFunction.h **** 								break;
 471:ModuleFunction.h **** 					case 2:		if(LedState == 1) cbi(PORTG, 4);
 4969               	.LM738:
 4970 14b4 9130      		cpi r25,lo8(1)
 4971 14b6 01F4      		brne .L361
 4973               	.LM739:
 4974 14b8 9091 6500 		lds r25,101
 4975 14bc 9F7E      		andi r25,lo8(-17)
 4976 14be 00C0      		rjmp .L369
 4977               	.L361:
 472:ModuleFunction.h **** 								else sbi(PORTG,4);
 4979               	.LM740:
 4980 14c0 9091 6500 		lds r25,101
 4981 14c4 9061      		ori r25,lo8(16)
 4982               	.L369:
 4983 14c6 9093 6500 		sts 101,r25
 4984 14ca 00C0      		rjmp .L359
 4985               	.L357:
 473:ModuleFunction.h **** 								break;
 474:ModuleFunction.h **** 					case 3:		if(LedState == 1) cbi(PORTF, 5);
 4987               	.LM741:
 4988 14cc 9130      		cpi r25,lo8(1)
 4989 14ce 01F4      		brne .L362
 4991               	.LM742:
 4992 14d0 9091 6200 		lds r25,98
 4993 14d4 9F7D      		andi r25,lo8(-33)
 4994 14d6 00C0      		rjmp .L370
 4995               	.L362:
 475:ModuleFunction.h **** 								else sbi(PORTF,5);
 4997               	.LM743:
 4998 14d8 9091 6200 		lds r25,98
 4999 14dc 9062      		ori r25,lo8(32)
 5000               	.L370:
 5001 14de 9093 6200 		sts 98,r25
 5002               	.L359:
 459:ModuleFunction.h **** 			for(i=0; i<4; i++)
 5004               	.LM744:
 5005 14e2 8F5F      		subi r24,lo8(-(1))
 5006 14e4 8430      		cpi r24,lo8(4)
 5007 14e6 01F4      		brne .L363
 5008               	.L334:
 5009 14e8 0895      		ret
 5014               	.Lscope42:
 5016               		.stabd	78,0,0
 5020               	.global	MelodyPlay
 5022               	MelodyPlay:
 5023               		.stabd	46,0,0
 476:ModuleFunction.h **** 								break;
 477:ModuleFunction.h **** 				}
 478:ModuleFunction.h **** 
 479:ModuleFunction.h **** 			}
 480:ModuleFunction.h **** 			break;
 481:ModuleFunction.h **** 
 482:ModuleFunction.h **** 		default:
 483:ModuleFunction.h **** 			break;
 484:ModuleFunction.h **** 		
 485:ModuleFunction.h **** 	}
 486:ModuleFunction.h **** 
 487:ModuleFunction.h **** }
 488:ModuleFunction.h **** 
 489:ModuleFunction.h **** 
 490:ModuleFunction.h **** //---------------------------------------------------------
 491:ModuleFunction.h **** void MelodyPlay(u08 pos,u08 melody)
 492:ModuleFunction.h **** {
 5025               	.LM745:
 5026               	.LFBB43:
 5027               	/* prologue: function */
 5028               	/* frame size = 0 */
 5029               	/* stack size = 0 */
 5030               	.L__stack_usage = 0
 493:ModuleFunction.h **** 
 494:ModuleFunction.h **** 	switch(melody)
 5032               	.LM746:
 5033 14ea 6530      		cpi r22,lo8(5)
 5034 14ec 01F0      		breq .L379
 5035 14ee 6630      		cpi r22,lo8(6)
 5036 14f0 00F4      		brsh .L385
 5037 14f2 6230      		cpi r22,lo8(2)
 5038 14f4 01F0      		breq .L376
 5039 14f6 6330      		cpi r22,lo8(3)
 5040 14f8 00F4      		brsh .L386
 5041 14fa 6130      		cpi r22,lo8(1)
 5042 14fc 01F0      		breq .+2
 5043 14fe 00C0      		rjmp .L373
 5044 1500 00C0      		rjmp .L389
 5045               	.L386:
 5046 1502 6330      		cpi r22,lo8(3)
 5047 1504 01F0      		breq .L377
 5048 1506 6430      		cpi r22,lo8(4)
 5049 1508 01F0      		breq .+2
 5050 150a 00C0      		rjmp .L373
 5051 150c 00C0      		rjmp .L390
 5052               	.L385:
 5053 150e 6830      		cpi r22,lo8(8)
 5054 1510 01F0      		breq .L382
 5055 1512 6930      		cpi r22,lo8(9)
 5056 1514 00F4      		brsh .L387
 5057 1516 6630      		cpi r22,lo8(6)
 5058 1518 01F0      		breq .L380
 5059 151a 6730      		cpi r22,lo8(7)
 5060 151c 01F4      		brne .L373
 5061 151e 00C0      		rjmp .L391
 5062               	.L387:
 5063 1520 6930      		cpi r22,lo8(9)
 5064 1522 01F0      		breq .L383
 5065 1524 6A30      		cpi r22,lo8(10)
 5066 1526 01F4      		brne .L373
 5067 1528 00C0      		rjmp .L392
 5068               	.L389:
 495:ModuleFunction.h **** 	{
 496:ModuleFunction.h **** 	case 1:
 497:ModuleFunction.h **** 		SetSpeaker(pos,MELODY_1, RHYTHM_EX_1);
 5070               	.LM747:
 5071 152a 60E0      		ldi r22,lo8(MELODY_1)
 5072 152c 70E0      		ldi r23,hi8(MELODY_1)
 5073 152e 40E0      		ldi r20,lo8(RHYTHM_EX_1)
 5074 1530 50E0      		ldi r21,hi8(RHYTHM_EX_1)
 5075 1532 00C0      		rjmp .L388
 5076               	.L376:
 498:ModuleFunction.h **** 		break;
 499:ModuleFunction.h **** 	case 2:
 500:ModuleFunction.h **** 		SetSpeaker(pos,MELODY_2, RHYTHM_EX_2);
 5078               	.LM748:
 5079 1534 60E0      		ldi r22,lo8(MELODY_2)
 5080 1536 70E0      		ldi r23,hi8(MELODY_2)
 5081 1538 40E0      		ldi r20,lo8(RHYTHM_EX_2)
 5082 153a 50E0      		ldi r21,hi8(RHYTHM_EX_2)
 5083 153c 00C0      		rjmp .L388
 5084               	.L377:
 501:ModuleFunction.h **** 		break;
 502:ModuleFunction.h **** 	case 3:
 503:ModuleFunction.h **** 		SetSpeaker(pos,MELODY_3, RHYTHM_EX_3);
 5086               	.LM749:
 5087 153e 60E0      		ldi r22,lo8(MELODY_3)
 5088 1540 70E0      		ldi r23,hi8(MELODY_3)
 5089 1542 40E0      		ldi r20,lo8(RHYTHM_EX_3)
 5090 1544 50E0      		ldi r21,hi8(RHYTHM_EX_3)
 5091 1546 00C0      		rjmp .L388
 5092               	.L390:
 504:ModuleFunction.h **** 		break;
 505:ModuleFunction.h **** 	case 4:
 506:ModuleFunction.h **** 		SetSpeaker(pos,MELODY_4, RHYTHM_EX_4);
 5094               	.LM750:
 5095 1548 60E0      		ldi r22,lo8(MELODY_4)
 5096 154a 70E0      		ldi r23,hi8(MELODY_4)
 5097 154c 40E0      		ldi r20,lo8(RHYTHM_EX_4)
 5098 154e 50E0      		ldi r21,hi8(RHYTHM_EX_4)
 5099 1550 00C0      		rjmp .L388
 5100               	.L379:
 507:ModuleFunction.h **** 		break;
 508:ModuleFunction.h **** 	case 5:
 509:ModuleFunction.h **** 		SetSpeaker(pos,MELODY_5, RHYTHM_EX_5);
 5102               	.LM751:
 5103 1552 60E0      		ldi r22,lo8(MELODY_5)
 5104 1554 70E0      		ldi r23,hi8(MELODY_5)
 5105 1556 40E0      		ldi r20,lo8(RHYTHM_EX_5)
 5106 1558 50E0      		ldi r21,hi8(RHYTHM_EX_5)
 5107 155a 00C0      		rjmp .L388
 5108               	.L380:
 510:ModuleFunction.h **** 		break;
 511:ModuleFunction.h **** 	case 6:
 512:ModuleFunction.h **** 		SetSpeaker(pos,MELODY_6, RHYTHM_EX_6);
 5110               	.LM752:
 5111 155c 60E0      		ldi r22,lo8(MELODY_6)
 5112 155e 70E0      		ldi r23,hi8(MELODY_6)
 5113 1560 40E0      		ldi r20,lo8(RHYTHM_EX_6)
 5114 1562 50E0      		ldi r21,hi8(RHYTHM_EX_6)
 5115 1564 00C0      		rjmp .L388
 5116               	.L391:
 513:ModuleFunction.h **** 		break;
 514:ModuleFunction.h **** 	case 7:
 515:ModuleFunction.h **** 		SetSpeaker(pos,MELODY_7, RHYTHM_EX_7);
 5118               	.LM753:
 5119 1566 60E0      		ldi r22,lo8(MELODY_7)
 5120 1568 70E0      		ldi r23,hi8(MELODY_7)
 5121 156a 40E0      		ldi r20,lo8(RHYTHM_EX_7)
 5122 156c 50E0      		ldi r21,hi8(RHYTHM_EX_7)
 5123 156e 00C0      		rjmp .L388
 5124               	.L382:
 516:ModuleFunction.h **** 		break;
 517:ModuleFunction.h **** 	case 8:
 518:ModuleFunction.h **** 		SetSpeaker(pos,MELODY_8, RHYTHM_EX_8);
 5126               	.LM754:
 5127 1570 60E0      		ldi r22,lo8(MELODY_8)
 5128 1572 70E0      		ldi r23,hi8(MELODY_8)
 5129 1574 40E0      		ldi r20,lo8(RHYTHM_EX_8)
 5130 1576 50E0      		ldi r21,hi8(RHYTHM_EX_8)
 5131 1578 00C0      		rjmp .L388
 5132               	.L383:
 519:ModuleFunction.h **** 		break;
 520:ModuleFunction.h **** 	case 9:
 521:ModuleFunction.h **** 		SetSpeaker(pos,MELODY_9, RHYTHM_EX_9);
 5134               	.LM755:
 5135 157a 60E0      		ldi r22,lo8(MELODY_9)
 5136 157c 70E0      		ldi r23,hi8(MELODY_9)
 5137 157e 40E0      		ldi r20,lo8(RHYTHM_EX_9)
 5138 1580 50E0      		ldi r21,hi8(RHYTHM_EX_9)
 5139               	.L388:
 5140 1582 0E94 0000 		call SetSpeaker
 522:ModuleFunction.h **** 		break;
 5142               	.LM756:
 5143 1586 0895      		ret
 5144               	.L392:
 523:ModuleFunction.h **** 	case 10:
 524:ModuleFunction.h **** 		SetSpeaker(pos,MELODY_10, RHYTHM_EX_10);
 5146               	.LM757:
 5147 1588 60E0      		ldi r22,lo8(MELODY_10)
 5148 158a 70E0      		ldi r23,hi8(MELODY_10)
 5149 158c 40E0      		ldi r20,lo8(RHYTHM_EX_10)
 5150 158e 50E0      		ldi r21,hi8(RHYTHM_EX_10)
 5151 1590 0E94 0000 		call SetSpeaker
 5152               	.L373:
 5153 1594 0895      		ret
 5155               	.Lscope43:
 5157               		.stabd	78,0,0
 5160               	.global	Composition
 5162               	Composition:
 5163               		.stabd	46,0,0
 525:ModuleFunction.h **** 		break;
 526:ModuleFunction.h **** 	default:
 527:ModuleFunction.h **** 		break;
 528:ModuleFunction.h **** 
 529:ModuleFunction.h **** 	}
 530:ModuleFunction.h **** 
 531:ModuleFunction.h **** }
 532:ModuleFunction.h **** 
 533:ModuleFunction.h **** 
 534:ModuleFunction.h **** //---------------------------------------------------------
 535:ModuleFunction.h **** void Composition(u08 pos,u08 *pTone,u08 *pRhythm)
 536:ModuleFunction.h **** {
 5165               	.LM758:
 5166               	.LFBB44:
 5167               	/* prologue: function */
 5168               	/* frame size = 0 */
 5169               	/* stack size = 0 */
 5170               	.L__stack_usage = 0
 537:ModuleFunction.h **** 
 538:ModuleFunction.h ****     Mel = pTone;
 5172               	.LM759:
 5173 1596 6093 0000 		sts Mel,r22
 5174 159a 7093 0000 		sts Mel+1,r23
 539:ModuleFunction.h ****     Kon = pRhythm;	
 5176               	.LM760:
 5177 159e 4093 0000 		sts Kon,r20
 5178 15a2 5093 0000 		sts Kon+1,r21
 540:ModuleFunction.h **** 
 541:ModuleFunction.h **** 	m_nPos_Speaker = pos;			
 5180               	.LM761:
 5181 15a6 8093 0000 		sts m_nPos_Speaker,r24
 542:ModuleFunction.h **** 	pM_ = pM_refrash = Mel;			
 5183               	.LM762:
 5184 15aa 6093 0000 		sts pM_refrash,r22
 5185 15ae 7093 0000 		sts pM_refrash+1,r23
 5186 15b2 6093 0000 		sts pM_,r22
 5187 15b6 7093 0000 		sts pM_+1,r23
 543:ModuleFunction.h **** 	pK_ = pK_refrash =  Kon;		
 5189               	.LM763:
 5190 15ba 4093 0000 		sts pK_refrash,r20
 5191 15be 5093 0000 		sts pK_refrash+1,r21
 5192 15c2 4093 0000 		sts pK_,r20
 5193 15c6 5093 0000 		sts pK_+1,r21
 5194               	.LBB46:
 5195               	.LBB47:
 544:ModuleFunction.h **** 
 545:ModuleFunction.h **** 	OvfCount 	= PRG_RDB(&Melody_Tof_count[PRG_RDB(pM_ )]);
 5197               	.LM764:
 5198 15ca FB01      		movw r30,r22
 5199               	/* #APP */
 5200               	 ;  545 "ModuleFunction.h" 1
 5201 15cc 8491      		lpm r24, Z
 5202               		
 5203               	 ;  0 "" 2
 5204               	/* #NOAPP */
 5205               	.LBE47:
 5206 15ce 90E0      		ldi r25,lo8(0)
 5207 15d0 FC01      		movw r30,r24
 5208 15d2 E050      		subi r30,lo8(-(Melody_Tof_count))
 5209 15d4 F040      		sbci r31,hi8(-(Melody_Tof_count))
 5210               	/* #APP */
 5211               	 ;  545 "ModuleFunction.h" 1
 5212 15d6 E491      		lpm r30, Z
 5213               		
 5214               	 ;  0 "" 2
 5215               	/* #NOAPP */
 5216               	.LBE46:
 5217 15d8 E093 0000 		sts OvfCount,r30
 5218               	.LBB48:
 546:ModuleFunction.h **** 	SubTimeValue= PRG_RDB(&Melody_Sub_Time[PRG_RDB(pM_)]);	
 5220               	.LM765:
 5221 15dc 8050      		subi r24,lo8(-(Melody_Sub_Time))
 5222 15de 9040      		sbci r25,hi8(-(Melody_Sub_Time))
 5223 15e0 FC01      		movw r30,r24
 5224               	/* #APP */
 5225               	 ;  546 "ModuleFunction.h" 1
 5226 15e2 8491      		lpm r24, Z
 5227               		
 5228               	 ;  0 "" 2
 5229               	/* #NOAPP */
 5230               	.LBE48:
 5231 15e4 8093 0000 		sts SubTimeValue,r24
 5232               	.LBB49:
 547:ModuleFunction.h **** 	MelImpect = PRG_RDB(pK_);
 5234               	.LM766:
 5235 15e8 FA01      		movw r30,r20
 5236               	/* #APP */
 5237               	 ;  547 "ModuleFunction.h" 1
 5238 15ea E491      		lpm r30, Z
 5239               		
 5240               	 ;  0 "" 2
 5241               	/* #NOAPP */
 5242               	.LBE49:
 5243 15ec E093 0000 		sts MelImpect,r30
 5244               	.LBB50:
 548:ModuleFunction.h **** 	KongCount 	= PRG_RDB(&Melody_Kongnamul[(0x0f&(PRG_RDB(pK_)))]);
 5246               	.LM767:
 5247 15f0 F0E0      		ldi r31,lo8(0)
 5248 15f2 EF70      		andi r30,lo8(15)
 5249 15f4 F070      		andi r31,hi8(15)
 5250 15f6 E050      		subi r30,lo8(-(Melody_Kongnamul))
 5251 15f8 F040      		sbci r31,hi8(-(Melody_Kongnamul))
 5252               	/* #APP */
 5253               	 ;  548 "ModuleFunction.h" 1
 5254 15fa E491      		lpm r30, Z
 5255               		
 5256               	 ;  0 "" 2
 5257               	/* #NOAPP */
 5258               	.LBE50:
 5259 15fc E093 0000 		sts KongCount,r30
 549:ModuleFunction.h **** 
 550:ModuleFunction.h ****    	PLAYMELODY();		
 5261               	.LM768:
 5262 1600 8091 0000 		lds r24,MelodyRegister
 5263 1604 8860      		ori r24,lo8(8)
 5264 1606 8093 0000 		sts MelodyRegister,r24
 551:ModuleFunction.h ****    	MelodyRegister &= ~EEPPLAYFLAG;         
 5266               	.LM769:
 5267 160a 8091 0000 		lds r24,MelodyRegister
 5268 160e 8F7E      		andi r24,lo8(-17)
 5269 1610 8093 0000 		sts MelodyRegister,r24
 5270               	.L394:
 552:ModuleFunction.h **** 
 553:ModuleFunction.h ****     while(MelodyRegister & MelodyOnOffFLAG);     
 5272               	.LM770:
 5273 1614 8091 0000 		lds r24,MelodyRegister
 5274 1618 83FD      		sbrc r24,3
 5275 161a 00C0      		rjmp .L394
 5276               	/* epilogue start */
 554:ModuleFunction.h **** 
 555:ModuleFunction.h **** }
 5278               	.LM771:
 5279 161c 0895      		ret
 5281               	.Lscope44:
 5283               		.stabd	78,0,0
 5287               	.global	fnd_display
 5289               	fnd_display:
 5290               		.stabd	46,0,0
 556:ModuleFunction.h **** 
 557:ModuleFunction.h **** 
 558:ModuleFunction.h **** //---------------------------------------------------------
 559:ModuleFunction.h **** void fnd_display(u08 pos,u08 val)
 560:ModuleFunction.h **** {
 5292               	.LM772:
 5293               	.LFBB45:
 5294               	/* prologue: function */
 5295               	/* frame size = 0 */
 5296               	/* stack size = 0 */
 5297               	.L__stack_usage = 0
 561:ModuleFunction.h **** 
 562:ModuleFunction.h **** 	u08 i,data;
 563:ModuleFunction.h **** 	data = number_fnd[val];
 5299               	.LM773:
 5300 161e E62F      		mov r30,r22
 5301 1620 F0E0      		ldi r31,lo8(0)
 5302 1622 E050      		subi r30,lo8(-(number_fnd))
 5303 1624 F040      		sbci r31,hi8(-(number_fnd))
 5304 1626 2081      		ld r18,Z
 564:ModuleFunction.h **** 
 565:ModuleFunction.h **** 	switch(pos)
 5306               	.LM774:
 5307 1628 8330      		cpi r24,lo8(3)
 5308 162a 01F4      		brne .+2
 5309 162c 00C0      		rjmp .L400
 5310 162e 8430      		cpi r24,lo8(4)
 5311 1630 00F4      		brsh .L403
 5312 1632 8130      		cpi r24,lo8(1)
 5313 1634 01F0      		breq .L398
 5314 1636 8230      		cpi r24,lo8(2)
 5315 1638 01F0      		breq .+2
 5316 163a 00C0      		rjmp .L396
 5317 163c 00C0      		rjmp .L429
 5318               	.L403:
 5319 163e 8430      		cpi r24,lo8(4)
 5320 1640 01F4      		brne .+2
 5321 1642 00C0      		rjmp .L401
 5322 1644 8530      		cpi r24,lo8(5)
 5323 1646 01F0      		breq .+2
 5324 1648 00C0      		rjmp .L396
 5325 164a 00C0      		rjmp .L430
 5326               	.L398:
 566:ModuleFunction.h **** 	{
 567:ModuleFunction.h **** 	case 1:
 568:ModuleFunction.h **** 		sbi(DDRB , HC595_DATA_1);	sbi(DDRB , HC595_CLK_1);	sbi(DDRB , HC595_LATCH_1);	//fnd port IO setup
 5328               	.LM775:
 5329 164c B89A      		sbi 55-32,0
 5330 164e B99A      		sbi 55-32,1
 5331 1650 BA9A      		sbi 55-32,2
 569:ModuleFunction.h **** 		cbi(PORTB,HC595_LATCH_1);		//LATCH clear
 5333               	.LM776:
 5334 1652 C298      		cbi 56-32,2
 5335 1654 80E0      		ldi r24,lo8(0)
 5336 1656 90E0      		ldi r25,hi8(0)
 570:ModuleFunction.h **** 			
 571:ModuleFunction.h **** 		for(i=0;i<8;i++){
 572:ModuleFunction.h **** 			if((data<<i) & 0x80){		//left shift
 5338               	.LM777:
 5339 1658 30E0      		ldi r19,lo8(0)
 5340               	.L406:
 5341 165a A901      		movw r20,r18
 5342 165c 082E      		mov r0,r24
 5343 165e 00C0      		rjmp 2f
 5344 1660 440F      	1:	lsl r20
 5345 1662 551F      		rol r21
 5346 1664 0A94      	2:	dec r0
 5347 1666 02F4      		brpl 1b
 5348 1668 47FF      		sbrs r20,7
 5349 166a 00C0      		rjmp .L404
 573:ModuleFunction.h **** 				sbi(PORTB,HC595_DATA_1);
 5351               	.LM778:
 5352 166c C09A      		sbi 56-32,0
 5353 166e 00C0      		rjmp .L424
 5354               	.L404:
 574:ModuleFunction.h **** 				NOP();
 575:ModuleFunction.h **** 			}else{
 576:ModuleFunction.h **** 				cbi(PORTB,HC595_DATA_1);
 5356               	.LM779:
 5357 1670 C098      		cbi 56-32,0
 5358               	.L424:
 577:ModuleFunction.h **** 				NOP();
 5360               	.LM780:
 5361               	/* #APP */
 5362               	 ;  577 "ModuleFunction.h" 1
 5363 1672 0000      		nop
 5364               	 ;  0 "" 2
 578:ModuleFunction.h **** 			}
 579:ModuleFunction.h **** 			
 580:ModuleFunction.h **** 			sbi(PORTB,HC595_CLK_1);	
 5366               	.LM781:
 5367               	/* #NOAPP */
 5368 1674 C19A      		sbi 56-32,1
 581:ModuleFunction.h **** 			cbi(PORTB,HC595_CLK_1);
 5370               	.LM782:
 5371 1676 C198      		cbi 56-32,1
 5372 1678 0196      		adiw r24,1
 571:ModuleFunction.h **** 		for(i=0;i<8;i++){
 5374               	.LM783:
 5375 167a 8830      		cpi r24,8
 5376 167c 9105      		cpc r25,__zero_reg__
 5377 167e 01F4      		brne .L406
 582:ModuleFunction.h **** 		
 583:ModuleFunction.h **** 		}
 584:ModuleFunction.h **** 
 585:ModuleFunction.h **** 		sbi(PORTB,HC595_LATCH_1);	 //LATCH set
 5379               	.LM784:
 5380 1680 C29A      		sbi 56-32,2
 586:ModuleFunction.h **** 		break;
 5382               	.LM785:
 5383 1682 0895      		ret
 5384               	.L429:
 587:ModuleFunction.h **** 
 588:ModuleFunction.h **** 	case 2:
 589:ModuleFunction.h **** 		sbi(DDRD , HC595_DATA_2);	sbi(DDRD , HC595_CLK_2);	sbi(DDRD , HC595_LATCH_2);	//fnd port IO setup
 5386               	.LM786:
 5387 1684 889A      		sbi 49-32,0
 5388 1686 899A      		sbi 49-32,1
 5389 1688 8A9A      		sbi 49-32,2
 590:ModuleFunction.h **** 		cbi(PORTD,HC595_LATCH_2);		//LATCH clear
 5391               	.LM787:
 5392 168a 9298      		cbi 50-32,2
 5393 168c 80E0      		ldi r24,lo8(0)
 5394 168e 90E0      		ldi r25,hi8(0)
 591:ModuleFunction.h **** 
 592:ModuleFunction.h **** 		for(i=0;i<8;i++){
 593:ModuleFunction.h **** 			if((data<<i) & 0x80){		//left shift
 5396               	.LM788:
 5397 1690 30E0      		ldi r19,lo8(0)
 5398               	.L409:
 5399 1692 A901      		movw r20,r18
 5400 1694 082E      		mov r0,r24
 5401 1696 00C0      		rjmp 2f
 5402 1698 440F      	1:	lsl r20
 5403 169a 551F      		rol r21
 5404 169c 0A94      	2:	dec r0
 5405 169e 02F4      		brpl 1b
 5406 16a0 47FF      		sbrs r20,7
 5407 16a2 00C0      		rjmp .L407
 594:ModuleFunction.h **** 				sbi(PORTD,HC595_DATA_2);
 5409               	.LM789:
 5410 16a4 909A      		sbi 50-32,0
 5411 16a6 00C0      		rjmp .L425
 5412               	.L407:
 595:ModuleFunction.h **** 				NOP();
 596:ModuleFunction.h **** 			}else{
 597:ModuleFunction.h **** 				cbi(PORTD,HC595_DATA_2);
 5414               	.LM790:
 5415 16a8 9098      		cbi 50-32,0
 5416               	.L425:
 598:ModuleFunction.h **** 				NOP();
 5418               	.LM791:
 5419               	/* #APP */
 5420               	 ;  598 "ModuleFunction.h" 1
 5421 16aa 0000      		nop
 5422               	 ;  0 "" 2
 599:ModuleFunction.h **** 			}					
 600:ModuleFunction.h **** 	
 601:ModuleFunction.h **** 			sbi(PORTD,HC595_CLK_2);	
 5424               	.LM792:
 5425               	/* #NOAPP */
 5426 16ac 919A      		sbi 50-32,1
 602:ModuleFunction.h **** 			cbi(PORTD,HC595_CLK_2);
 5428               	.LM793:
 5429 16ae 9198      		cbi 50-32,1
 5430 16b0 0196      		adiw r24,1
 592:ModuleFunction.h **** 		for(i=0;i<8;i++){
 5432               	.LM794:
 5433 16b2 8830      		cpi r24,8
 5434 16b4 9105      		cpc r25,__zero_reg__
 5435 16b6 01F4      		brne .L409
 603:ModuleFunction.h **** 
 604:ModuleFunction.h **** 		}
 605:ModuleFunction.h **** 
 606:ModuleFunction.h **** 		sbi(PORTD,HC595_LATCH_2);	 //LATCH set
 5437               	.LM795:
 5438 16b8 929A      		sbi 50-32,2
 607:ModuleFunction.h **** 		break;
 5440               	.LM796:
 5441 16ba 0895      		ret
 5442               	.L400:
 608:ModuleFunction.h **** 
 609:ModuleFunction.h **** 	case 3:
 610:ModuleFunction.h **** 		sbi(DDRD , HC595_DATA_3);	sbi(DDRD , HC595_CLK_3);	sbi(DDRD , HC595_LATCH_3);	//fnd port IO setup
 5444               	.LM797:
 5445 16bc 8C9A      		sbi 49-32,4
 5446 16be 8D9A      		sbi 49-32,5
 5447 16c0 8E9A      		sbi 49-32,6
 611:ModuleFunction.h **** 		cbi(PORTD,HC595_LATCH_3);		//LATCH clear
 5449               	.LM798:
 5450 16c2 9698      		cbi 50-32,6
 5451 16c4 80E0      		ldi r24,lo8(0)
 5452 16c6 90E0      		ldi r25,hi8(0)
 612:ModuleFunction.h **** 
 613:ModuleFunction.h **** 		for(i=0;i<8;i++){
 614:ModuleFunction.h **** 			if((data<<i) & 0x80){		//left shift
 5454               	.LM799:
 5455 16c8 30E0      		ldi r19,lo8(0)
 5456               	.L412:
 5457 16ca A901      		movw r20,r18
 5458 16cc 082E      		mov r0,r24
 5459 16ce 00C0      		rjmp 2f
 5460 16d0 440F      	1:	lsl r20
 5461 16d2 551F      		rol r21
 5462 16d4 0A94      	2:	dec r0
 5463 16d6 02F4      		brpl 1b
 5464 16d8 47FF      		sbrs r20,7
 5465 16da 00C0      		rjmp .L410
 615:ModuleFunction.h **** 				sbi(PORTD,HC595_DATA_3);
 5467               	.LM800:
 5468 16dc 949A      		sbi 50-32,4
 5469 16de 00C0      		rjmp .L426
 5470               	.L410:
 616:ModuleFunction.h **** 				NOP();
 617:ModuleFunction.h **** 			}else{
 618:ModuleFunction.h **** 				cbi(PORTD,HC595_DATA_3);
 5472               	.LM801:
 5473 16e0 9498      		cbi 50-32,4
 5474               	.L426:
 619:ModuleFunction.h **** 				NOP();
 5476               	.LM802:
 5477               	/* #APP */
 5478               	 ;  619 "ModuleFunction.h" 1
 5479 16e2 0000      		nop
 5480               	 ;  0 "" 2
 620:ModuleFunction.h **** 			}
 621:ModuleFunction.h **** 
 622:ModuleFunction.h **** 			sbi(PORTD,HC595_CLK_3);	
 5482               	.LM803:
 5483               	/* #NOAPP */
 5484 16e4 959A      		sbi 50-32,5
 623:ModuleFunction.h **** 			cbi(PORTD,HC595_CLK_3);
 5486               	.LM804:
 5487 16e6 9598      		cbi 50-32,5
 5488 16e8 0196      		adiw r24,1
 613:ModuleFunction.h **** 		for(i=0;i<8;i++){
 5490               	.LM805:
 5491 16ea 8830      		cpi r24,8
 5492 16ec 9105      		cpc r25,__zero_reg__
 5493 16ee 01F4      		brne .L412
 624:ModuleFunction.h **** 
 625:ModuleFunction.h **** 		}
 626:ModuleFunction.h **** 
 627:ModuleFunction.h **** 		sbi(PORTD,HC595_LATCH_3);	 //LATCH set
 5495               	.LM806:
 5496 16f0 969A      		sbi 50-32,6
 628:ModuleFunction.h **** 		break;
 5498               	.LM807:
 5499 16f2 0895      		ret
 5500               	.L401:
 629:ModuleFunction.h **** 
 630:ModuleFunction.h **** 	case 4:
 631:ModuleFunction.h **** 		sbi(DDRE , HC595_DATA_4);	sbi(DDRE , HC595_CLK_4);	sbi(DDRE , HC595_LATCH_4);	//fnd port IO setup
 5502               	.LM808:
 5503 16f4 109A      		sbi 34-32,0
 5504 16f6 119A      		sbi 34-32,1
 5505 16f8 129A      		sbi 34-32,2
 632:ModuleFunction.h **** 		cbi(PORTE,HC595_LATCH_4);		//LATCH clear
 5507               	.LM809:
 5508 16fa 1A98      		cbi 35-32,2
 5509 16fc 80E0      		ldi r24,lo8(0)
 5510 16fe 90E0      		ldi r25,hi8(0)
 633:ModuleFunction.h **** 
 634:ModuleFunction.h **** 		for(i=0;i<8;i++){
 635:ModuleFunction.h **** 			if((data<<i) & 0x80){		//left shift
 5512               	.LM810:
 5513 1700 30E0      		ldi r19,lo8(0)
 5514               	.L415:
 5515 1702 A901      		movw r20,r18
 5516 1704 082E      		mov r0,r24
 5517 1706 00C0      		rjmp 2f
 5518 1708 440F      	1:	lsl r20
 5519 170a 551F      		rol r21
 5520 170c 0A94      	2:	dec r0
 5521 170e 02F4      		brpl 1b
 5522 1710 47FF      		sbrs r20,7
 5523 1712 00C0      		rjmp .L413
 636:ModuleFunction.h **** 				sbi(PORTE,HC595_DATA_4);
 5525               	.LM811:
 5526 1714 189A      		sbi 35-32,0
 5527 1716 00C0      		rjmp .L427
 5528               	.L413:
 637:ModuleFunction.h **** 				NOP();
 638:ModuleFunction.h **** 			}else{
 639:ModuleFunction.h **** 				cbi(PORTE,HC595_DATA_4);
 5530               	.LM812:
 5531 1718 1898      		cbi 35-32,0
 5532               	.L427:
 640:ModuleFunction.h **** 				NOP();
 5534               	.LM813:
 5535               	/* #APP */
 5536               	 ;  640 "ModuleFunction.h" 1
 5537 171a 0000      		nop
 5538               	 ;  0 "" 2
 641:ModuleFunction.h **** 			}
 642:ModuleFunction.h **** 
 643:ModuleFunction.h **** 			sbi(PORTE,HC595_CLK_4);	
 5540               	.LM814:
 5541               	/* #NOAPP */
 5542 171c 199A      		sbi 35-32,1
 644:ModuleFunction.h **** 			cbi(PORTE,HC595_CLK_4);
 5544               	.LM815:
 5545 171e 1998      		cbi 35-32,1
 5546 1720 0196      		adiw r24,1
 634:ModuleFunction.h **** 		for(i=0;i<8;i++){
 5548               	.LM816:
 5549 1722 8830      		cpi r24,8
 5550 1724 9105      		cpc r25,__zero_reg__
 5551 1726 01F4      		brne .L415
 645:ModuleFunction.h **** 
 646:ModuleFunction.h **** 		}
 647:ModuleFunction.h **** 
 648:ModuleFunction.h **** 		sbi(PORTE,HC595_LATCH_4);	 //LATCH set
 5553               	.LM817:
 5554 1728 1A9A      		sbi 35-32,2
 649:ModuleFunction.h **** 		break;
 5556               	.LM818:
 5557 172a 0895      		ret
 5558               	.L430:
 650:ModuleFunction.h **** 
 651:ModuleFunction.h **** 	case 5:
 652:ModuleFunction.h **** 		sbi(DDRE , HC595_DATA_5);	sbi(DDRG , HC595_CLK_5);	sbi(DDRG , HC595_LATCH_5);	//fnd port IO setup
 5560               	.LM819:
 5561 172c 179A      		sbi 34-32,7
 5562 172e 8091 6400 		lds r24,100
 5563 1732 8860      		ori r24,lo8(8)
 5564 1734 8093 6400 		sts 100,r24
 5565 1738 8091 6400 		lds r24,100
 5566 173c 8061      		ori r24,lo8(16)
 5567 173e 8093 6400 		sts 100,r24
 653:ModuleFunction.h **** 		cbi(PORTG,HC595_LATCH_5);		//LATCH clear
 5569               	.LM820:
 5570 1742 8091 6500 		lds r24,101
 5571 1746 8F7E      		andi r24,lo8(-17)
 5572 1748 8093 6500 		sts 101,r24
 5573 174c 80E0      		ldi r24,lo8(0)
 5574 174e 90E0      		ldi r25,hi8(0)
 654:ModuleFunction.h **** 
 655:ModuleFunction.h **** 		for(i=0;i<8;i++){
 656:ModuleFunction.h **** 			if((data<<i) & 0x80){		//left shift
 5576               	.LM821:
 5577 1750 30E0      		ldi r19,lo8(0)
 5578               	.L418:
 5579 1752 A901      		movw r20,r18
 5580 1754 082E      		mov r0,r24
 5581 1756 00C0      		rjmp 2f
 5582 1758 440F      	1:	lsl r20
 5583 175a 551F      		rol r21
 5584 175c 0A94      	2:	dec r0
 5585 175e 02F4      		brpl 1b
 5586 1760 47FF      		sbrs r20,7
 5587 1762 00C0      		rjmp .L416
 657:ModuleFunction.h **** 				sbi(PORTE,HC595_DATA_5);
 5589               	.LM822:
 5590 1764 1F9A      		sbi 35-32,7
 5591 1766 00C0      		rjmp .L428
 5592               	.L416:
 658:ModuleFunction.h **** 				NOP();
 659:ModuleFunction.h **** 			}else{
 660:ModuleFunction.h **** 				cbi(PORTE,HC595_DATA_5);
 5594               	.LM823:
 5595 1768 1F98      		cbi 35-32,7
 5596               	.L428:
 661:ModuleFunction.h **** 				NOP();
 5598               	.LM824:
 5599               	/* #APP */
 5600               	 ;  661 "ModuleFunction.h" 1
 5601 176a 0000      		nop
 5602               	 ;  0 "" 2
 662:ModuleFunction.h **** 			}
 663:ModuleFunction.h **** 
 664:ModuleFunction.h **** 			sbi(PORTG,HC595_CLK_5);	
 5604               	.LM825:
 5605               	/* #NOAPP */
 5606 176c 4091 6500 		lds r20,101
 5607 1770 4860      		ori r20,lo8(8)
 5608 1772 4093 6500 		sts 101,r20
 665:ModuleFunction.h **** 			cbi(PORTG,HC595_CLK_5);
 5610               	.LM826:
 5611 1776 4091 6500 		lds r20,101
 5612 177a 477F      		andi r20,lo8(-9)
 5613 177c 4093 6500 		sts 101,r20
 5614 1780 0196      		adiw r24,1
 655:ModuleFunction.h **** 		for(i=0;i<8;i++){
 5616               	.LM827:
 5617 1782 8830      		cpi r24,8
 5618 1784 9105      		cpc r25,__zero_reg__
 5619 1786 01F4      		brne .L418
 666:ModuleFunction.h **** 
 667:ModuleFunction.h **** 		}
 668:ModuleFunction.h **** 
 669:ModuleFunction.h **** 		sbi(PORTG,HC595_LATCH_5);	 //LATCH set
 5621               	.LM828:
 5622 1788 8091 6500 		lds r24,101
 5623 178c 8061      		ori r24,lo8(16)
 5624 178e 8093 6500 		sts 101,r24
 5625               	.L396:
 5626 1792 0895      		ret
 5631               	.Lscope45:
 5633               		.stabd	78,0,0
 5634               		.data
 5635               	.LC0:
 5636 0000 6865 6C6C 		.string	"hello"
 5636      6F00 
 5637               	.LC1:
 5638 0006 776F 726C 		.string	"world"
 5638      6400 
 5639               		.text
 5641               	.global	main
 5643               	main:
 5644               		.stabd	46,0,0
 5646               	.Ltext3:
   1:main.c        **** #include "mavin.h"
   2:main.c        **** #include "ModuleFunction.h"
   3:main.c        **** 
   4:main.c        **** 
   5:main.c        **** void main(void)
   6:main.c        **** {
 5648               	.LM829:
 5649               	.LFBB46:
 5650               	/* prologue: function */
 5651               	/* frame size = 0 */
 5652               	/* stack size = 0 */
 5653               	.L__stack_usage = 0
   7:main.c        **** 	Initialize();
 5655               	.LM830:
 5656 1794 0E94 0000 		call Initialize
   8:main.c        **** 
   9:main.c        **** 	LcdDisplay("hello","world");
 5658               	.LM831:
 5659 1798 80E0      		ldi r24,lo8(.LC0)
 5660 179a 90E0      		ldi r25,hi8(.LC0)
 5661 179c 60E0      		ldi r22,lo8(.LC1)
 5662 179e 70E0      		ldi r23,hi8(.LC1)
 5663 17a0 0E94 0000 		call LcdDisplay
 5664               	/* epilogue start */
  10:main.c        **** 
  11:main.c        **** }
 5666               	.LM832:
 5667 17a4 0895      		ret
 5669               	.Lscope46:
 5671               		.stabd	78,0,0
 5672               	.global	ControlPortc
 5673               	.global	ControlPortc
 5674               		.section .bss
 5677               	ControlPortc:
 5678 0000 00        		.skip 1,0
 5679               	.global	cur_pwm
 5680               	.global	cur_pwm
 5683               	cur_pwm:
 5684 0001 0000      		.skip 2,0
 5685               	.global	org_pwm
 5686               	.global	org_pwm
 5689               	org_pwm:
 5690 0003 0000      		.skip 2,0
 5691               	.global	pwm_cycle
 5692               		.data
 5695               	pwm_cycle:
 5696 000c 11        		.byte	17
 5697               	.global	pwm_cnt
 5698               	.global	pwm_cnt
 5699               		.section .bss
 5702               	pwm_cnt:
 5703 0005 00        		.skip 1,0
 5704               	.global	OnlyIrCnt
 5705               	.global	OnlyIrCnt
 5708               	OnlyIrCnt:
 5709 0006 00        		.skip 1,0
 5710               	.global	IRReg
 5711               		.data
 5714               	IRReg:
 5715 000d 10        		.byte	16
 5716               	.global	ir_tran_data
 5719               	ir_tran_data:
 5720 000e CC        		.byte	-52
 5721 000f 33        		.byte	51
 5722 0010 F0        		.byte	-16
 5723 0011 0F        		.byte	15
 5724               	.global	RComFlagReg
 5725               	.global	RComFlagReg
 5726               		.section .bss
 5729               	RComFlagReg:
 5730 0007 00        		.skip 1,0
 5731               	.global	MelVolCtrl
 5732               		.data
 5735               	MelVolCtrl:
 5736 0012 0A        		.byte	10
 5737               	.global	MelImpect
 5738               	.global	MelImpect
 5739               		.section .bss
 5742               	MelImpect:
 5743 0008 00        		.skip 1,0
 5744               	.global	Melody_Tof_count
 5745               		.section	.progmem.data,"a",@progbits
 5748               	Melody_Tof_count:
 5749 0000 14        		.byte	20
 5750 0001 13        		.byte	19
 5751 0002 13        		.byte	19
 5752 0003 11        		.byte	17
 5753 0004 11        		.byte	17
 5754 0005 10        		.byte	16
 5755 0006 0F        		.byte	15
 5756 0007 0E        		.byte	14
 5757 0008 0E        		.byte	14
 5758 0009 0D        		.byte	13
 5759 000a 0C        		.byte	12
 5760 000b 0B        		.byte	11
 5761 000c 0B        		.byte	11
 5762 000d 0A        		.byte	10
 5763 000e 0A        		.byte	10
 5764 000f 09        		.byte	9
 5765 0010 09        		.byte	9
 5766 0011 09        		.byte	9
 5767 0012 08        		.byte	8
 5768 0013 08        		.byte	8
 5769 0014 07        		.byte	7
 5770 0015 07        		.byte	7
 5771 0016 06        		.byte	6
 5772 0017 06        		.byte	6
 5773 0018 06        		.byte	6
 5774 0019 06        		.byte	6
 5775 001a 05        		.byte	5
 5776 001b 05        		.byte	5
 5777 001c 05        		.byte	5
 5778 001d 05        		.byte	5
 5779 001e 80        		.byte	-128
 5780 001f 40        		.byte	64
 5781 0020 C0        		.byte	-64
 5782 0021 20        		.byte	32
 5783               	.global	Melody_Sub_Time
 5786               	Melody_Sub_Time:
 5787 0022 00        		.byte	0
 5788 0023 30        		.byte	48
 5789 0024 C0        		.byte	-64
 5790 0025 0E        		.byte	14
 5791 0026 CA        		.byte	-54
 5792 0027 2E        		.byte	46
 5793 0028 E8        		.byte	-24
 5794 0029 4C        		.byte	76
 5795 002a B2        		.byte	-78
 5796 002b CA        		.byte	-54
 5797 002c 22        		.byte	34
 5798 002d 00        		.byte	0
 5799 002e 72        		.byte	114
 5800 002f 08        		.byte	8
 5801 0030 98        		.byte	-104
 5802 0031 20        		.byte	32
 5803 0032 9E        		.byte	-98
 5804 0033 E6        		.byte	-26
 5805 0034 88        		.byte	-120
 5806 0035 D8        		.byte	-40
 5807 0036 5A        		.byte	90
 5808 0037 B8        		.byte	-72
 5809 0038 00        		.byte	0
 5810 0039 14        		.byte	20
 5811 003a 68        		.byte	104
 5812 003b E0        		.byte	-32
 5813 003c 00        		.byte	0
 5814 003d 14        		.byte	20
 5815 003e 68        		.byte	104
 5816 003f E0        		.byte	-32
 5817 0040 00        		.byte	0
 5818 0041 00        		.byte	0
 5819 0042 00        		.byte	0
 5820 0043 00        		.byte	0
 5821               	.global	Melody_Kongnamul
 5824               	Melody_Kongnamul:
 5825 0044 05        		.byte	5
 5826 0045 0A        		.byte	10
 5827 0046 14        		.byte	20
 5828 0047 29        		.byte	41
 5829 0048 3F        		.byte	63
 5830 0049 53        		.byte	83
 5831 004a 7D        		.byte	125
 5832 004b 08        		.byte	8
 5833 004c 10        		.byte	16
 5834 004d 20        		.byte	32
 5835               	.global	T1SOL
 5838               	T1SOL:
 5839 004e 00        		.byte	0
 5840 004f 1E        		.byte	30
 5841               	.global	T1SOLS
 5844               	T1SOLS:
 5845 0050 01        		.byte	1
 5846 0051 1E        		.byte	30
 5847               	.global	T1RA
 5850               	T1RA:
 5851 0052 02        		.byte	2
 5852 0053 1E        		.byte	30
 5853               	.global	T1RAS
 5856               	T1RAS:
 5857 0054 03        		.byte	3
 5858 0055 1E        		.byte	30
 5859               	.global	T1SI
 5862               	T1SI:
 5863 0056 04        		.byte	4
 5864 0057 1E        		.byte	30
 5865               	.global	T2DO
 5868               	T2DO:
 5869 0058 05        		.byte	5
 5870 0059 1E        		.byte	30
 5871               	.global	T2DOS
 5874               	T2DOS:
 5875 005a 06        		.byte	6
 5876 005b 1E        		.byte	30
 5877               	.global	T2RE
 5880               	T2RE:
 5881 005c 07        		.byte	7
 5882 005d 1E        		.byte	30
 5883               	.global	T2RES
 5886               	T2RES:
 5887 005e 08        		.byte	8
 5888 005f 1E        		.byte	30
 5889               	.global	T2MI
 5892               	T2MI:
 5893 0060 09        		.byte	9
 5894 0061 1E        		.byte	30
 5895               	.global	T2PA
 5898               	T2PA:
 5899 0062 0A        		.byte	10
 5900 0063 1E        		.byte	30
 5901               	.global	T2PAS
 5904               	T2PAS:
 5905 0064 0B        		.byte	11
 5906 0065 1E        		.byte	30
 5907               	.global	T2SOL
 5910               	T2SOL:
 5911 0066 0C        		.byte	12
 5912 0067 1E        		.byte	30
 5913               	.global	T2SOLS
 5916               	T2SOLS:
 5917 0068 0D        		.byte	13
 5918 0069 1E        		.byte	30
 5919               	.global	T2RA
 5922               	T2RA:
 5923 006a 0E        		.byte	14
 5924 006b 1E        		.byte	30
 5925               	.global	T2RAS
 5928               	T2RAS:
 5929 006c 0F        		.byte	15
 5930 006d 1E        		.byte	30
 5931               	.global	T2SI
 5934               	T2SI:
 5935 006e 10        		.byte	16
 5936 006f 1E        		.byte	30
 5937               	.global	T3DO
 5940               	T3DO:
 5941 0070 11        		.byte	17
 5942 0071 1E        		.byte	30
 5943               	.global	T3DOS
 5946               	T3DOS:
 5947 0072 12        		.byte	18
 5948 0073 1E        		.byte	30
 5949               	.global	T3RE
 5952               	T3RE:
 5953 0074 13        		.byte	19
 5954 0075 1E        		.byte	30
 5955               	.global	T3RES
 5958               	T3RES:
 5959 0076 14        		.byte	20
 5960 0077 1E        		.byte	30
 5961               	.global	T3MI
 5964               	T3MI:
 5965 0078 15        		.byte	21
 5966 0079 1E        		.byte	30
 5967               	.global	T3PA
 5970               	T3PA:
 5971 007a 16        		.byte	22
 5972 007b 1E        		.byte	30
 5973               	.global	T3PAS
 5976               	T3PAS:
 5977 007c 17        		.byte	23
 5978 007d 1E        		.byte	30
 5979               	.global	T3SOL
 5982               	T3SOL:
 5983 007e 18        		.byte	24
 5984 007f 1E        		.byte	30
 5985               	.global	T3SOLS
 5988               	T3SOLS:
 5989 0080 19        		.byte	25
 5990 0081 1E        		.byte	30
 5991               	.global	T3RA
 5994               	T3RA:
 5995 0082 1A        		.byte	26
 5996 0083 1E        		.byte	30
 5997               	.global	T3RAS
 6000               	T3RAS:
 6001 0084 1B        		.byte	27
 6002 0085 1E        		.byte	30
 6003               	.global	T3SI
 6006               	T3SI:
 6007 0086 1C        		.byte	28
 6008 0087 1E        		.byte	30
 6009               	.global	T4DO
 6012               	T4DO:
 6013 0088 1D        		.byte	29
 6014 0089 1E        		.byte	30
 6015               	.global	CRES
 6018               	CRES:
 6019 008a 20        		.byte	32
 6020 008b 1E        		.byte	30
 6021               	.global	RHYTHM_32
 6024               	RHYTHM_32:
 6025 008c 00        		.skip 1,0
 6026               	.global	RHYTHM_16
 6029               	RHYTHM_16:
 6030 008d 01        		.byte	1
 6031               	.global	RHYTHM_8_2
 6034               	RHYTHM_8_2:
 6035 008e 02        		.byte	2
 6036               	.global	RHYTHM_4_2
 6039               	RHYTHM_4_2:
 6040 008f 03        		.byte	3
 6041               	.global	RHYTHM_DOT_4
 6044               	RHYTHM_DOT_4:
 6045 0090 04        		.byte	4
 6046               	.global	RHYTHM_2_2
 6049               	RHYTHM_2_2:
 6050 0091 05        		.byte	5
 6051               	.global	RHYTHM_DOT_2
 6054               	RHYTHM_DOT_2:
 6055 0092 06        		.byte	6
 6056               	.global	RHYTHM_DOT_32
 6059               	RHYTHM_DOT_32:
 6060 0093 07        		.byte	7
 6061               	.global	RHYTHM_DOT_16
 6064               	RHYTHM_DOT_16:
 6065 0094 08        		.byte	8
 6066               	.global	RHYTHM_DOT_8
 6069               	RHYTHM_DOT_8:
 6070 0095 09        		.byte	9
 6071               	.global	MELODY_1
 6074               	MELODY_1:
 6075 0096 09        		.byte	9
 6076 0097 0C        		.byte	12
 6077 0098 09        		.byte	9
 6078 0099 1E        		.byte	30
 6079 009a 0E        		.byte	14
 6080 009b 0A        		.byte	10
 6081 009c 0000 0000 		.skip 8,0
 6081      0000 0000 
 6082               	.global	RHYTHM_EX_1
 6085               	RHYTHM_EX_1:
 6086 00a4 12        		.byte	18
 6087 00a5 12        		.byte	18
 6088 00a6 12        		.byte	18
 6089 00a7 12        		.byte	18
 6090 00a8 12        		.byte	18
 6091 00a9 0000 0000 		.skip 8,0
 6091      0000 0000 
 6092               	.global	MELODY_2
 6095               	MELODY_2:
 6096 00b1 09        		.byte	9
 6097 00b2 0C        		.byte	12
 6098 00b3 09        		.byte	9
 6099 00b4 0E        		.byte	14
 6100 00b5 1E        		.byte	30
 6101 00b6 0A        		.byte	10
 6102 00b7 07        		.byte	7
 6103 00b8 00        		.byte	0
 6104 00b9 02        		.byte	2
 6105 00ba 04        		.byte	4
 6106 00bb 05        		.byte	5
 6107 00bc 07        		.byte	7
 6108 00bd 04        		.byte	4
 6109 00be 05        		.byte	5
 6110 00bf 1E        		.byte	30
 6111               	.global	RHYTHM_EX_2
 6114               	RHYTHM_EX_2:
 6115 00c0 02        		.byte	2
 6116 00c1 02        		.byte	2
 6117 00c2 02        		.byte	2
 6118 00c3 02        		.byte	2
 6119 00c4 02        		.byte	2
 6120 00c5 02        		.byte	2
 6121 00c6 01        		.byte	1
 6122 00c7 01        		.byte	1
 6123 00c8 01        		.byte	1
 6124 00c9 01        		.byte	1
 6125 00ca 01        		.byte	1
 6126 00cb 01        		.byte	1
 6127 00cc 03        		.byte	3
 6128 00cd 00        		.skip 1,0
 6129               	.global	MELODY_3
 6132               	MELODY_3:
 6133 00ce 02        		.byte	2
 6134 00cf 03        		.byte	3
 6135 00d0 02        		.byte	2
 6136 00d1 1E        		.byte	30
 6137               	.global	RHYTHM_EX_3
 6140               	RHYTHM_EX_3:
 6141 00d2 11        		.byte	17
 6142 00d3 31        		.byte	49
 6143 00d4 11        		.byte	17
 6144               	.global	MELODY_4
 6147               	MELODY_4:
 6148 00d5 00        		.byte	0
 6149 00d6 02        		.byte	2
 6150 00d7 04        		.byte	4
 6151 00d8 05        		.byte	5
 6152 00d9 07        		.byte	7
 6153 00da 08        		.byte	8
 6154 00db 09        		.byte	9
 6155 00dc 04        		.byte	4
 6156 00dd 07        		.byte	7
 6157 00de 02        		.byte	2
 6158 00df 05        		.byte	5
 6159 00e0 20        		.byte	32
 6160 00e1 04        		.byte	4
 6161 00e2 03        		.byte	3
 6162 00e3 04        		.byte	4
 6163 00e4 20        		.byte	32
 6164 00e5 0A        		.byte	10
 6165 00e6 06        		.byte	6
 6166 00e7 09        		.byte	9
 6167 00e8 04        		.byte	4
 6168 00e9 07        		.byte	7
 6169 00ea 20        		.byte	32
 6170 00eb 05        		.byte	5
 6171 00ec 04        		.byte	4
 6172 00ed 05        		.byte	5
 6173 00ee 1E        		.byte	30
 6174               	.global	RHYTHM_EX_4
 6177               	RHYTHM_EX_4:
 6178 00ef 07        		.byte	7
 6179 00f0 07        		.byte	7
 6180 00f1 07        		.byte	7
 6181 00f2 07        		.byte	7
 6182 00f3 07        		.byte	7
 6183 00f4 07        		.byte	7
 6184 00f5 09        		.byte	9
 6185 00f6 07        		.byte	7
 6186 00f7 09        		.byte	9
 6187 00f8 07        		.byte	7
 6188 00f9 09        		.byte	9
 6189 00fa 07        		.byte	7
 6190 00fb 08        		.byte	8
 6191 00fc 08        		.byte	8
 6192 00fd 08        		.byte	8
 6193 00fe 01        		.byte	1
 6194 00ff 09        		.byte	9
 6195 0100 07        		.byte	7
 6196 0101 09        		.byte	9
 6197 0102 07        		.byte	7
 6198 0103 09        		.byte	9
 6199 0104 07        		.byte	7
 6200 0105 08        		.byte	8
 6201 0106 08        		.byte	8
 6202 0107 08        		.byte	8
 6203               	.global	MELODY_5
 6206               	MELODY_5:
 6207 0108 02        		.byte	2
 6208 0109 03        		.byte	3
 6209 010a 02        		.byte	2
 6210 010b 1E        		.byte	30
 6211               	.global	RHYTHM_EX_5
 6214               	RHYTHM_EX_5:
 6215 010c 11        		.byte	17
 6216 010d 31        		.byte	49
 6217 010e 11        		.byte	17
 6218               	.global	MELODY_6
 6221               	MELODY_6:
 6222 010f 02        		.byte	2
 6223 0110 07        		.byte	7
 6224 0111 02        		.byte	2
 6225 0112 20        		.byte	32
 6226 0113 1E        		.byte	30
 6227               	.global	RHYTHM_EX_6
 6230               	RHYTHM_EX_6:
 6231 0114 02        		.byte	2
 6232 0115 02        		.byte	2
 6233 0116 01        		.byte	1
 6234 0117 04        		.byte	4
 6235               	.global	MELODY_7
 6238               	MELODY_7:
 6239 0118 1D        		.byte	29
 6240 0119 18        		.byte	24
 6241 011a 1D        		.byte	29
 6242 011b 1E        		.byte	30
 6243               	.global	RHYTHM_EX_7
 6246               	RHYTHM_EX_7:
 6247 011c 08        		.byte	8
 6248 011d 08        		.byte	8
 6249 011e 08        		.byte	8
 6250               	.global	MELODY_8
 6253               	MELODY_8:
 6254 011f 0B        		.byte	11
 6255 0120 03        		.byte	3
 6256 0121 0B        		.byte	11
 6257 0122 20        		.byte	32
 6258 0123 1E        		.byte	30
 6259               	.global	RHYTHM_EX_8
 6262               	RHYTHM_EX_8:
 6263 0124 02        		.byte	2
 6264 0125 01        		.byte	1
 6265 0126 02        		.byte	2
 6266 0127 08        		.byte	8
 6267               	.global	MELODY_9
 6270               	MELODY_9:
 6271 0128 07        		.byte	7
 6272 0129 14        		.byte	20
 6273 012a 1E        		.byte	30
 6274               	.global	RHYTHM_EX_9
 6277               	RHYTHM_EX_9:
 6278 012b 01        		.byte	1
 6279 012c 00        		.byte	0
 6280               	.global	MELODY_10
 6283               	MELODY_10:
 6284 012d 1D        		.byte	29
 6285 012e 18        		.byte	24
 6286 012f 1D        		.byte	29
 6287 0130 20        		.byte	32
 6288 0131 1E        		.byte	30
 6289               	.global	RHYTHM_EX_10
 6292               	RHYTHM_EX_10:
 6293 0132 08        		.byte	8
 6294 0133 08        		.byte	8
 6295 0134 08        		.byte	8
 6296 0135 05        		.byte	5
 6297               	.global	RemoconValuedelayCnt
 6298               	.global	RemoconValuedelayCnt
 6299               		.section .bss
 6302               	RemoconValuedelayCnt:
 6303 0009 00        		.skip 1,0
 6304               	.global	number
 6305               		.data
 6308               	number:
 6309 0013 DE        		.byte	-34
 6310 0014 18        		.byte	24
 6311 0015 CD        		.byte	-51
 6312 0016 5D        		.byte	93
 6313 0017 1B        		.byte	27
 6314 0018 57        		.byte	87
 6315 0019 D7        		.byte	-41
 6316 001a 1E        		.byte	30
 6317 001b DF        		.byte	-33
 6318 001c 5F        		.byte	95
 6319 001d 9F        		.byte	-97
 6320 001e D3        		.byte	-45
 6321 001f C1        		.byte	-63
 6322 0020 D9        		.byte	-39
 6323 0021 CF        		.byte	-49
 6324 0022 87        		.byte	-121
 6325               	.global	number_fnd
 6328               	number_fnd:
 6329 0023 48        		.byte	72
 6330 0024 EB        		.byte	-21
 6331 0025 8C        		.byte	-116
 6332 0026 89        		.byte	-119
 6333 0027 2B        		.byte	43
 6334 0028 19        		.byte	25
 6335 0029 18        		.byte	24
 6336 002a 4B        		.byte	75
 6337 002b 08        		.byte	8
 6338 002c 09        		.byte	9
 6339 002d 0A        		.byte	10
 6340 002e 38        		.byte	56
 6341 002f 5C        		.byte	92
 6342 0030 A8        		.byte	-88
 6343 0031 1C        		.byte	28
 6344 0032 1E        		.byte	30
 6345               	.global	empty
 6348               	empty:
 6349 0033 2020 2020 		.string	"        "
 6349      2020 2020 
 6349      00
 6350               		.comm IR_RX_PIN,1,1
 6351               		.comm IR_TX_PIN,1,1
 6352               		.comm string1,8,1
 6353               		.comm string2,8,1
 6354               		.comm ADCComplete,1,1
 6355               		.comm ADCData,2,1
 6356               		.comm AD_Value,1,1
 6357               		.comm fMicSample,1,1
 6358               		.comm fSpeakerOut,1,1
 6359               		.comm fcdsSample,1,1
 6360               		.comm nSensorVal,1,1
 6361               		.comm SensorDir,1,1
 6362               		.comm PhotoSensor,1,1
 6363               		.comm ForwardPhotoSensor,1,1
 6364               		.comm DownwardPhotoSensor,1,1
 6365               		.comm tempCounter,2,1
 6366               		.comm IrKeyValue,15,1
 6367               		.comm ir_trans_temp,4,1
 6368               		.comm T_count,1,1
 6369               		.comm T_data,1,1
 6370               		.comm ir_data,4,1
 6371               		.comm MultiCommData,1,1
 6372               		.comm InfSenValue,1,1
 6373               		.comm IDmemory,1,1
 6374               		.comm TempExCustom,1,1
 6375               		.comm RobotComState,1,1
 6376               		.comm RCommCnt,1,1
 6377               		.comm PinniCmd,1,1
 6378               		.comm m_nPos_Speaker,1,1
 6379               		.comm MelodyRegister,1,1
 6380               		.comm Kong_ovf_count,1,1
 6381               		.comm KongCount,1,1
 6382               		.comm OvfCount,1,1
 6383               		.comm SubTimeValue,1,1
 6384               		.comm pM_,2,1
 6385               		.comm pK_,2,1
 6386               		.comm pM_refrash,2,1
 6387               		.comm pK_refrash,2,1
 6388               		.comm Mel,2,1
 6389               		.comm Kon,2,1
 6390               		.comm m_bMelodyEnd,1,1
 6391               		.comm delay_count,2,1
 6392               		.comm delayms_count,2,1
 6393               		.comm delay32us,2,1
 6394               		.comm EepMelAddr,1,1
 6395               		.comm Eep_Kon,33,1
 6396               		.comm Eep_Mel,33,1
 6397               		.lcomm text1,1
 6398               		.lcomm text2,1
 6399               		.lcomm swvalue.2057,1
 6400               		.lcomm timingcnt.1896,1
 6401               		.lcomm s_count.1880,1
 6402               		.lcomm c_count.1879,1
 6403               		.lcomm replycnt.1764,1
 6406               	l_mel_low.1753:
 6407 003c 02        		.byte	2
 6410               	l_mel_high.1752:
 6411 003d 02        		.byte	2
 6412               		.lcomm CLKTickCnt.1709,2
 6413               		.lcomm tickcnt.1708,1
 6414               		.lcomm Pwmloopcnt.1704,1
 6415               		.lcomm mux2.1701,1
 6544               		.text
 6546               	.Letext0:
 6547               	.global __do_copy_data
 6548               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccPdSav7.s:2      *ABS*:000000000000003f __SREG__
     /tmp/ccPdSav7.s:3      *ABS*:000000000000003e __SP_H__
     /tmp/ccPdSav7.s:4      *ABS*:000000000000003d __SP_L__
     /tmp/ccPdSav7.s:5      *ABS*:0000000000000034 __CCP__
     /tmp/ccPdSav7.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccPdSav7.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccPdSav7.s:105    .text:0000000000000000 __vector_21
                            *COM*:0000000000000002 ADCData
                            *COM*:0000000000000001 ADCComplete
     /tmp/ccPdSav7.s:150    .text:000000000000002a ClkTickFunc
     /tmp/ccPdSav7.s:6412   .bss:0000000000000013 tickcnt.1708
     /tmp/ccPdSav7.s:6403   .bss:0000000000000011 CLKTickCnt.1709
                            *COM*:0000000000000001 fMicSample
                            *COM*:0000000000000001 fcdsSample
     /tmp/ccPdSav7.s:208    .text:0000000000000068 REPosition
                            *COM*:0000000000000001 IR_TX_PIN
                            *COM*:0000000000000001 IR_RX_PIN
     /tmp/ccPdSav7.s:278    .text:00000000000000ae SetSpeaker
                            *COM*:0000000000000002 Mel
                            *COM*:0000000000000002 Kon
                            *COM*:0000000000000001 m_nPos_Speaker
                            *COM*:0000000000000002 pM_refrash
                            *COM*:0000000000000002 pM_
                            *COM*:0000000000000002 pK_refrash
                            *COM*:0000000000000002 pK_
     /tmp/ccPdSav7.s:5748   .progmem.data:0000000000000000 Melody_Tof_count
                            *COM*:0000000000000001 OvfCount
     /tmp/ccPdSav7.s:5786   .progmem.data:0000000000000022 Melody_Sub_Time
                            *COM*:0000000000000001 SubTimeValue
     /tmp/ccPdSav7.s:5742   .bss:0000000000000008 MelImpect
     /tmp/ccPdSav7.s:5824   .progmem.data:0000000000000044 Melody_Kongnamul
                            *COM*:0000000000000001 KongCount
                            *COM*:0000000000000001 MelodyRegister
     /tmp/ccPdSav7.s:406    .text:0000000000000136 DacDigToAlog
     /tmp/ccPdSav7.s:785    .text:0000000000000290 MelFunc
     /tmp/ccPdSav7.s:6410   .data:000000000000003d l_mel_high.1752
     /tmp/ccPdSav7.s:6406   .data:000000000000003c l_mel_low.1753
     /tmp/ccPdSav7.s:5735   .data:0000000000000012 MelVolCtrl
                            *COM*:0000000000000001 Kong_ovf_count
                            *COM*:0000000000000001 EepMelAddr
                            *COM*:0000000000000001 m_bMelodyEnd
     /tmp/ccPdSav7.s:6402   .bss:0000000000000010 replycnt.1764
     /tmp/ccPdSav7.s:1398   .text:00000000000005d6 GetRemocon
                            *COM*:0000000000000004 ir_data
     /tmp/ccPdSav7.s:1515   .text:000000000000065a IrRecv
     /tmp/ccPdSav7.s:5714   .data:000000000000000d IRReg
     /tmp/ccPdSav7.s:6401   .bss:000000000000000f c_count.1879
                            *COM*:0000000000000001 T_count
     /tmp/ccPdSav7.s:5708   .bss:0000000000000006 OnlyIrCnt
     /tmp/ccPdSav7.s:6400   .bss:000000000000000e s_count.1880
                            *COM*:0000000000000001 MultiCommData
                            *COM*:0000000000000001 T_data
     /tmp/ccPdSav7.s:6302   .bss:0000000000000009 RemoconValuedelayCnt
     /tmp/ccPdSav7.s:1820   .text:000000000000083c IrComm
     /tmp/ccPdSav7.s:1860   .text:000000000000085c DcMotor_temp
     /tmp/ccPdSav7.s:5689   .bss:0000000000000003 org_pwm
     /tmp/ccPdSav7.s:2078   .text:0000000000000914 isr_pwm
     /tmp/ccPdSav7.s:5702   .bss:0000000000000005 pwm_cnt
     /tmp/ccPdSav7.s:5695   .data:000000000000000c pwm_cycle
     /tmp/ccPdSav7.s:5683   .bss:0000000000000001 cur_pwm
     /tmp/ccPdSav7.s:2153   .text:000000000000096c PhotoSensorUpdate
     /tmp/ccPdSav7.s:6399   .bss:000000000000000d timingcnt.1896
                            *COM*:0000000000000001 SensorDir
                            *COM*:0000000000000001 ForwardPhotoSensor
                            *COM*:0000000000000001 DownwardPhotoSensor
     /tmp/ccPdSav7.s:2233   .text:00000000000009bc __vector_16
     /tmp/ccPdSav7.s:6414   .bss:0000000000000015 mux2.1701
                            *COM*:0000000000000002 delay_count
                            *COM*:0000000000000002 delayms_count
     /tmp/ccPdSav7.s:5677   .bss:0000000000000000 ControlPortc
     /tmp/ccPdSav7.s:6413   .bss:0000000000000014 Pwmloopcnt.1704
                            *COM*:0000000000000002 delay32us
     /tmp/ccPdSav7.s:2387   .text:0000000000000aaa delayms
     /tmp/ccPdSav7.s:2434   .text:0000000000000ace delay_cho
     /tmp/ccPdSav7.s:2468   .text:0000000000000ae8 delay
     /tmp/ccPdSav7.s:2518   .text:0000000000000b14 mSecDelay
     /tmp/ccPdSav7.s:2577   .text:0000000000000b48 lcd_port_init
     /tmp/ccPdSav7.s:2611   .text:0000000000000b58 command
     /tmp/ccPdSav7.s:2670   .text:0000000000000b94 lcd_init
     /tmp/ccPdSav7.s:2730   .text:0000000000000bd2 lcd_out
     /tmp/ccPdSav7.s:2792   .text:0000000000000c10 lcd_position
     /tmp/ccPdSav7.s:2827   .text:0000000000000c24 lcd_char_out
     /tmp/ccPdSav7.s:2866   .text:0000000000000c44 lcd_str_out
     /tmp/ccPdSav7.s:2927   .text:0000000000000c86 lcd_line_clr
     /tmp/ccPdSav7.s:3021   .text:0000000000000ce4 lcd_shift
     /tmp/ccPdSav7.s:3053   .text:0000000000000cf4 Beep
     /tmp/ccPdSav7.s:3337   .text:0000000000000e1e InitADC
     /tmp/ccPdSav7.s:3368   .text:0000000000000e2c GetADC
     /tmp/ccPdSav7.s:3418   .text:0000000000000e5a GetCds
     /tmp/ccPdSav7.s:3543   .text:0000000000000ec6 Initialize
     /tmp/ccPdSav7.s:6348   .data:0000000000000033 empty
     /tmp/ccPdSav7.s:3631   .text:0000000000000f1a GetCdsVal
     /tmp/ccPdSav7.s:3677   .text:0000000000000f40 GetRemoconVal
     /tmp/ccPdSav7.s:3732   .text:0000000000000f6a GetMicVal
     /tmp/ccPdSav7.s:3784   .text:0000000000000f90 GetPhotoSensor
     /tmp/ccPdSav7.s:3829   .text:0000000000000fb6 TactSWModuleCtrl
     /tmp/ccPdSav7.s:6398   .bss:000000000000000c swvalue.2057
     /tmp/ccPdSav7.s:4085   .text:00000000000010e4 TouchSensor
     /tmp/ccPdSav7.s:4272   .text:00000000000011a2 Bulldozer
     /tmp/ccPdSav7.s:4312   .text:00000000000011b6 Buzzer
     /tmp/ccPdSav7.s:4393   .text:0000000000001206 LcdDisplay
                             .bss:000000000000000a text1
     /tmp/ccPdSav7.s:6397   .bss:000000000000000b text2
                            *COM*:0000000000000008 string1
                            *COM*:0000000000000008 string2
     /tmp/ccPdSav7.s:4606   .text:00000000000012ec DC_Control
     /tmp/ccPdSav7.s:4634   .text:00000000000012f8 LEDModuleCtrl
     /tmp/ccPdSav7.s:5022   .text:00000000000014ea MelodyPlay
     /tmp/ccPdSav7.s:6074   .progmem.data:0000000000000096 MELODY_1
     /tmp/ccPdSav7.s:6085   .progmem.data:00000000000000a4 RHYTHM_EX_1
     /tmp/ccPdSav7.s:6095   .progmem.data:00000000000000b1 MELODY_2
     /tmp/ccPdSav7.s:6114   .progmem.data:00000000000000c0 RHYTHM_EX_2
     /tmp/ccPdSav7.s:6132   .progmem.data:00000000000000ce MELODY_3
     /tmp/ccPdSav7.s:6140   .progmem.data:00000000000000d2 RHYTHM_EX_3
     /tmp/ccPdSav7.s:6147   .progmem.data:00000000000000d5 MELODY_4
     /tmp/ccPdSav7.s:6177   .progmem.data:00000000000000ef RHYTHM_EX_4
     /tmp/ccPdSav7.s:6206   .progmem.data:0000000000000108 MELODY_5
     /tmp/ccPdSav7.s:6214   .progmem.data:000000000000010c RHYTHM_EX_5
     /tmp/ccPdSav7.s:6221   .progmem.data:000000000000010f MELODY_6
     /tmp/ccPdSav7.s:6230   .progmem.data:0000000000000114 RHYTHM_EX_6
     /tmp/ccPdSav7.s:6238   .progmem.data:0000000000000118 MELODY_7
     /tmp/ccPdSav7.s:6246   .progmem.data:000000000000011c RHYTHM_EX_7
     /tmp/ccPdSav7.s:6253   .progmem.data:000000000000011f MELODY_8
     /tmp/ccPdSav7.s:6262   .progmem.data:0000000000000124 RHYTHM_EX_8
     /tmp/ccPdSav7.s:6270   .progmem.data:0000000000000128 MELODY_9
     /tmp/ccPdSav7.s:6277   .progmem.data:000000000000012b RHYTHM_EX_9
     /tmp/ccPdSav7.s:6283   .progmem.data:000000000000012d MELODY_10
     /tmp/ccPdSav7.s:6292   .progmem.data:0000000000000132 RHYTHM_EX_10
     /tmp/ccPdSav7.s:5162   .text:0000000000001596 Composition
     /tmp/ccPdSav7.s:5289   .text:000000000000161e fnd_display
     /tmp/ccPdSav7.s:6328   .data:0000000000000023 number_fnd
     /tmp/ccPdSav7.s:5643   .text:0000000000001794 main
     /tmp/ccPdSav7.s:5719   .data:000000000000000e ir_tran_data
     /tmp/ccPdSav7.s:5729   .bss:0000000000000007 RComFlagReg
     /tmp/ccPdSav7.s:5838   .progmem.data:000000000000004e T1SOL
     /tmp/ccPdSav7.s:5844   .progmem.data:0000000000000050 T1SOLS
     /tmp/ccPdSav7.s:5850   .progmem.data:0000000000000052 T1RA
     /tmp/ccPdSav7.s:5856   .progmem.data:0000000000000054 T1RAS
     /tmp/ccPdSav7.s:5862   .progmem.data:0000000000000056 T1SI
     /tmp/ccPdSav7.s:5868   .progmem.data:0000000000000058 T2DO
     /tmp/ccPdSav7.s:5874   .progmem.data:000000000000005a T2DOS
     /tmp/ccPdSav7.s:5880   .progmem.data:000000000000005c T2RE
     /tmp/ccPdSav7.s:5886   .progmem.data:000000000000005e T2RES
     /tmp/ccPdSav7.s:5892   .progmem.data:0000000000000060 T2MI
     /tmp/ccPdSav7.s:5898   .progmem.data:0000000000000062 T2PA
     /tmp/ccPdSav7.s:5904   .progmem.data:0000000000000064 T2PAS
     /tmp/ccPdSav7.s:5910   .progmem.data:0000000000000066 T2SOL
     /tmp/ccPdSav7.s:5916   .progmem.data:0000000000000068 T2SOLS
     /tmp/ccPdSav7.s:5922   .progmem.data:000000000000006a T2RA
     /tmp/ccPdSav7.s:5928   .progmem.data:000000000000006c T2RAS
     /tmp/ccPdSav7.s:5934   .progmem.data:000000000000006e T2SI
     /tmp/ccPdSav7.s:5940   .progmem.data:0000000000000070 T3DO
     /tmp/ccPdSav7.s:5946   .progmem.data:0000000000000072 T3DOS
     /tmp/ccPdSav7.s:5952   .progmem.data:0000000000000074 T3RE
     /tmp/ccPdSav7.s:5958   .progmem.data:0000000000000076 T3RES
     /tmp/ccPdSav7.s:5964   .progmem.data:0000000000000078 T3MI
     /tmp/ccPdSav7.s:5970   .progmem.data:000000000000007a T3PA
     /tmp/ccPdSav7.s:5976   .progmem.data:000000000000007c T3PAS
     /tmp/ccPdSav7.s:5982   .progmem.data:000000000000007e T3SOL
     /tmp/ccPdSav7.s:5988   .progmem.data:0000000000000080 T3SOLS
     /tmp/ccPdSav7.s:5994   .progmem.data:0000000000000082 T3RA
     /tmp/ccPdSav7.s:6000   .progmem.data:0000000000000084 T3RAS
     /tmp/ccPdSav7.s:6006   .progmem.data:0000000000000086 T3SI
     /tmp/ccPdSav7.s:6012   .progmem.data:0000000000000088 T4DO
     /tmp/ccPdSav7.s:6018   .progmem.data:000000000000008a CRES
     /tmp/ccPdSav7.s:6024   .progmem.data:000000000000008c RHYTHM_32
     /tmp/ccPdSav7.s:6029   .progmem.data:000000000000008d RHYTHM_16
     /tmp/ccPdSav7.s:6034   .progmem.data:000000000000008e RHYTHM_8_2
     /tmp/ccPdSav7.s:6039   .progmem.data:000000000000008f RHYTHM_4_2
     /tmp/ccPdSav7.s:6044   .progmem.data:0000000000000090 RHYTHM_DOT_4
     /tmp/ccPdSav7.s:6049   .progmem.data:0000000000000091 RHYTHM_2_2
     /tmp/ccPdSav7.s:6054   .progmem.data:0000000000000092 RHYTHM_DOT_2
     /tmp/ccPdSav7.s:6059   .progmem.data:0000000000000093 RHYTHM_DOT_32
     /tmp/ccPdSav7.s:6064   .progmem.data:0000000000000094 RHYTHM_DOT_16
     /tmp/ccPdSav7.s:6069   .progmem.data:0000000000000095 RHYTHM_DOT_8
     /tmp/ccPdSav7.s:6308   .data:0000000000000013 number
                            *COM*:0000000000000001 AD_Value
                            *COM*:0000000000000001 fSpeakerOut
                            *COM*:0000000000000001 nSensorVal
                            *COM*:0000000000000001 PhotoSensor
                            *COM*:0000000000000002 tempCounter
                            *COM*:000000000000000f IrKeyValue
                            *COM*:0000000000000004 ir_trans_temp
                            *COM*:0000000000000001 InfSenValue
                            *COM*:0000000000000001 IDmemory
                            *COM*:0000000000000001 TempExCustom
                            *COM*:0000000000000001 RobotComState
                            *COM*:0000000000000001 RCommCnt
                            *COM*:0000000000000001 PinniCmd
                            *COM*:0000000000000021 Eep_Kon
                            *COM*:0000000000000021 Eep_Mel

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
